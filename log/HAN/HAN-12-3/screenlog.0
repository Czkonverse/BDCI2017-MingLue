vim train_szx.py 
[?1049h[?1h=[1;28r[34l[34h[?25h[23m[24m[0m[H[J[?25l[28;1H"train_szx.py" 306L, 12779C[1;1H[34m#!/usr/bin/env python3
# -*- coding: utf-8 -*-[0m

[35mimport[0m numpy [33mas[0m np
[35mfrom[0m collections [35mimport[0m Counter
[35mimport[0m time
[35mimport[0m argparse
[35mimport[0m os
[35mimport[0m datetime
[35mimport[0m torch
[35mimport[0m torch.nn [33mas[0m nn
[35mimport[0m torch.optim [33mas[0m optim
[35mfrom[0m torch.utils.data [35mimport[0m DataLoader
[35mfrom[0m torch.autograd [35mimport[0m Variable

[35mimport[0m preprocessor.builddataset [33mas[0m bd
[35mimport[0m preprocessor.buildpretrainemb [33mas[0m bpe
[35mimport[0m preprocessor.getdoc2vec [33mas[0m gdv

[35mimport[0m utils.statisticsdata [33mas[0m sd
[35mimport[0m utils.calculatescore [33mas[0m cs
[35mfrom[0m utils.trainhelper [35mimport[0m accuracy, model_selector, do_eval, build_element_vec

[35mfrom[0m config [35mimport[0m Config

[35mfrom[0m data.mingluedata [35mimport[0m MingLueData[28;126H1,1[11CTop[1;1H[34h[?25h[?25l[28;1H[K[28;1H:[34h[?25hs[?25l[34h[?25he[?25l[34h[?25ht[?25l[34h[?25h[?25l [34h[?25hn[?25l[34h[?25hu[?25l[34h[?25hm[?25l[34h[?25hb[?25l[34h[?25he[?25l[34h[?25hr[?25l[34h[?25h[?25l[1;1H[33m  1 [0m[34m#!/usr/bin/env python3[0m
[33m  2 [0m[34m# -*- coding: utf-8 -*-[0m
[33m  3 
  4 [0m[35mimport[0m numpy [33mas[0m np
[33m  5 [0m[35mfrom[0m collections [35mimport[0m Counter
[33m  6 [0m[35mimport[0m time
[33m  7 [0m[35mimport[0m argparse
[33m  8 [0m[35mimport[0m os
[33m  9 [0m[35mimport[0m datetime
[33m 10 [0m[35mimport[0m torch
[33m 11 [0m[35mimport[0m torch.nn [33mas[0m nn
[33m 12 [0m[35mimport[0m torch.optim [33mas[0m optim
[33m 13 [0m[35mfrom[0m torch.utils.data [35mimport[0m DataLoader
[33m 14 [0m[35mfrom[0m torch.autograd [35mimport[0m Variable
[33m 15 
 16 [0m[35mimport[0m preprocessor.builddataset [33mas[0m bd
[33m 17 [0m[35mimport[0m preprocessor.buildpretrainemb [33mas[0m bpe
[33m 18 [0m[35mimport[0m preprocessor.getdoc2vec [33mas[0m gdv
[33m 19 
 20 [0m[35mimport[0m utils.statisticsdata [33mas[0m sd
[33m 21 [0m[35mimport[0m utils.calculatescore [33mas[0m cs
[33m 22 [0m[35mfrom[0m utils.trainhelper [35mimport[0m accuracy, model_selector, do_eval, build_element_vec
[33m 23 
 24 [0m[35mfrom[0m config [35mimport[0m Config
[33m 25 
 26 [0m[35mfrom[0m data.mingluedata [35mimport[0m MingLueData
[33m 27 [0m[28;126H1,1[11CTop[1;5H[34h[?25h[?25l[28;126H2[2;5H[34h[?25h[?25l[28;126H3,0-1[3;5H[34h[?25h[?25l[28;126H4,1  [4;5H[34h[?25h[?25l[28;126H5[5;5H[34h[?25h[?25l[28;126H6[6;5H[34h[?25h[?25l[28;126H7[7;5H[34h[?25h[?25l[28;126H8[8;5H[34h[?25h[?25l[28;126H9[9;5H[34h[?25h[?25l[28;126H10,1[10;5H[34h[?25h[?25l[28;127H1[11;5H[34h[?25h[?25l[28;127H2[12;5H[34h[?25h[?25l[28;127H3[13;5H[34h[?25h[?25l[28;127H4[14;5H[34h[?25h[?25l[28;127H5,0-1[15;5H[34h[?25h[?25l[28;127H6,1  [16;5H[34h[?25h[?25l[28;127H7[17;5H[34h[?25h[?25l[28;127H8[18;5H[34h[?25h[?25l[28;127H9,0-1[19;5H[34h[?25h[?25l[28;126H20,1  [20;5H[34h[?25h[?25l[28;127H1[21;5H[34h[?25h[?25l[28;127H2[22;5H[34h[?25h[?25l[28;127H3,0-1[23;5H[34h[?25h[?25l[28;127H4,1  [24;5H[34h[?25h[?25l[28;127H5,0-1[25;5H[34h[?25h[?25l[28;127H6,1  [26;5H[34h[?25h[?25l[28;127H7,0-1[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 28 [0m[28;1H[K[28;126H28,0-1[9C0%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 29 def[0m [36mget_sequence_lens[0m(x):[28;126H[K[28;126H29,1[11C0%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 30 [0m    sequence_lens = [][28;126H[K[28;126H30,1[11C1%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 31 [0m    sequence_length = x.size()[[31m1[0m]  [34m# in HAN： 2[0m[28;126H[K[28;126H31,1[11C1%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 32 [0m    x = x.view(-[31m1[0m, sequence_length)[28;126H[K[28;126H32,1[11C1%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 33 [0m    [33mfor[0m line [33min[0m x:[28;126H[K[28;126H33,1[11C2%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 34 [0m[8Cn = [31m0[0m[28;126H[K[28;126H34,1[11C2%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 35 [0m[8Cidx = [36mlen[0m(line) - [31m1[0m[28;126H[K[28;126H35,1[11C2%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 36 [8Cwhile[0m idx >= [31m0[0m:[28;126H[K[28;126H36,1[11C3%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 37 [12Cif[0m [36mint[0m(line[idx]) != [31m1[0m:  [34m# <PAD>[0m[28;126H[K[28;126H37,1[11C3%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 38 [16Cbreak[0m[28;126H[K[28;126H38,1[11C3%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 39 [0m[12Cn += [31m1[0m[28;126H[K[28;126H39,1[11C4%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 40 [0m[12Cidx -= [31m1[0m[28;126H[K[28;126H40,1[11C4%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 41 [8Cif[0m n == [36mlen[0m(line):[28;126H[K[28;126H41,1[11C5%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 42 [0m[12Csequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[28;126H[K[28;126H42,1[11C5%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 43 [8Celse[0m:[28;126H[K[28;126H43,1[11C5%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 44 [0m[12Csequence_lens.append(([36mlen[0m(line) - n))[28;126H[K[28;126H44,1[11C6%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 45 [0m    [33mreturn[0m sequence_lens[28;126H[K[28;126H45,1[11C6%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 46 [0m[28;126H[K[28;126H46,0-1[9C6%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 47 def[0m [36mis_padded_list[0m(seq):[28;126H[K[28;126H47,1[11C7%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 48 [0m    flag = [36mTrue[0m[28;126H[K[28;126H48,1[11C7%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 49 [0m    [33mfor[0m w [33min[0m seq:[28;126H[K[28;126H49,1[11C7%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 50 [8Cif[0m w != [31m1[0m:  [34m# <PAD>[0m[28;126H[K[28;126H50,1[11C8%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 51 [0m[12Cflag = [36mFalse[0m[28;126H[K[28;126H51,1[11C8%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 52 [12Cbreak[0m[28;126H[K[28;126H52,1[11C8%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 53 [0m    [33mreturn[0m flag[28;126H[K[28;126H53,1[11C9%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 54 [0m[28;126H[K[28;126H54,0-1[9C9%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 55 [0m[28;126H[K[28;126H55,0-1[8C10%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 56 def[0m [36mget_num_sentences_lens[0m(x):[28;126H[K[28;126H56,1[10C10%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 57 [0m    [31m'''[0m[28;126H[K[28;126H57,1[10C10%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 58 [0m[28;126H[K[28;126H58,0-1[8C11%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 59 [0m[31m    :param x: [batch_size, num_sentences, sequence_length], Tensor[0m[28;126H[K[28;126H59,1[10C11%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 60 [0m[31m    :return: num_sentences_lens: length: batch_size, Tensor[0m[28;126H[K[28;126H60,1[10C11%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 61 [0m[31m    '''[0m[28;126H[K[28;126H61,1[10C12%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 62 [0m    [34m# num_sentences_lens = [][0m[28;126H[K[28;126H62,1[10C12%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 63 [0m    matrix = x[28;126H[K[28;126H63,1[10C12%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 64 [0m    n = [31m0[0m[28;126H[K[28;126H64,1[10C13%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 65 [0m    idx = [36mlen[0m(matrix) - [31m1[0m[28;126H[K[28;126H65,1[10C13%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 66 [0m    [33mwhile[0m idx >= [31m0[0m:[28;126H[K[28;126H66,1[10C13%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 67 [8Cif[0m [33mnot[0m is_padded_list(matrix[idx]):[28;126H[K[28;126H67,1[10C14%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 68 [12Cbreak[0m[28;126H[K[28;126H68,1[10C14%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 69 [0m[8Cn += [31m1[0m[28;126H[K[28;126H69,1[10C15%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 70 [0m[8Cidx -= [31m1[0m[28;126H[K[28;126H70,1[10C15%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 71 [0m    num_sentences_lens = (([36mlen[0m(matrix) - n))[28;126H[K[28;126H71,1[10C15%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 72 [0m    [33mreturn[0m num_sentences_lens[28;126H[K[28;126H72,1[10C16%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 73 [0m[28;126H[K[28;126H73,0-1[8C16%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 74 def[0m [36mmain[0m(model_id, use_element, is_save):[28;126H[K[28;126H74,1[10C16%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 75 [0m    config = Config()[28;126H[K[28;126H75,1[10C17%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 76 [0m    [36mprint[0m([31m"epoch num: "[0m, config.epoch_num)[28;126H[K[28;126H76,1[10C17%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 77 [0m    config.use_element = use_element[28;126H[K[28;126H77,1[10C17%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 78 [0m   [34m# model_id = int(input("Please select a model(input model id):\n0: fastText\n1: TextCNN\n2: TextRCNN\n4: HAN\nInput: "))[0m[28;126H[K[28;126H78,1[10C18%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 79 [0m   [34m# is_save = input("Save Model?(y/n): ")[0m[28;126H[K[28;126H79,1[10C18%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 80 [0m    [36mprint[0m([31m"loading data..."[0m)[28;126H[K[28;126H80,1[10C18%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 81 [0m    ids, data, labels = bd.load_data(config.data_path)[28;126H[K[28;126H81,1[10C19%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 82 [0m[34m#    sd.show_text_len_distribution(data)[0m[28;126H[K[28;126H82,1[10C19%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 83 [0m[34m#    sd.show_label_text_len_distribution(labels, data)[0m[28;126H[K[28;126H83,1[10C20%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 84 [0m    total_vocab_size = sd.count_vocab_size(data)[28;126H[K[28;126H84,1[10C20%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 85 [0m    [36mprint[0m([31m"total vocab size"[0m, total_vocab_size)[28;126H[K[28;126H85,1[10C20%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 86 [0m    force = config.force_word2index[28;126H[K[28;126H86,1[10C21%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 87 [0m    [33mif[0m [33mnot[0m force [33mand[0m os.path.exists(config.index2word_path) [33mand[0m os.path.exists(config.word2index_path):[28;126H[K[28;126H87,1[10C21%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 88 [0m[8C[36mprint[0m([31m"load word2index"[0m)[28;126H[K[28;126H88,1[10C21%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 89 [0m[8Cdict_word2index = bpe.load_pickle(config.word2index_path)[28;126H[K[28;126H89,1[10C22%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 90 [0m[8C[36mprint[0m(dict_word2index[[31m'<UNK>'[0m], dict_word2index[[31m'<PAD>'[0m])[28;126H[K[28;126H90,1[10C22%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 91 [0m    [33melse[0m:[28;126H[K[28;126H91,1[10C22%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 92 [0m[8C[36mprint[0m([31m"save word2index and index2word"[0m)[28;126H[K[28;126H92,1[10C23%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 93 [0m[8Ccount, dict_word2index, dict_index2word = bd.build_vocabulary(data, min_count=config.min_count)[28;126H[K[28;126H93,1[10C23%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 94 [0m[8Cbpe.save_dict(dict_index2word, config.index2word_path)[28;126H[K[28;126H94,1[10C24%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 95 [0m[8Cbpe.save_dict(dict_word2index, config.word2index_path)[28;126H[K[28;126H95,1[10C24%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 96 [8Creturn[0m[28;126H[K[28;126H96,1[10C24%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 97 [0m[28;126H[K[28;126H97,0-1[8C25%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 98 [0m[34m#    train_ids, train_X, train_y = bd.over_sample(train_ids, train_X, train_y)[0m[28;126H[K[28;126H98,1[10C25%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m 99 [0m[34m#    print(train_y.shape[0], Counter(train_y))[0m[28;126H[K[28;126H99,1[10C25%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m100 [0m    [33mif[0m is_save == [31m'y'[0m:[28;126H[K[28;126H100,1[9C26%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m101 [8Cif[0m model_id != [31m4[0m:[28;126H[K[28;126H101,1[9C26%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m102 [0m[12Call_train_ids, all_train_X, all_train_y = bd.build_dataset_over_sample(ids, data,[28;126H[K[28;126H102,1[9C26%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m103 [0m[36Clabels, dict_word2index, config.max_text_len)[28;126H[K[28;126H103,1[9C27%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m104 [0m[12Cdataset = MingLueData(all_train_ids, all_train_X, all_train_y)[28;126H[K[28;126H104,1[9C27%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m105 [8Celse[0m:[28;126H[K[28;126H105,1[9C27%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m106 [0m[12C[36mprint[0m([31m"save HAN..."[0m)[28;126H[K[28;126H106,1[9C28%[27;5H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;1H[33m107 [0m[12Ctrain_data, train_labels = bd.build_data_set_HAN(data, labels, dict_word2index, num_sentences=config.num_sentences, sequence_lee[27;1H[33m    [0mngth=config.sequence_length)[28;126H[K[28;126H107,1[9C28%[26;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m108 [0m[12C[36mprint[0m(np.shape(train_data), np.shape(train_labels))[28;126H[K[28;126H108,1[9C29%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m109 [0m[12C[36mprint[0m([36mlen[0m(ids))[28;126H[K[28;126H109,1[9C29%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m110 [0m[12Cdataset = MingLueData(ids, train_data, train_labels)[28;126H[K[28;126H110,1[9C30%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m111 [0m[28;126H[K[28;126H111,1[9C30%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m112 [0m    [33melse[0m:[28;126H[K[28;126H112,1[9C30%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m113 [8Cif[0m model_id == [31m4[0m:[28;126H[K[28;126H113,1[9C31%[27;5H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;1H[33m114 [0m[12Ctrain_data, train_labels = bd.build_data_set_HAN(data, labels, dict_word2index, num_sentences=config.num_sentences, sequence_lee[27;1H[33m    [0mngth=config.sequence_length)[28;126H[K[28;126H114,1[9C31%[26;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m115 [0m[12Ctrain_ids, valid_ids = bd.split_data(ids, radio=[31m0.9[0m)[28;126H[K[28;126H115,1[9C32%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m116 [0m[12Ctrain_X, valid_X = bd.split_data(train_data, radio=[31m0.9[0m)[28;126H[K[28;126H116,1[9C32%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m117 [0m[12Ctrain_y, valid_y = bd.split_data(train_labels, radio=[31m0.9[0m)[28;126H[K[28;126H117,1[9C32%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m118 [8Celse[0m:[28;126H[K[28;126H118,1[9C33%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m119 [0m[12Ctrain_ids, valid_ids = bd.split_data(ids, radio=[31m0.9[0m)[28;126H[K[28;126H119,1[9C33%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m120 [0m[12Ctrain_data, valid_data = bd.split_data(data, radio=[31m0.9[0m)[28;126H[K[28;126H120,1[9C33%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m121 [0m[12Ctrain_labels, valid_labels = bd.split_data(labels, radio=[31m0.9[0m)[28;126H[K[28;126H121,1[9C34%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m122 [0m[12C[34m# over sample for train data[0m[28;126H[K[28;126H122,1[9C34%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m123 [0m[12Ctrain_ids, train_X, train_y = bd.build_dataset_over_sample(train_ids, train_data,[28;126H[K[28;126H123,1[9C34%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m124 [0m[40Ctrain_labels, dict_word2index, config.max_text_len)[28;126H[K[28;126H124,1[9C35%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m125 [0m[12Cvalid_ids, valid_X, valid_y = bd.build_dataset(valid_ids, valid_data,[28;126H[K[28;126H125,1[9C35%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m126 [0m[24Cvalid_labels, dict_word2index, config.max_text_len)[28;126H[K[28;126H126,1[9C35%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m127 [0m[8C[36mprint[0m([31m"trainset size:"[0m, [36mlen[0m(train_ids))[28;126H[K[28;126H127,1[9C36%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m128 [0m[8C[36mprint[0m([31m"validset size:"[0m, [36mlen[0m(valid_ids))[28;126H[K[28;126H128,1[9C36%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m129 [0m[8Cdataset = MingLueData(train_ids, train_X, train_y)[28;126H[K[28;126H129,1[9C37%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m130 [0m[28;126H[K[28;126H130,0-1[7C37%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m131 [0m    [33mif[0m model_id == [31m4[0m:[28;126H[K[28;126H131,1[9C37%[27;5H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;1H[33m132 [0m[8Cbegin = datetime.datetime.now()
[33m133 [0m[8C[36mprint[0m([31m"begin:"[0m, begin)[28;126H[K[28;126H132,1[9C38%[26;5H[34h[?25h[?25l[28;128H3[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m134 [0m[8Csequence_lens_dict = {}[28;126H[K[28;126H134,1[9C38%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m135 [0m[8Cnum_sentences_lens_dict = {}[28;126H[K[28;126H135,1[9C38%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m136 [8Cfor[0m hi_data [33min[0m dataset:[28;126H[K[28;126H136,1[9C39%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m137 [0m[12C_ids, _texts, _ = hi_data[28;126H[K[28;126H137,1[9C39%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m138 [0m[12C[34m# <class 'str'> <class 'numpy.ndarray'>[0m[28;126H[K[28;126H138,1[9C40%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m139 [0m[12C_texts = torch.from_numpy(_texts)[28;126H[K[28;126H139,1[9C40%[27;5H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;1H[33m140 [0m[12Csequence_lens_dict[_ids] = get_sequence_lens(_texts)
[33m141 [0m[12Cnum_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[28;126H[K[28;126H140,1[9C40%[26;5H[34h[?25h[?25l[28;128H1[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m142 [0m[8C[36mprint[0m([36mlen[0m(sequence_lens_dict), [36mlen[0m(num_sentences_lens_dict))[28;126H[K[28;126H142,1[9C41%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m143 [0m[8Cend = datetime.datetime.now()[28;126H[K[28;126H143,1[9C41%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m144 [0m[8C[36mprint[0m([31m"end:"[0m, end)[28;126H[K[28;126H144,1[9C41%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m145 [0m[8C[36mprint[0m(end-begin)[28;126H[K[28;126H145,1[9C42%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m146 [0m    [33mdel[0m data[28;126H[K[28;126H146,1[9C42%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m147 [0m[28;126H[K[28;126H147,0-1[7C43%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m148 [0m    batch_size = config.batch_size[28;126H[K[28;126H148,1[9C43%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m149 [0m    [33mif[0m model_id == [31m4[0m:[28;126H[K[28;126H149,1[9C43%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m150 [0m[8Cbatch_size = config.han_batch_size[28;126H[K[28;126H150,1[9C44%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m151 [0m    train_loader = DataLoader(dataset=dataset,[28;126H[K[28;126H151,1[9C44%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m152 [0m[31Cbatch_size=batch_size, [34m# 更改便于为不同模型传递不同batch[0m[28;126H[K[28;126H152,1[9C44%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m153 [0m[31Cshuffle=[36mTrue[0m,[28;126H[K[28;126H153,1[9C45%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m154 [0m[31Cnum_workers=config.num_workers)[28;126H[K[28;126H154,1[9C45%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m155 [0m    [33mif[0m is_save != [31m'y'[0m:[28;126H[K[28;126H155,1[9C45%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m156 [0m[8Cdataset = MingLueData(valid_ids, valid_X, valid_y)[28;126H[K[28;126H156,1[9C46%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m157 [0m[8Cvalid_loader = DataLoader(dataset=dataset,[28;126H[K[28;126H157,1[9C46%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m158 [0m[30Cbatch_size=batch_size, [34m# 更改便于为不同模型传递不同batch[0m[28;126H[K[28;126H158,1[9C46%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m159 [0m[30Cshuffle=[36mFalse[0m,[28;126H[K[28;126H159,1[9C47%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m160 [0m[30Cnum_workers=config.num_workers)[28;126H[K[28;126H160,1[9C47%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m161 [0m    [33mif[0m model_id == [31m5[0m [33mor[0m model_id == [31m6[0m:  [34m# cnn and rcnn with doc2vec[0m[28;126H[K[28;126H161,1[9C48%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m162 [0m[8Cdmpv_model, dbow_model = gdv.load_doc2vec_model(config.dmpv_model_path, config.dbow_model_path)[28;126H[K[28;126H162,1[9C48%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m163 [0m    [36mprint[0m([31m"data loaded"[0m)[28;126H[K[28;126H163,1[9C48%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m164 [0m[28;126H[K[28;126H164,1[9C49%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m165 [0m    config.vocab_size = [36mlen[0m(dict_word2index)[28;126H[K[28;126H165,1[9C49%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m166 [0m    [36mprint[0m([31m'config vocab size:'[0m, config.vocab_size)[28;126H[K[28;126H166,1[9C49%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m167 [0m    model = model_selector(config, model_id, use_element)[28;126H[K[28;126H167,1[9C50%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m168 [0m    [33mif[0m config.has_cuda:[28;126H[K[28;126H168,1[9C50%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m169 [0m[8Cmodel = model.cuda()[28;126H[K[28;126H169,1[9C50%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m170 [0m[28;126H[K[28;126H170,1[9C51%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m171 [0m    [33mif[0m use_element:[28;126H[K[28;126H171,1[9C51%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m172 [0m[8Call_element_vector = bpe.load_pickle(config.element_vector_path)[28;126H[K[28;126H172,1[9C51%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m173 [0m[28;126H[K[28;126H173,0-1[7C52%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m174 [0m    loss_weight = torch.FloatTensor(config.loss_weight_value)[28;126H[K[28;126H174,1[9C52%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m175 [0m    loss_weight = loss_weight + [31m1[0m - loss_weight.mean()[28;126H[K[28;126H175,1[9C53%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m176 [0m    [36mprint[0m([31m"loss weight:"[0m,loss_weight)[28;126H[K[28;126H176,1[9C53%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m177 [0m[28;126H[K[28;126H177,1[9C53%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m178 [0m[28;126H[K[28;126H178,1[9C54%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m179 [0m    loss_fun = nn.CrossEntropyLoss(loss_weight.cuda())[28;126H[K[28;126H179,1[9C54%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m180 [0m[28;126H[K[28;126H180,1[9C54%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m181 [0m[34m#    loss_fun = nn.CrossEntropyLoss()[0m[28;126H[K[28;126H181,1[9C55%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m182 [0m[34m#    optimizer = optim.Adam(model.parameters(),lr=config.learning_rate, weight_decay=config.weight_decay)[0m[28;126H[K[28;126H182,1[9C55%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m183 [0m    optimizer = model.get_optimizer(config.learning_rate,[28;126H[K[28;126H183,1[9C55%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m184 [0m[36Cconfig.learning_rate2,[28;126H[K[28;126H184,1[9C56%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m185 [0m[36Cconfig.weight_decay)[28;126H[K[28;126H185,1[9C56%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m186 [0m    [36mprint[0m([31m"training..."[0m)[28;126H[K[28;126H186,1[9C56%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m187 [0m[28;126H[K[28;126H187,0-1[7C57%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m188 [0m    weight_count = [31m0[0m[28;126H[K[28;126H188,1[9C57%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m189 [0m    max_score = [31m0[0m[28;126H[K[28;126H189,1[9C58%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m190 [0m    total_loss_weight = torch.FloatTensor(torch.zeros([31m8[0m))[28;126H[K[28;126H190,1[9C58%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m191 [0m    [33mfor[0m epoch [33min[0m [36mrange[0m(config.epoch_num):[28;126H[K[28;126H191,1[9C58%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m192 [0m[8C[36mprint[0m([31m"lr:"[0m,config.learning_rate,[31m"lr2:"[0m,config.learning_rate2)[28;126H[K[28;126H192,1[9C59%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m193 [0m[8Crunning_loss = [31m0.0[0m[28;126H[K[28;126H193,1[9C59%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m194 [0m[8Crunning_acc = [31m0.0[0m[28;126H[K[28;126H194,1[9C59%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m195 [8Cfor[0m i, data [33min[0m [36menumerate[0m(train_loader, [31m0[0m):[28;126H[K[28;126H195,1[9C60%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m196 [0m[12Cbegin = datetime.datetime.now()[28;126H[K[28;126H196,1[9C60%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m197 [0m[12Cids, texts, labels = data[28;126H[K[28;126H197,1[9C60%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m198 [12Cif[0m config.has_cuda:[28;126H[K[28;126H198,1[9C61%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m199 [0m[16Cinputs, labels = Variable(texts.cuda()), Variable(labels.cuda())[28;126H[K[28;126H199,1[9C61%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m200 [12Celse[0m:[28;126H[K[28;126H200,1[9C62%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m201 [0m[16Cinputs, labels = Variable(texts), Variable(labels)[28;126H[K[28;126H201,1[9C62%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m202 [0m[12Coptimizer.zero_grad()[28;126H[K[28;126H202,1[9C62%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m203 [0m[12Cend = datetime.datetime.now()[28;126H[K[28;126H203,1[9C63%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m204 [0m[12C[36mprint[0m([31m"Before:"[0m, begin, end, end-begin)[28;126H[K[28;126H204,1[9C63%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m205 [12Cif[0m model_id == [31m4[0m:[28;126H[K[28;126H205,1[9C63%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m206 [0m[16C[34m# [0m[30m[43mTODO[0m[28;126H[K[28;126H206,1[9C64%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m207 [0m[16Csequence_lens_list=[][28;126H[K[28;126H207,1[9C64%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m208 [0m[16Cnum_sentences_lens_list=[][28;126H[K[28;126H208,1[9C64%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m209 [16Cfor[0m _id [33min[0m ids:[28;126H[K[28;126H209,1[9C65%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m210 [0m[20Csequence_lens_list.append(sequence_lens_dict[_id])[28;126H[K[28;126H210,1[9C65%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m211 [0m[20Cnum_sentences_lens_list.append(num_sentences_lens_dict[_id])[28;126H[K[28;126H211,1[9C65%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m212 [0m[16C[36mprint[0m([36mlen[0m(sequence_lens_list))[28;126H[K[28;126H212,1[9C66%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m213 [0m[16C[36mprint[0m([36mlen[0m(num_sentences_lens_list))[28;126H[K[28;126H213,1[9C66%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m214 [0m[16Csequence_lens_list = torch.Tensor(sequence_lens_list).cuda()[28;126H[K[28;126H214,1[9C67%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m215 [0m[16Cnum_sentences_lens_list = torch.Tensor(num_sentences_lens_list).cuda()[28;126H[K[28;126H215,1[9C67%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m216 [0m[16Coutputs = model(inputs, sequence_lens_list, num_sentences_lens_list)[28;126H[K[28;126H216,1[9C67%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m217 [12Celif[0m model_id == [31m5[0m [33mor[0m model_id == [31m6[0m:  [34m# cnn and rcnn with doc2vec[0m[28;126H[K[28;126H217,1[9C68%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m218 [0m[16Cdoc2vec = gdv.build_doc2vec(ids, dmpv_model, dbow_model)[28;126H[K[28;126H218,1[9C68%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m219 [16Cif[0m config.has_cuda:[28;126H[K[28;126H219,1[9C68%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m220 [0m[20Cdoc2vec = Variable(torch.FloatTensor(doc2vec).cuda())[28;126H[K[28;126H220,1[9C69%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m221 [16Celse[0m:[28;126H[K[28;126H221,1[9C69%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m222 [0m[20Cdoc2vec = Variable(torch.FloatTensor(doc2vec))[28;126H[K[28;126H222,1[9C69%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m223 [0m[16C[34m# [batch_size, (doc2vec_size*2)][0m[28;126H[K[28;126H223,1[9C70%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m224 [0m[16C[34m# print(doc2vec.size())[0m[28;126H[K[28;126H224,1[9C70%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m225 [0m[16Coutputs = model(inputs, doc2vec)[28;126H[K[28;126H225,1[9C70%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m226 [12Celif[0m use_element:[28;126H[K[28;126H226,1[9C71%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m227 [0m[16Celement_vec = build_element_vec(ids, all_element_vector)[28;126H[K[28;126H227,1[9C71%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m228 [16Cif[0m config.has_cuda:[28;126H[K[28;126H228,1[9C72%[27;5H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m229 [0m[20Celement_vec = Variable(torch.LongTensor(element_vec).cuda())[28;126H[K[28;126H229,1[9C72%[27;5H[34h[?25h[?25l[28;128H8[26;5H[34h[?25h[?25l[28;128H7[25;5H[34h[?25h[?25l[28;128H6[24;5H[34h[?25h[?25l[28;128H5[23;5H[34h[?25h[?25l[28;128H4[22;5H[34h[?25h[?25l[28;128H3[21;5H[34h[?25h[?25l[28;128H2[20;5H[34h[?25h[?25l[28;128H1[19;5H[34h[?25h[?25l[28;128H0[18;5H[34h[?25h[?25l[28;127H19[17;5H[34h[?25h[?25l[28;128H8[16;5H[34h[?25h[?25l[28;128H7[15;5H[34h[?25h[?25l[28;128H6[14;5H[34h[?25h[?25l[28;128H5[13;5H[34h[?25h[?25l[28;128H4[12;5H[34h[?25h[?25l[28;128H3[11;5H[34h[?25h[?25l[16Csequence_lens_list = torch.Tensor(sequence_lens_list).cuda()[12;21Hnum_sentences_lens_list = torch.Tensor(num_sentences_lens_list).cuda()[13;21Houtputs = model(inputs, sequence_lens_list, num_sentences_lens_list)[13;89H[K[14;17H[33melif[0m model_id == [31m5[0m [33mor[0m model_id == [31m6[0m:  [34m# cnn and rcnn with doc2vec[0m[14;82H[K[15;17H    doc2vec = gdv.build_doc2vec(ids, dmpv_model, dbow_model)[15;77H[K[16;21H[33mif[0m config.has_cuda:[16;40H[K[17;21H    doc2vec = Variable(torch.FloatTensor(doc2vec).cuda())[18;21H[33melse[0m:[18;26H[K[19;21H    doc2vec = Variable(torch.FloatTensor(doc2vec))[20;21H[34m# [batch_size, (doc2vec_size*2)][0m[20;53H[K[21;23H[34mprint(doc2vec.size())[0m[21;44H[K[22;21Houtputs = model(inputs, doc2vec)[23;17H[33melif[0m use_element:[23;34H[K[24;17H    element_vec = build_element_vec(ids, all_element_vector)[25;21H[33mif[0m config.has_cuda:[25;40H[K[26;21H    element_vec = Variable(torch.LongTensor(element_vec).cuda())[27;21H[33melse[0m:[27;26H[K[28;131H7[11;21H[34h[?25h[?25l[28;128H2[10;21H[34h[?25h[?25lsequence_lens_list = torch.Tensor(sequence_lens_list).cuda()[11;21Hnum_sentences_lens_list = torch.Tensor(num_sentences_lens_list).cuda()[12;21Houtputs = model(inputs, sequence_lens_list, num_sentences_lens_list)[12;89H[K[13;17H[33melif[0m model_id == [31m5[0m [33mor[0m model_id == [31m6[0m:  [34m# cnn and rcnn with doc2vec[0m[13;82H[K[14;17H    doc2vec = gdv.build_doc2vec(ids, dmpv_model, dbow_model)[14;77H[K[15;21H[33mif[0m config.has_cuda:[15;40H[K[16;21H    doc2vec = Variable(torch.FloatTensor(doc2vec).cuda())[17;21H[33melse[0m:[17;26H[K[18;21H    doc2vec = Variable(torch.FloatTensor(doc2vec))[19;21H[34m# [batch_size, (doc2vec_size*2)][0m[19;53H[K[20;23H[34mprint(doc2vec.size())[0m[20;44H[K[21;21Houtputs = model(inputs, doc2vec)[22;17H[33melif[0m use_element:[22;34H[K[23;17H    element_vec = build_element_vec(ids, all_element_vector)[24;21H[33mif[0m config.has_cuda:[24;40H[K[25;21H    element_vec = Variable(torch.LongTensor(element_vec).cuda())[26;21H[33melse[0m:[26;26H[K[27;21H    element_vec = Variable(torch.LongTensor(element_vec))[10;21H[34h[?25h[?25l[28;128H1[9;21H[34h[?25h[?25l[28;128H0[8;21H[34h[?25h[?25l[28;127H09[7;21H[34h[?25h[?25l[28;128H8[6;21H[34h[?25h[?25l[28;128H7[5;21H[34h[?25h[?25l[28;128H6[4;21H[34h[?25h[?25l[28;128H5[3;21H[34h[?25h[?25l[28;128H4[2;21H[34h[?25h[?25l[28;128H3[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m202 [0m[12Coptimizer.zero_grad()[28;126H[K[28;126H202,17[8C72%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m201 [0m[16Cinputs, labels = Variable(texts), Variable(labels)[28;126H[K[28;126H201,17[8C72%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m200 [12Celse[0m:[28;126H[K[28;126H200,17[8C71%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m199 [0m[16Cinputs, labels = Variable(texts.cuda()), Variable(labels.cuda())[28;126H[K[28;126H199,17[8C71%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m198 [12Cif[0m config.has_cuda:[28;126H[K[28;126H198,17[8C71%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m197 [0m[12Cids, texts, labels = data[28;126H[K[28;126H197,17[8C70%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m196 [0m[12Cbegin = datetime.datetime.now()[28;126H[K[28;126H196,17[8C70%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m195 [8Cfor[0m i, data [33min[0m [36menumerate[0m(train_loader, [31m0[0m):[28;126H[K[28;126H195,17[8C70%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m194 [0m[8Crunning_acc = [31m0.0[0m[28;126H[K[28;126H194,17[8C69%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m193 [0m[8Crunning_loss = [31m0.0[0m[28;126H[K[28;126H193,17[8C69%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m192 [0m[8C[36mprint[0m([31m"lr:"[0m,config.learning_rate,[31m"lr2:"[0m,config.learning_rate2)[28;126H[K[28;126H192,17[8C68%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m191 [0m    [33mfor[0m epoch [33min[0m [36mrange[0m(config.epoch_num):[28;126H[K[28;126H191,17[8C68%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m190 [0m    total_loss_weight = torch.FloatTensor(torch.zeros([31m8[0m))[28;126H[K[28;126H190,17[8C68%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m189 [0m    max_score = [31m0[0m[28;126H[K[28;126H189,17[8C67%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m188 [0m    weight_count = [31m0[0m[28;126H[K[28;126H188,17[8C67%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m187 [0m[28;126H[K[28;126H187,0-1[7C67%[1;5H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m186 [0m    [36mprint[0m([31m"training..."[0m)[28;126H[K[28;126H186,17[8C66%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m185 [0m[36Cconfig.weight_decay)[28;126H[K[28;126H185,17[8C66%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m184 [0m[36Cconfig.learning_rate2,[28;126H[K[28;126H184,17[8C66%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m183 [0m    optimizer = model.get_optimizer(config.learning_rate,[28;126H[K[28;126H183,17[8C65%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m182 [0m[34m#    optimizer = optim.Adam(model.parameters(),lr=config.learning_rate, weight_decay=config.weight_decay)[0m[28;126H[K[28;126H182,17[8C65%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m181 [0m[34m#    loss_fun = nn.CrossEntropyLoss()[0m[28;126H[K[28;126H181,17[8C64%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m180 [0m[28;126H[K[28;126H180,4[9C64%[1;8H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m179 [0m    loss_fun = nn.CrossEntropyLoss(loss_weight.cuda())[28;126H[K[28;126H179,17[8C64%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m178 [0m[28;126H[K[28;126H178,4[9C63%[1;8H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m177 [0m[28;126H[K[28;126H177,4[9C63%[1;8H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m176 [0m    [36mprint[0m([31m"loss weight:"[0m,loss_weight)[28;126H[K[28;126H176,17[8C63%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m175 [0m    loss_weight = loss_weight + [31m1[0m - loss_weight.mean()[28;126H[K[28;126H175,17[8C62%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m174 [0m    loss_weight = torch.FloatTensor(config.loss_weight_value)[28;126H[K[28;126H174,17[8C62%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m173 [0m[28;126H[K[28;126H173,0-1[7C62%[1;5H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m172 [0m[8Call_element_vector = bpe.load_pickle(config.element_vector_path)[28;126H[K[28;126H172,17[8C61%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m171 [0m    [33mif[0m use_element:[28;126H[K[28;126H171,17[8C61%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m170 [0m[28;126H[K[28;126H170,4[9C61%[1;8H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m169 [0m[8Cmodel = model.cuda()[28;126H[K[28;126H169,17[8C60%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m168 [0m    [33mif[0m config.has_cuda:[28;126H[K[28;126H168,17[8C60%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m167 [0m    model = model_selector(config, model_id, use_element)[28;126H[K[28;126H167,17[8C59%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m166 [0m    [36mprint[0m([31m'config vocab size:'[0m, config.vocab_size)[28;126H[K[28;126H166,17[8C59%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m165 [0m    config.vocab_size = [36mlen[0m(dict_word2index)[28;126H[K[28;126H165,17[8C59%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m164 [0m[28;126H[K[28;126H164,1[9C58%[1;5H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m163 [0m    [36mprint[0m([31m"data loaded"[0m)[28;126H[K[28;126H163,17[8C58%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m162 [0m[8Cdmpv_model, dbow_model = gdv.load_doc2vec_model(config.dmpv_model_path, config.dbow_model_path)[28;126H[K[28;126H162,17[8C58%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m161 [0m    [33mif[0m model_id == [31m5[0m [33mor[0m model_id == [31m6[0m:  [34m# cnn and rcnn with doc2vec[0m[28;126H[K[28;126H161,17[8C57%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m160 [0m[30Cnum_workers=config.num_workers)[28;126H[K[28;126H160,17[8C57%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m159 [0m[30Cshuffle=[36mFalse[0m,[28;126H[K[28;126H159,17[8C57%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m158 [0m[30Cbatch_size=batch_size, [34m# 更改便于为不同模型传递不同batch[0m[28;126H[K[28;126H158,17[8C56%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m157 [0m[8Cvalid_loader = DataLoader(dataset=dataset,[28;126H[K[28;126H157,17[8C56%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m156 [0m[8Cdataset = MingLueData(valid_ids, valid_X, valid_y)[28;126H[K[28;126H156,17[8C55%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m155 [0m    [33mif[0m is_save != [31m'y'[0m:[28;126H[K[28;126H155,17[8C55%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m154 [0m[31Cnum_workers=config.num_workers)[28;126H[K[28;126H154,17[8C55%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m153 [0m[31Cshuffle=[36mTrue[0m,[28;126H[K[28;126H153,17[8C54%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m152 [0m[31Cbatch_size=batch_size, [34m# 更改便于为不同模型传递不同batch[0m[28;126H[K[28;126H152,17[8C54%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m151 [0m    train_loader = DataLoader(dataset=dataset,[28;126H[K[28;126H151,17[8C54%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m150 [0m[8Cbatch_size = config.han_batch_size[28;126H[K[28;126H150,17[8C53%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m149 [0m    [33mif[0m model_id == [31m4[0m:[28;126H[K[28;126H149,17[8C53%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m148 [0m    batch_size = config.batch_size[28;126H[K[28;126H148,17[8C53%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m147 [0m[28;126H[K[28;126H147,0-1[7C52%[1;5H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m146 [0m    [33mdel[0m data[28;126H[K[28;126H146,12[8C52%[1;16H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m145 [0m[8C[36mprint[0m(end-begin)[28;126H[K[28;126H145,17[8C51%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m144 [0m[8C[36mprint[0m([31m"end:"[0m, end)[28;126H[K[28;126H144,17[8C51%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m143 [0m[8Cend = datetime.datetime.now()[28;126H[K[28;126H143,17[8C51%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m142 [0m[8C[36mprint[0m([36mlen[0m(sequence_lens_dict), [36mlen[0m(num_sentences_lens_dict))[28;126H[K[28;126H142,17[8C50%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m141 [0m[12Cnum_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[28;126H[K[28;126H141,17[8C50%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m140 [0m[12Csequence_lens_dict[_ids] = get_sequence_lens(_texts)[28;126H[K[28;126H140,17[8C50%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m139 [0m[12C_texts = torch.from_numpy(_texts)[28;126H[K[28;126H139,17[8C49%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m138 [0m[12C[34m# <class 'str'> <class 'numpy.ndarray'>[0m[28;126H[K[28;126H138,17[8C49%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m137 [0m[12C_ids, _texts, _ = hi_data[28;126H[K[28;126H137,17[8C49%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m136 [8Cfor[0m hi_data [33min[0m dataset:[28;126H[K[28;126H136,17[8C48%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m135 [0m[8Cnum_sentences_lens_dict = {}[28;126H[K[28;126H135,17[8C48%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m134 [0m[8Csequence_lens_dict = {}[28;126H[K[28;126H134,17[8C48%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m133 [0m[8C[36mprint[0m([31m"begin:"[0m, begin)[28;126H[K[28;126H133,17[8C47%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m132 [0m[8Cbegin = datetime.datetime.now()[28;126H[K[28;126H132,17[8C47%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m131 [0m    [33mif[0m model_id == [31m4[0m:[28;126H[K[28;126H131,17[8C46%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m130 [0m[28;126H[K[28;126H130,0-1[7C46%[1;5H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m129 [0m[8Cdataset = MingLueData(train_ids, train_X, train_y)[28;126H[K[28;126H129,17[8C46%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m128 [0m[8C[36mprint[0m([31m"validset size:"[0m, [36mlen[0m(valid_ids))[28;126H[K[28;126H128,17[8C45%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m127 [0m[8C[36mprint[0m([31m"trainset size:"[0m, [36mlen[0m(train_ids))[28;126H[K[28;126H127,17[8C45%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m126 [0m[24Cvalid_labels, dict_word2index, config.max_text_len)[28;126H[K[28;126H126,17[8C45%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m125 [0m[12Cvalid_ids, valid_X, valid_y = bd.build_dataset(valid_ids, valid_data,[28;126H[K[28;126H125,17[8C44%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m124 [0m[40Ctrain_labels, dict_word2index, config.max_text_len)[28;126H[K[28;126H124,17[8C44%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m123 [0m[12Ctrain_ids, train_X, train_y = bd.build_dataset_over_sample(train_ids, train_data,[28;126H[K[28;126H123,17[8C44%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m122 [0m[12C[34m# over sample for train data[0m[28;126H[K[28;126H122,17[8C43%[1;21H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[33m121 [0m[12Ctrain_labels, valid_labels = bd.split_data(labels, radio=[31m0.9[0m)[28;126H[K[28;126H121,17[8C43%[1;21H[34h[?25h[?25l[28;128H2[2;21H[34h[?25h[?25l[28;128H3[3;21H[34h[?25h[?25l[28;128H4[4;21H[34h[?25h[?25l[28;128H5[5;21H[34h[?25h[?25l[28;128H6[6;21H[34h[?25h[?25l[28;128H7[7;21H[34h[?25h[?25l[28;128H8[8;21H[34h[?25h[?25l[28;128H9[9;21H[34h[?25h[?25l[28;127H30,0-1[10;5H[34h[?25h[?25l[28;128H1,17 [11;21H[34h[?25h[?25l[28;131H8[11;22H[34h[?25h[?25l[28;131H9[11;23H[34h[?25h[?25l[28;130H20[11;24H[34h[?25h[?25l[28;131H1[11;25H[34h[?25h[?25l[28;128H2,9 [12;13H[34h[?25h[?25l[28;128H3[13;13H[34h[?25h[?25l[28;128H4[14;13H[34h[?25h[?25l[28;128H5[15;13H[34h[?25h[?25l[28;128H4[14;13H[34h[?25h[?25l[28;128H3[13;13H[34h[?25h[?25l[28;128H2[12;13H[34h[?25h[?25l[28;1H[1m-- INSERT --[0m[28;126H[K[28;126H132,9[9C43%[12;13H[34h[?25h[?25l[12;13H[K[13;5Hbegin = datetime.datetime.now()[14;13H[36mprint[0m([31m"begin:"[0m, begin)[14;35H[K[15;13Hsequence_lens_dict = {}[15;37H[K[16;13Hnum_sentences_lens_dict = {}[17;13H[33mfor[0m hi_data [33min[0m dataset:[17;36H[K[18;17H_ids, _texts, _ = hi_data[18;42H[K[19;17H[34m# <class 'str'> <class 'numpy.ndarray'>[0m[20;17H_texts = torch.from_numpy(_texts)[20;50H[K[21;17Hsequence_lens_dict[_ids] = get_sequence_lens(_texts)[21;69H[K[22;13H    num_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[23;13H[36mprint[0m([36mlen[0m(sequence_lens_dict), [36mlen[0m(num_sentences_lens_dict))[24;13Hend = datetime.datetime.now()[25;19H[31m"end:"[0m, end)[26;9H    [36mprint[0m(end-begin)[27;9H[33mdel[0m data[28;128H3,1[13;5H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H2[13;6H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H3[13;7H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H4[13;8H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H5[13;9H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H6[13;10H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H7[13;11H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H8[13;12H[34h[?25h[?25l begin = datetime.datetime.now()[28;130H9[13;13H[34h[?25h[?25l[28;128H2[12;13H[34h[?25h[?25lp[28;130H10[12;14H[34h[?25h[?25lr[28;131H1[12;15H[34h[?25h[?25l[13;13H[K[14;13Hbegin = datetime.datetime.now()[15;13H[36mprint[0m([31m"begin:"[0m, begin)[15;35H[K[16;13Hsequence_lens_dict = {}[16;37H[K[17;13Hnum_sentences_lens_dict = {}[18;13H[33mfor[0m hi_data [33min[0m dataset:[18;36H[K[19;17H_ids, _texts, _ = hi_data[19;42H[K[20;17H[34m# <class 'str'> <class 'numpy.ndarray'>[0m[21;17H_texts = torch.from_numpy(_texts)[21;50H[K[22;17Hsequence_lens_dict[_ids] = get_sequence_lens(_texts)[22;69H[K[23;13H    num_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[24;13H[36mprint[0m([36mlen[0m(sequence_lens_dict), [36mlen[0m(num_sentences_lens_dict))[25;13Hend = datetime.datetime.now()[26;19H[31m"end:"[0m, end)[27;9H    [36mprint[0m(end-begin)[28;128H3,1 [13;5H[34h[?25h[?25l[8Cbegin = datetime.datetime.now()[14;13H[36mprint[0m([31m"begin:"[0m, begin)[14;35H[K[15;13Hsequence_lens_dict = {}[16;13Hnum_sentences_lens_dict = {}[17;13H[33mfor[0m hi_data [33min[0m dataset:[17;37H[K[18;13H    _ids, _texts, _ = hi_data[19;17H[34m# <class 'str'> <class 'numpy.ndarray'>[0m[20;17H_texts = torch.from_numpy(_texts)[20;50H[K[21;17Hsequence_lens_dict[_ids] = get_sequence_lens(_texts)[22;17Hnum_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[23;13H[36mprint[0m([36mlen[0m(sequence_lens_dict), [36mlen[0m(num_sentences_lens_dict))[23;73H[K[24;13Hend = datetime.datetime.now([24;42H[K[25;13H[36mprint[0m([31m"end:"[0m, end)[25;31H[K[26;19Hend-begin)[26;29H[K[27;9H[33mdel[0m data[27;17H[K[28;128H2,11[12;15H[34h[?25h[?25li[28;131H2[12;16H[34h[?25h[?25ln[28;131H3[12;17H[34h[?25h[?25l[36mprint[0m[28;131H4[12;18H[34h[?25h[?25l([28;126H[K[28;126H132,15[8C43%[12;19H[34h[?25h[?25l)[46m()[0m[28;126H[K[28;126H132,16[8C43%[12;20H[34h[?25h[?25l[31m"[13;5H        begin = datetime.datetime.now()[14;5H        print([0m[1Cbegin:[1C[31m, begin)[15;5H        sequence_lens_dict = {}[16;5H        num_sentences_lens_dict = {}[17;5H        for hi_data in dataset:[18;5H            _ids, _texts, _ = hi_data[19;5H            # <class 'str'> <class 'numpy.ndarray'>[20;5H            _texts = torch.from_numpy(_texts)[21;5H            sequence_lens_dict[_ids] = get_sequence_lens(_texts)[22;5H            num_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[23;5H        print(len(sequence_lens_dict), len(num_sentences_lens_dict))[24;5H        end = datetime.datetime.now()[25;5H        print([0m[1Cend:[1C[31m, end)[26;5H        print(end-begin)[27;5H    del data[0m[12;18H()[28;131H7[12;21H[34h[?25h[?25l[12;20H[K[13;5H        begin = datetime.datetime.now()[14;5H        [36mprint[0m([1C[31mbegin:[0m[1C, begin)[15;5H        sequence_lens_dict = {}[16;5H        num_sentences_lens_dict = {}[17;5H        [33mfor[0m hi_data [33min[0m dataset:[18;5H            _ids, _texts, _ = hi_data[19;5H            [34m# <class 'str'> <class 'numpy.ndarray'>[0m[20;5H            _texts = torch.from_numpy(_texts)[21;5H            sequence_lens_dict[_ids] = get_sequence_lens(_texts)[22;5H            num_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[23;5H        [36mprint[0m([36mlen[0m(sequence_lens_dict), [36mlen[0m(num_sentences_lens_dict))[24;5H        end = datetime.datetime.now()[25;5H        [36mprint[0m([1C[31mend:[0m[1C, end)[26;5H        [36mprint[0m(end-begin)[27;5H    [33mdel[0m data[12;18H[46m()[0m[28;126H[K[28;126H132,16[8C43%[12;20H[34h[?25h[?25l[28;131H5[12;19H[34h[?25h[?25l[31m[46m"[0m[31m)[13;5H        begin = datetime.datetime.now()[14;5H        print([0m[1Cbegin:[1C[31m, begin)[15;5H        sequence_lens_dict = {}[16;5H        num_sentences_lens_dict = {}[17;5H        for hi_data in dataset:[18;5H            _ids, _texts, _ = hi_data[19;5H            # <class 'str'> <class 'numpy.ndarray'>[20;5H            _texts = torch.from_numpy(_texts)[21;5H            sequence_lens_dict[_ids] = get_sequence_lens(_texts)[22;5H            num_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[23;5H        print(len(sequence_lens_dict), len(num_sentences_lens_dict))[24;5H        end = datetime.datetime.now()[25;5H        print([0m[1Cend:[1C[31m, end)[26;5H        print(end-begin)[27;5H    del data[12;19H"[0m[31m[46m)[0m[28;131H6[12;20H[34h[?25h[?25l[31m[46m"[0m)[13;5H        begin = datetime.datetime.now()[14;5H        [36mprint[0m([1C[31mbegin:[0m[1C, begin)[15;5H        sequence_lens_dict = {}[16;5H        num_sentences_lens_dict = {}[17;5H        [33mfor[0m hi_data [33min[0m dataset:[18;5H            _ids, _texts, _ = hi_data[19;5H            [34m# <class 'str'> <class 'numpy.ndarray'>[0m[20;5H            _texts = torch.from_numpy(_texts)[21;5H            sequence_lens_dict[_ids] = get_sequence_lens(_texts)[22;5H            num_sentences_lens_dict[_ids] = get_num_sentences_lens(_texts)[23;5H        [36mprint[0m([36mlen[0m(sequence_lens_dict), [36mlen[0m(num_sentences_lens_dict))[24;5H        end = datetime.datetime.now()[25;5H        [36mprint[0m([1C[31mend:[0m[1C, end)[26;5H        [36mprint[0m(end-begin)[27;5H    [33mdel[0m data[12;20H[31m"[0m[46m)[0m[28;131H7[12;21H[34h[?25h[?25l([2C)[28;131H6[12;20H[34h[?25h[?25l[31m!"[0m)[28;131H7[12;21H[34h[?25h[?25l[31m!"[0m)[28;131H8[12;22H[34h[?25h[?25l[31m!"[0m)[28;131H9[12;23H[34h[?25h[?25l[28;128H3[13;23H[34h[?25h[?25l[28;128H4[14;23H[34h[?25h[?25l[28;128H5[15;23H[34h[?25h[?25l[28;128H6[16;23H[34h[?25h[?25l[28;128H7[17;23H[34h[?25h[?25l[28;128H8[18;23H[34h[?25h[?25l[28;128H9[19;23H[34h[?25h[?25l[28;127H40[20;23H[34h[?25h[?25l[28;128H1[21;23H[34h[?25h[?25l[28;128H2[22;23H[34h[?25h[?25l[23;22H[46m([18C)[0m[28;126H[K[28;126H143,19[8C43%[23;23H[34h[?25h[?25l([18C)[28;128H4[24;23H[34h[?25h[?25l[28;128H5[25;23H[34h[?25h[?25l[28;128H6[26;23H[34h[?25h[?25l[28;130H20[26;24H[34h[?25h[?25l[28;131H1[26;25H[34h[?25h[?25l[28;131H2[26;26H[34h[?25h[?25l[28;131H3[26;27H[34h[?25h[?25l[26;18H[46m([9C)[0m[28;131H4[26;28H[34h[?25h[?25l[28;126H[K[28;126H146,25[8C43%[26;29H[34h[?25h[?25l[27;9H[K[26;18H([9C)[28;128H7,1 [27;5H[34h[?25h[?25l[28;130H2[27;6H[34h[?25h[?25l[28;130H3[27;7H[34h[?25h[?25l[28;130H4[27;8H[34h[?25h[?25l[28;130H5[27;9H[34h[?25h[?25l[28;130H6[27;10H[34h[?25h[?25l[28;130H7[27;11H[34h[?25h[?25l[28;130H8[27;12H[34h[?25h[?25l[28;130H9[27;13H[34h[?25h[?25lp[28;130H10[27;14H[34h[?25h[?25lr[28;131H1[27;15H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33m148 [0m[28;126H[K[28;126H148,1[9C43%[27;5H[34h[?25h[?25l    [33mdel[0m data[28;128H7,11[26;15H[34h[?25h[?25li[28;131H2[26;16H[34h[?25h[?25ln[28;131H3[26;17H[34h[?25h[?25l[36mprint[0m[28;131H4[26;18H[34h[?25h[?25l([28;126H[K[28;126H147,15[8C43%[26;19H[34h[?25h[?25l)[46m()[0m[28;126H[K[28;126H147,16[8C43%[26;20H[34h[?25h[?25l[28;131H5[26;19H[34h[?25h[?25l[31m[46m"[0m[31m)[27;5H    del data[26;19H"[0m[31m[46m)[0m[28;131H6[26;20H[34h[?25h[?25l[31m[46m"[0m)[27;5H    [33mdel[0m data[26;20H[31m"[0m[46m)[0m[28;131H7[26;21H[34h[?25h[?25l([2C)[28;131H6[26;20H[34h[?25h[?25l[31m!"[0m)[28;131H7[26;21H[34h[?25h[?25l[31m!"[0m)[28;131H8[26;22H[34h[?25h[?25l[31m!"[0m)[28;131H9[26;23H[34h[?25h[28;1H[K[26;22H[?25l[28;126H147,18[8C43%[26;22H[34h[?25h[?25l[28;126H[K[28;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l"train_szx.py" 306L, 12722C written
[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ cd hier[K[K[K[Kmodels/
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ vim hierarchical.py.backup 
[?1049h[?1h=[1;28r[34l[34h[?25h[23m[24m[0m[H[J[?25l[28;1H"hierarchical.py.backup" 242L, 11844C[1;1Himport numpy as np
import os
import torch
import torch.nn as nn
from torch.autograd import Variable
from torch import optim
import torch.nn.functional as F
import datetime
from torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence

class WordToSentence(nn.Module):
    """
    The wordacter to word-level module.
    """
    def __init__(self, config):[16;9Hsuper(WordToSentence, self).__init__()[17;9Hself.word_embeddings = nn.Embedding(num_embeddings=config.vocab_size,[18;45Hembedding_dim=config.embedding_size)[19;9Hself.projection_nonlinearity = nn.ReLU[20;9Hself.rnn = nn.GRU[21;9Hself.word_to_sentence = self.rnn(config.embedding_size, config.word_hidden_size, bidirectional=True,[22;33Hbatch_first=True, dropout=config.dropout_rate)[24;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.word_context_size, 1).uniform_(-0.1, 0.1).cuda())  # TODO 改变初始化方式[25;9Hself.word_projection = nn.Linear(config.word_hidden_size * 2, config.word_context_size)[26;9Hself.word_context_size = config.word_context_size[27;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[28;126H1,1[11CTop[1;1H[34h[?25h[?25l[28;126H2[2;1H[34h[?25h[?25l[28;126H3[3;1H[34h[?25h[?25l[28;126H4[4;1H[34h[?25h[?25l[28;126H5[5;1H[34h[?25h[?25l[28;126H6[6;1H[34h[?25h[?25l[28;126H7[7;1H[34h[?25h[?25l[28;126H8[8;1H[34h[?25h[?25l[28;126H9[9;1H[34h[?25h[?25l[28;126H10,0-1[10;1H[34h[?25h[?25l[28;127H1,1  [11;1H[34h[?25h[?25l[28;127H2[12;1H[34h[?25h[?25l[28;127H3[13;1H[34h[?25h[?25l[28;127H4[14;1H[34h[?25h[?25l[28;127H5[15;1H[34h[?25h[?25l[28;127H6[16;1H[34h[?25h[?25l[28;127H7[17;1H[34h[?25h[?25l[28;127H8[18;1H[34h[?25h[?25l[28;127H9[19;1H[34h[?25h[?25l[28;126H20[20;1H[34h[?25h[?25l[28;127H1[21;1H[34h[?25h[?25l[28;127H2[22;1H[34h[?25h[?25l[28;127H3,0-1[23;1H[34h[?25h[?25l[28;127H4,1  [24;1H[34h[?25h[?25l[28;127H5[25;1H[34h[?25h[?25l[28;127H6[26;1H[34h[?25h[?25l[28;127H7[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[28;1H[K[28;126H28,1[11C0%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.softmax = nn.Softmax()[28;126H[K[28;126H29,1[11C0%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hif os.path.exists(config.embedding_path) and config.is_training and config.is_pretrain:[28;126H[K[28;126H30,1[11C1%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13Hprint("pretrain...")[28;126H[K[28;126H31,1[11C1%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(np.load(config.embedding_path)))[28;126H[K[28;126H32,1[11C2%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H33,0-1[9C2%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef get_optimizer(self, lr, lr2, weight_decay):[28;126H[K[28;126H34,1[11C3%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[28;126H[K[28;126H35,1[11C3%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H36,0-1[9C4%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef _sort_word_tensor(self, padded_tensor, sequence_lens):[28;126H[K[28;126H37,1[11C4%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsequence_lens, order = sequence_lens.sort(0, descending=True)[28;126H[K[28;126H38,1[11C5%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# print(type(sequence_lens), type(order))[28;126H[K[28;126H39,1[11C5%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTensor' >[28;126H[K[28;126H40,1[11C6%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = padded_tensor[order][28;126H[K[28;126H41,1[11C6%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn padded_tensor, sequence_lens, order[28;126H[K[28;126H42,1[11C6%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H43,0-1[9C7%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef _unsort_word_tensor(self, output, order):[28;126H[K[28;126H44,1[11C7%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H45,1[11C8%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H46,0-1[9C8%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param output: <class 'torch.autograd.variable.Variable'>[28;126H[K[28;126H47,1[11C9%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param order:  Tensor[28;126H[K[28;126H48,1[11C9%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:return: Variable[28;126H[K[28;126H49,1[10C10%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H50,1[10C10%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[28;126H[K[28;126H51,1[10C11%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Horder = list(order)[28;126H[K[28;126H52,1[10C11%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hfor i, _ in enumerate(output):[28;126H[K[28;126H53,1[10C12%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13Hpadded_tensor[i, :] = (output[order.index(i)])[28;126H[K[28;126H54,1[10C12%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn padded_tensor[28;126H[K[28;126H55,1[10C13%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H56,0-1[8C13%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H57,0-1[8C13%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H58,0-1[8C14%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef forward(self, x, word_hidden_stat, sequence_lens):[28;126H[K[28;126H59,1[10C14%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H60,1[10C15%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;19H[[28;126H[K[28;126H61,1[10C15%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param x: batch_size * num_sentences, sequence_length][28;126H[K[28;126H62,1[10C16%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param sequence_lens: Tensor of sequences lengths of each batch element[28;126H[K[28;126H63,1[10C16%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:return:  [batch_size * num_sentences, word_hidden_size * 2][28;126H[K[28;126H64,1[10C17%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H65,1[10C17%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x, sequence_lens)[28;126H[K[28;126H66,1[10C18%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_embed = self.word_embeddings(word_sorted)[28;126H[K[28;126H67,1[10C18%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpacked = pack_padded_sequence(word_embed, list(sequence_lens), batch_first=True)[28;126H[K[28;126H68,1[10C19%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[28;126H[K[28;126H69,1[10C19%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, _ = pad_packed_sequence(output, batch_first=True)[28;126H[K[28;126H70,1[10C20%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = self._unsort_word_tensor(output, order)[28;126H[K[28;126H71,1[10C20%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# size: [batch_Size*num_sentences, sequence_length, word_hidden_size*2_],  e.g.: 2 3 4[28;126H[K[28;126H72,1[10C20%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd1 = output.size()[0][28;126H[K[28;126H73,1[10C21%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd2 = output.size()[1][28;126H[K[28;126H74,1[10C21%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd3 = output.size()[2][28;126H[K[28;126H75,1[10C22%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hprojection = self.word_projection(output)[28;126H[K[28;126H76,1[10C22%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hprojection = self.bn(projection)[28;126H[K[28;126H77,1[10C23%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hprojection = self.word_proj_nonlinearity(projection).view(-1, self.word_context_size)  # [2x3, 5][28;126H[K[28;126H78,1[10C23%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = torch.mm(projection, self.word_context)  # [2x3, 1][28;126H[K[28;126H79,1[10C24%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = self.softmax(attention.view(d1, d2))  # [2, 3][28;126H[K[28;126H80,1[10C24%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = attention.view(1, d1 * d2).expand(d3, d1 * d2).resize(d1 * d3, d2)[28;126H[K[28;126H81,1[10C25%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = output.permute(2, 0, 1).resize(d1 * d3, d2)  # [4,2,3][28;126H[K[28;126H82,1[10C25%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsentence_tensor = (output * attention).sum(1).resize(d3, d1).transpose(0, 1)[28;126H[K[28;126H83,1[10C26%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn sentence_tensor[28;126H[K[28;126H84,1[10C26%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H85,0-1[8C26%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# sentence_tensor = Variable(torch.zeros((output.size(0), output.size(2))).cuda())[28;126H[K[28;126H86,1[10C27%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# size: [batch_Size*num_sentences, sequence_length, word_hidden_size*2_][28;126H[K[28;126H87,1[10C27%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# for word_ind in range(output.size(0)):[28;126H[K[28;126H88,1[10C28%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     projection = self.word_projection(output[word_ind])[28;126H[K[28;126H89,1[10C28%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     projection = self.bn(projection)[28;126H[K[28;126H90,1[10C29%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     projection = self.word_proj_nonlinearity(projection)[28;126H[K[28;126H91,1[10C29%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     # size: [sequence_length, word_context_size][28;126H[K[28;126H92,1[10C30%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     attention = torch.mm(projection, self.word_context)  # [sequence_length, 1][28;126H[K[28;126H93,1[10C30%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     attention = self.softmax(attention.transpose(0,1))  # TODO[28;126H[K[28;126H94,1[10C31%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     sentence_tensor[word_ind, :] = output[word_ind].transpose(1, 0).mv(attention.view(-1))[28;126H[K[28;126H95,1[10C31%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# return sentence_tensor[28;126H[K[28;126H96,1[10C32%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H97,0-1[8C32%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H98,0-1[8C33%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1Hclass SentenceToDocment(nn.Module):[28;126H[K[28;126H99,1[10C33%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H"""[28;126H[K[28;126H100,1[9C33%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5HThe word-to-sentence module.[28;126H[K[28;126H101,1[9C34%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H"""[28;126H[K[28;126H102,1[9C34%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H103,0-1[7C35%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef __init__(self, config):[28;126H[K[28;126H104,1[9C35%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsuper(SentenceToDocment, self).__init__()[28;126H[K[28;126H105,1[9C36%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.projection_nonlinearity = nn.ReLU[28;126H[K[28;126H106,1[9C36%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.rnn = nn.GRU[28;126H[K[28;126H107,1[9C37%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_to_document = self.rnn(config.word_hidden_size*2, config.sentence_hidden_size,[28;126H[K[28;126H108,1[9C37%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;36Hbidirectional=True, dropout=config.dropout_rate, batch_first=True)[28;126H[K[28;126H109,1[9C38%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_context = nn.Parameter(torch.FloatTensor(config.sentence_context_size, 1).uniform_(-0.1, 0.1).cuda())[28;126H[K[28;126H110,1[9C38%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_projection = nn.Linear(config.sentence_hidden_size * 2, config.sentence_context_size)[28;126H[K[28;126H111,1[9C39%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_context_size = config.sentence_context_size[28;126H[K[28;126H112,1[9C39%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.bn = nn.BatchNorm1d(num_features=config.num_sentences)[28;126H[K[28;126H113,1[9C40%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_proj_nonlinearity = self.projection_nonlinearity()[28;126H[K[28;126H114,1[9C40%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.softmax = nn.Softmax()[28;126H[K[28;126H115,1[9C40%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H116,0-1[7C41%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef _sort_sentence_tensor(self, padded_tensor, num_sentences_lens):[28;126H[K[28;126H117,1[9C41%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hnum_sentences_lens, order = num_sentences_lens.sort(0, descending=True)[28;126H[K[28;126H118,1[9C42%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = padded_tensor[order][28;126H[K[28;126H119,1[9C42%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn padded_tensor, num_sentences_lens, order[28;126H[K[28;126H120,1[9C43%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H121,0-1[7C43%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef _unsort_sentence_tensor(self, output, order):[28;126H[K[28;126H122,1[9C44%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H123,1[9C44%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H124,0-1[7C45%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param output: <class 'torch.autograd.variable.Variable'>[28;126H[K[28;126H125,1[9C45%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param order:  Tensor[28;126H[K[28;126H126,1[9C46%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:return: Tensor[28;126H[K[28;126H127,1[9C46%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H128,1[9C46%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[28;126H[K[28;126H129,1[9C47%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Horder = list(order)[28;126H[K[28;126H130,1[9C47%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hfor i, _ in enumerate(output):[28;126H[K[28;126H131,1[9C48%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13Hpadded_tensor[i, :] = (output[order.index(i)])[28;126H[K[28;126H132,1[9C48%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn padded_tensor[28;126H[K[28;126H133,1[9C49%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H134,0-1[7C49%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef forward(self, x, sent_hidden_stat,  num_sentences_lens):[28;126H[K[28;126H135,1[9C50%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H136,1[9C50%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H137,0-1[7C51%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param x: [batch_size, num_sentences, word_hidden_size * 2], Variable[28;126H[K[28;126H138,1[9C51%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param num_sentences_lens: Tensor[28;126H[K[28;126H139,1[9C52%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:return: [batch_size, sentence_hidden_size*2][28;126H[K[28;126H140,1[9C52%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H141,1[9C53%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsentence_sorted, num_sentences_lens, order = self._sort_sentence_tensor(x, num_sentences_lens)[28;126H[K[28;126H142,1[9C53%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpacked = pack_padded_sequence(sentence_sorted, list(num_sentences_lens), batch_first=True)[28;126H[K[28;126H143,1[9C53%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, (hidden, cell) = self.sentence_to_document(packed, sent_hidden_stat)[28;126H[K[28;126H144,1[9C54%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, _ = pad_packed_sequence(output, batch_first=True)[28;126H[K[28;126H145,1[9C54%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = self._unsort_sentence_tensor(output, order)  # Variable[28;126H[K[28;126H146,1[9C55%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd1 = output.size()[0][28;126H[K[28;126H147,1[9C55%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd2 = output.size()[1][28;126H[K[28;126H148,1[9C56%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd3 = output.size()[2][28;126H[K[28;126H149,1[9C56%[27;1H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;9Hprojection = self.sentence_proj_nonlinearity(self.bn(self.sentence_projection(output))).view(-1, self.sentence_context_size)  # [2*3, 55[27;1H][28;126H[K[28;126H150,1[9C57%[26;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = torch.mm(projection, self.sentence_context)  # [2x3, 1][28;126H[K[28;126H151,1[9C57%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = self.softmax(attention.view(d1, d2))  # [2, 3][28;126H[K[28;126H152,1[9C58%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = attention.view(1, d1 * d2).expand(d3, d1 * d2).resize(d1 * d3, d2)[28;126H[K[28;126H153,1[9C58%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = output.permute(2, 0, 1).resize(d1 * d3, d2)  # [4,2,3][28;126H[K[28;126H154,1[9C59%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hdocument_tensor = (output * attention).sum(1).resize(d3, d1).transpose(0, 1)[28;126H[K[28;126H155,1[9C59%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn document_tensor[28;126H[K[28;126H156,1[9C60%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H157,0-1[7C60%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# for sentence_ind in range(output.size(0)):[28;126H[K[28;126H158,1[9C61%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     projection = self.sentence_projection(output[sentence_ind])[28;126H[K[28;126H159,1[9C61%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     projection = self.bn(projection)[28;126H[K[28;126H160,1[9C62%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     projection = self.sentence_proj_nonlinearity(projection)[28;126H[K[28;126H161,1[9C62%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     attention = torch.mm(projection, self.sentence_context)[28;126H[K[28;126H162,1[9C62%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     attention = self.softmax(attention.transpose(1, 0))[28;126H[K[28;126H163,1[9C63%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     document_tensor[sentence_ind, :] = output[sentence_ind].transpose(1, 0).mv(attention.view(-1))[28;126H[K[28;126H164,1[9C63%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# return document_tensor[28;126H[K[28;126H165,1[9C64%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H166,0-1[7C64%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef get_optimizer(self, lr, lr2, weight_decay):[28;126H[K[28;126H167,1[9C65%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[28;126H[K[28;126H168,1[9C65%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H169,0-1[7C66%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H170,0-1[7C66%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1Hclass HAN(nn.Module):[28;126H[K[28;126H171,1[9C67%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H172,0-1[7C67%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef __init__(self, config):[28;126H[K[28;126H173,1[9C68%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsuper(HAN, self).__init__()[28;126H[K[28;126H174,1[9C68%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.num_class = config.num_class[28;126H[K[28;126H175,1[9C68%[27;1H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;2H#[7Cself.dropout = nn.Dropout(p=config.dropout_rate)[27;9Hself.word_to_sentence = WordToSentence(config)[28;126H[K[28;126H176,1[9C69%[26;1H[34h[?25h[?25l[28;128H7[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_to_document = SentenceToDocment(config)[28;126H[K[28;126H178,1[9C70%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.config = config[28;126H[K[28;126H179,1[9C70%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.is_training = True[28;126H[K[28;126H180,1[9C71%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# set up the intermediate output step, if required[28;126H[K[28;126H181,1[9C71%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#self.intermediate = False[28;126H[K[28;126H182,1[9C72%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#self.intermediate_output_nonlinearity = nn.ELU[28;126H[K[28;126H183,1[9C72%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#if self.intermediate:[28;126H[K[28;126H184,1[9C73%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H# self.intermediate_output = nn.Linear(config.sentence_hidden_size * 2, config.sentence_hidden_size * 2)[28;126H[K[28;126H185,1[9C73%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;14H#self.intermediate_nonlinearity = self.intermediate_output_nonlinearity()[28;126H[K[28;126H186,1[9C73%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H187,0-1[7C74%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# final transformation to class weightings[28;126H[K[28;126H188,1[9C74%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.fc = nn.Linear(config.sentence_hidden_size * 2, self.num_class)[28;126H[K[28;126H189,1[9C75%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H190,0-1[7C75%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef forward(self, x, sequence_lens, num_sentences_lens):[28;126H[K[28;126H191,1[9C76%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#[28;126H[K[28;126H192,1[9C76%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H193,1[9C77%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H194,0-1[7C77%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:param x: [batch_size, num_sentences, sequence_length], torch.Tensor[28;126H[K[28;126H195,1[9C78%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H:return:[28;126H[K[28;126H196,1[9C78%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H'''[28;126H[K[28;126H197,1[9C79%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hbegin = datetime.datetime.now()[28;126H[K[28;126H198,1[9C79%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hbatch_size = x.size()[0][28;126H[K[28;126H199,1[9C80%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hnum_sentences = x.size()[1][28;126H[K[28;126H200,1[9C80%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# print(x.size())[28;126H[K[28;126H201,1[9C80%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsequence_length = x.size()[2][28;126H[K[28;126H202,1[9C81%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batch_size)[28;126H[K[28;126H203,1[9C81%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hx = x.view(-1, sequence_length)  # [batch_size * num_sentences, sequence_length][28;126H[K[28;126H204,1[9C82%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  # [batch_size * num_sentences, word_hidden_size*2][28;126H[K[28;126H205,1[9C82%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hx = x.resize(batch_size, num_sentences, self.config.word_hidden_size*2)  # [batch_size , num_sentences, word_hidden_size*2][28;126H[K[28;126H206,1[9C83%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  # [batch_size, sentence_hidden_size*2][28;126H[K[28;126H207,1[9C83%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# dropout or not[28;126H[K[28;126H208,1[9C84%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H#[8Cself.document_tensor = self.dropout(self.document_tensor)[28;126H[K[28;126H209,1[9C84%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#[28;126H[K[28;126H210,1[9C85%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#if self.intermediate:[28;126H[K[28;126H211,1[9C85%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#    self.document_tensor = self.intermediate_output(self.document_tensor)[28;126H[K[28;126H212,1[9C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#    self.document_tensor = self.intermediate_nonlinearity(self.document_tensor)[28;126H[K[28;126H213,1[9C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H214,0-1[7C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtputs = self.fc(self.document_tensor)[28;126H[K[28;126H215,1[9C87%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hend = datetime.datetime.now()[28;126H[K[28;126H216,1[9C87%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hprint('In model:', begin, end, end-begin)[28;126H[K[28;126H217,1[9C88%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn outputs[28;126H[K[28;126H218,1[9C88%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H219,0-1[7C89%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef init_rnn_hidden(self, batch_size):[28;126H[K[28;126H220,1[9C89%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_hidden_stat = Variable(torch.zeros(2, batch_size*self.config.num_sentences, self.config.word_hidden_size))[28;126H[K[28;126H221,1[9C90%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsent_hidden_stat = Variable(torch.zeros(2, batch_size, self.config.sentence_hidden_size))[28;126H[K[28;126H222,1[9C90%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn word_hidden_stat.cuda(), sent_hidden_stat.cuda()[28;126H[K[28;126H223,1[9C91%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H224,0-1[7C91%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H# TODO[28;126H[K[28;126H225,1[9C92%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5Hdef get_optimizer(self, lr, lr2, weight_decay):[28;126H[K[28;126H226,1[9C92%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# for name, v in self.named_parameters():[28;126H[K[28;126H227,1[9C93%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#     print(name, v)[28;126H[K[28;126H228,1[9C93%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# a = input("21321321312")[28;126H[K[28;126H229,1[9C93%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# return torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[28;126H[K[28;126H230,1[9C94%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H231,0-1[7C94%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hreturn torch.optim.Adam([[28;126H[K[28;126H232,1[9C95%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{'params': self.word_to_sentence.word_to_sentence.parameters()},[28;126H[K[28;126H233,1[9C95%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{'params': self.word_to_sentence.word_context},[28;126H[K[28;126H234,1[9C96%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{'params': self.word_to_sentence.word_projection.parameters()},[28;126H[K[28;126H235,1[9C96%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{'params': self.word_to_sentence.bn.parameters()},[28;126H[K[28;126H236,1[9C97%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{'params': self.word_to_sentence.word_embeddings.parameters(), 'lr': lr2},[28;126H[K[28;126H237,1[9C97%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{'params': self.sentence_to_document.parameters()},[28;126H[K[28;126H238,1[9C98%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{'params': self.fc.parameters()}[28;126H[K[28;126H239,1[9C98%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#    {'params': self.intermediate_output.parameters()}[28;126H[K[28;126H240,1[9C99%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H], lr=lr, weight_decay=weight_decay)[28;126H[K[28;126H241,1[9C99%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H242,0-1[7CBot[27;1H[34h[?25h[?25l[28;128H1,1  [26;1H[34h[?25h[?25l[28;128H0[25;1H[34h[?25h[?25l[28;127H39[24;1H[34h[?25h[?25l[28;128H8[23;1H[34h[?25h[?25l[28;128H7[22;1H[34h[?25h[?25l[28;128H6[21;1H[34h[?25h[?25l[28;128H5[20;1H[34h[?25h[?25l[28;128H4[19;1H[34h[?25h[?25l[28;128H3[18;1H[34h[?25h[?25l[28;128H2[17;1H[34h[?25h[?25l[28;128H1,0-1[16;1H[34h[?25h[?25l[28;128H0,1  [15;1H[34h[?25h[?25l[28;127H29[14;1H[34h[?25h[?25l[28;128H8[13;1H[34h[?25h[?25l[28;128H7[12;1H[34h[?25h[?25l[28;128H6[11;1H[34h[?25h[?25l[28;128H5[10;1H[34h[?25h[?25l[28;128H4,0-1[9;1H[34h[?25h[?25l[28;128H3,1  [8;1H[34h[?25h[?25l[28;128H2[7;1H[34h[?25h[?25l[28;128H1[6;1H[34h[?25h[?25l[28;128H0[5;1H[34h[?25h[?25l[28;127H19,0-1[4;1H[34h[?25h[?25l[28;128H8,1  [3;1H[34h[?25h[?25l[28;128H7[2;1H[34h[?25h[?25l[28;128H6[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Houtputs = self.fc(self.document_tensor)[28;126H[K[28;126H215,1[9C99%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H214,0-1[7C99%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#    self.document_tensor = self.intermediate_nonlinearity(self.document_tensor)[28;126H[K[28;126H213,1[9C98%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#    self.document_tensor = self.intermediate_output(self.document_tensor)[28;126H[K[28;126H212,1[9C98%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#if self.intermediate:[28;126H[K[28;126H211,1[9C97%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#[28;126H[K[28;126H210,1[9C97%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H#[8Cself.document_tensor = self.dropout(self.document_tensor)[28;126H[K[28;126H209,1[9C96%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H# dropout or not[28;126H[K[28;126H208,1[9C96%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hself.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  # [batch_size, sentence_hidden_size*2][28;126H[K[28;126H207,1[9C95%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hx = x.resize(batch_size, num_sentences, self.config.word_hidden_size*2)  # [batch_size , num_sentences, word_hidden_size*2][28;126H[K[28;126H206,1[9C95%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  # [batch_size * num_sentences, word_hidden_size*2][28;126H[K[28;126H205,1[9C94%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hx = x.view(-1, sequence_length)  # [batch_size * num_sentences, sequence_length][28;126H[K[28;126H204,1[9C94%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batch_size)[28;126H[K[28;126H203,1[9C93%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hsequence_length = x.size()[2][28;126H[K[28;126H202,1[9C93%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H# print(x.size())[28;126H[K[28;126H201,1[9C93%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hnum_sentences = x.size()[1][28;126H[K[28;126H200,1[9C92%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hbatch_size = x.size()[0][28;126H[K[28;126H199,1[9C92%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hbegin = datetime.datetime.now()[28;126H[K[28;126H198,1[9C91%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H'''[28;126H[K[28;126H197,1[9C91%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H:return:[28;126H[K[28;126H196,1[9C90%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H:param x: [batch_size, num_sentences, sequence_length], torch.Tensor[28;126H[K[28;126H195,1[9C90%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H194,0-1[7C89%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H'''[28;126H[K[28;126H193,1[9C89%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#[28;126H[K[28;126H192,1[9C88%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;5Hdef forward(self, x, sequence_lens, num_sentences_lens):[28;126H[K[28;126H191,1[9C88%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H190,0-1[7C87%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hself.fc = nn.Linear(config.sentence_hidden_size * 2, self.num_class)[28;126H[K[28;126H189,1[9C87%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H# final transformation to class weightings[28;126H[K[28;126H188,1[9C86%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H187,0-1[7C86%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;14H#self.intermediate_nonlinearity = self.intermediate_output_nonlinearity()[28;126H[K[28;126H186,1[9C86%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;13H# self.intermediate_output = nn.Linear(config.sentence_hidden_size * 2, config.sentence_hidden_size * 2)[28;126H[K[28;126H185,1[9C85%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#if self.intermediate:[28;126H[K[28;126H184,1[9C85%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#self.intermediate_output_nonlinearity = nn.ELU[28;126H[K[28;126H183,1[9C84%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H#self.intermediate = False[28;126H[K[28;126H182,1[9C84%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H# set up the intermediate output step, if required[28;126H[K[28;126H181,1[9C83%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hself.is_training = True[28;126H[K[28;126H180,1[9C83%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hself.config = config[28;126H[K[28;126H179,1[9C82%[1;1H[34h[?25h[?25l[28;127H80[2;1H[34h[?25h[?25l[28;128H1[3;1H[34h[?25h[?25l[28;128H2[4;1H[34h[?25h[?25l[28;128H3[5;1H[34h[?25h[?25l[28;128H4[6;1H[34h[?25h[?25l[28;128H5[7;1H[34h[?25h[?25l[28;128H6[8;1H[34h[?25h[?25l[28;128H7,0-1[9;1H[34h[?25h[?25l[28;128H8,1  [10;1H[34h[?25h[?25l[28;128H9[11;1H[34h[?25h[?25l[28;127H90,0-1[12;1H[34h[?25h[?25l[28;128H1,1  [13;1H[34h[?25h[?25l[28;128H2[14;1H[34h[?25h[?25l[28;128H3[15;1H[34h[?25h[?25l[28;128H4,0-1[16;1H[34h[?25h[?25l[28;128H5,1  [17;1H[34h[?25h[?25l[28;128H6[18;1H[34h[?25h[?25l[28;128H7[19;1H[34h[?25h[?25l[28;128H8[20;1H[34h[?25h[?25l[28;128H9[21;1H[34h[?25h[?25l[28;126H200[22;1H[34h[?25h[?25l[28;128H1[23;1H[34h[?25h[?25l[28;128H2[24;1H[34h[?25h[?25l[28;128H3[25;1H[34h[?25h[?25l[28;128H4[26;1H[34h[?25h[?25l[28;128H5[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hx = x.resize(batch_size, num_sentences, self.config.word_hidden_size*2)  # [batch_size , num_sentences, word_hidden_size*2][28;126H[K[28;126H206,1[9C83%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  # [batch_size, sentence_hidden_size*2][28;126H[K[28;126H207,1[9C83%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H# dropout or not[28;126H[K[28;126H208,1[9C84%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H#[8Cself.document_tensor = self.dropout(self.document_tensor)[28;126H[K[28;126H209,1[9C84%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#[28;126H[K[28;126H210,1[9C85%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#if self.intermediate:[28;126H[K[28;126H211,1[9C85%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#    self.document_tensor = self.intermediate_output(self.document_tensor)[28;126H[K[28;126H212,1[9C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H#    self.document_tensor = self.intermediate_nonlinearity(self.document_tensor)[28;126H[K[28;126H213,1[9C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H214,0-1[7C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtputs = self.fc(self.document_tensor)[28;126H[K[28;126H215,1[9C87%[27;1H[34h[?25h[?25l[28;128H4,0-1[26;1H[34h[?25h[?25l[28;128H3,1  [25;1H[34h[?25h[?25l[28;128H2[24;1H[34h[?25h[?25l[28;128H1[23;1H[34h[?25h[?25l[28;128H0[22;1H[34h[?25h[?25l[28;127H09[21;1H[34h[?25h[?25l[28;128H8[20;1H[34h[?25h[?25l[28;128H7[19;1H[34h[?25h[?25l[28;128H6[18;1H[34h[?25h[?25l[28;128H5[17;1H[34h[?25h[?25l[28;128H4[16;1H[34h[?25h[?25l[28;128H3[15;1H[34h[?25h[?25l[28;128H2[14;1H[34h[?25h[?25l[28;128H1[13;1H[34h[?25h[?25l[28;128H0[12;1H[34h[?25h[?25l[28;126H199[11;1H[34h[?25h[?25l[28;128H8[10;1H[34h[?25h[?25l[28;128H7[9;1H[34h[?25h[?25l[28;128H6[8;1H[34h[?25h[?25l[28;128H5[7;1H[34h[?25h[?25l[28;128H4,0-1[6;1H[34h[?25h[?25l[28;128H3,1  [5;1H[34h[?25h[?25l[28;128H2[4;1H[34h[?25h[?25l[28;128H1[3;1H[34h[?25h[?25l[28;128H0,0-1[2;1H[34h[?25h[?25l[28;127H89,1  [1;1H[34h[?25h[?25l[28;127H90,0-1[2;1H[34h[?25h[?25l[28;128H1,1  [3;1H[34h[?25h[?25l[28;128H2[4;1H[34h[?25h[?25l[28;126H[K[28;1H:[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l[28;1H[K[28;1H[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ ls
CNNInception.py    fasttext.py      hierarchical.py.backup    modelwithelement.py  rcnnwithdoc2vec.py  textrcnn.py
cnnwithdoc2vec.py  hierarchical.py  lightattentiveconvnet.py  [0m[01;34m__pycache__[0m          textcnn.py
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ mv hierarchical.py hierarchical.py.1
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ ls
CNNInception.py    fasttext.py        hierarchical.py.backup    modelwithelement.py  rcnnwithdoc2vec.py  textrcnn.py
cnnwithdoc2vec.py  hierarchical.py.1  lightattentiveconvnet.py  [0m[01;34m__pycache__[0m          textcnn.py
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ mv hierarchical.py.backup hierarchical.py.[K
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ la
CNNInception.py    fasttext.py      hierarchical.py.1         modelwithelement.py  rcnnwithdoc2vec.py  textrcnn.py
cnnwithdoc2vec.py  hierarchical.py  lightattentiveconvnet.py  [0m[01;34m__pycache__[0m          textcnn.py
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ mv hierarchical.py.1 hierarchical.py.backuo[Kp
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ s[Kcd..[K[K ..[K[K[K[K[Kvim hierarchical.py
[?1049h[?1h=[1;28r[34l[34h[?25h[23m[24m[0m[H[J[?25l[28;1H"hierarchical.py" 242L, 11844C[1;1H[35mimport[0m numpy [33mas[0m np
[35mimport[0m os
[35mimport[0m torch
[35mimport[0m torch.nn [33mas[0m nn
[35mfrom[0m torch.autograd [35mimport[0m Variable
[35mfrom[0m torch [35mimport[0m optim
[35mimport[0m torch.nn.functional [33mas[0m F
[35mimport[0m datetime
[35mfrom[0m torch.nn.utils.rnn [35mimport[0m pack_padded_sequence, pad_packed_sequence

[33mclass[0m [36mWordToSentence[0m(nn.Module):
    [31m"""
    The wordacter to word-level module.
    """[0m
    [33mdef[0m [36m__init__[0m(self, config):[16;9H[36msuper[0m(WordToSentence, self).__init__()[17;9Hself.word_embeddings = nn.Embedding(num_embeddings=config.vocab_size,[18;45Hembedding_dim=config.embedding_size)[19;9Hself.projection_nonlinearity = nn.ReLU[20;9Hself.rnn = nn.GRU[21;9Hself.word_to_sentence = self.rnn(config.embedding_size, config.word_hidden_size, bidirectional=[36mTrue[0m,[22;33Hbatch_first=[36mTrue[0m, dropout=config.dropout_rate)[24;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.word_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())  [34m# [0m[30m[43mTODO[0m[34m 改变初始化方式[0m[25;9Hself.word_projection = nn.Linear(config.word_hidden_size * [31m2[0m, config.word_context_size)[26;9Hself.word_context_size = config.word_context_size[27;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[28;126H1,1[11CTop[1;1H[34h[?25h[?25l[28;126H2[2;1H[34h[?25h[?25l[28;126H3[3;1H[34h[?25h[?25l[28;126H4[4;1H[34h[?25h[?25l[28;126H5[5;1H[34h[?25h[?25l[28;126H6[6;1H[34h[?25h[?25l[28;126H7[7;1H[34h[?25h[?25l[28;126H8[8;1H[34h[?25h[?25l[28;126H9[9;1H[34h[?25h[?25l[28;126H10,0-1[10;1H[34h[?25h[?25l[28;127H1,1  [11;1H[34h[?25h[?25l[28;127H2[12;1H[34h[?25h[?25l[28;127H3[13;1H[34h[?25h[?25l[28;127H4[14;1H[34h[?25h[?25l[28;127H5[15;1H[34h[?25h[?25l[28;127H6[16;1H[34h[?25h[?25l[28;127H7[17;1H[34h[?25h[?25l[28;127H8[18;1H[34h[?25h[?25l[28;127H9[19;1H[34h[?25h[?25l[28;126H20[20;1H[34h[?25h[?25l[28;127H1[21;1H[34h[?25h[?25l[28;127H2[22;1H[34h[?25h[?25l[28;127H3,0-1[23;1H[34h[?25h[?25l[28;127H4,1  [24;1H[34h[?25h[?25l[28;127H5[25;1H[34h[?25h[?25l[28;127H6[26;1H[34h[?25h[?25l[28;127H7[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[28;1H[K[28;126H28,1[11C0%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.softmax = nn.Softmax()[28;126H[K[28;126H29,1[11C0%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mif[0m os.path.exists(config.embedding_path) [33mand[0m config.is_training [33mand[0m config.is_pretrain:[28;126H[K[28;126H30,1[11C1%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H[36mprint[0m([31m"pretrain..."[0m)[28;126H[K[28;126H31,1[11C1%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(np.load(config.embedding_path)))[28;126H[K[28;126H32,1[11C2%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H33,0-1[9C2%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[28;126H[K[28;126H34,1[11C3%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[28;126H[K[28;126H35,1[11C3%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H36,0-1[9C4%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[28;126H[K[28;126H37,1[11C4%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[28;126H[K[28;126H38,1[11C5%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# print(type(sequence_lens), type(order))[0m[28;126H[K[28;126H39,1[11C5%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTensor' >[0m[28;126H[K[28;126H40,1[11C6%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = padded_tensor[order][28;126H[K[28;126H41,1[11C6%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m padded_tensor, sequence_lens, order[28;126H[K[28;126H42,1[11C6%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H43,0-1[9C7%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36m_unsort_word_tensor[0m(self, output, order):[28;126H[K[28;126H44,1[11C7%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[31m'''[0m[28;126H[K[28;126H45,1[11C8%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H46,0-1[9C8%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[28;126H[K[28;126H47,1[11C9%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param order:  Tensor[0m[28;126H[K[28;126H48,1[11C9%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :return: Variable[0m[28;126H[K[28;126H49,1[10C10%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        '''[0m[28;126H[K[28;126H50,1[10C10%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[28;126H[K[28;126H51,1[10C11%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Horder = [36mlist[0m(order)[28;126H[K[28;126H52,1[10C11%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[28;126H[K[28;126H53,1[10C12%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13Hpadded_tensor[i, :] = (output[order.index(i)])[28;126H[K[28;126H54,1[10C12%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m padded_tensor[28;126H[K[28;126H55,1[10C13%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H56,0-1[8C13%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H57,0-1[8C13%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H58,0-1[8C14%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[28;126H[K[28;126H59,1[10C14%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[31m'''[0m[28;126H[K[28;126H60,1[10C15%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m                  [[0m[28;126H[K[28;126H61,1[10C15%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param x: batch_size * num_sentences, sequence_length][0m[28;126H[K[28;126H62,1[10C16%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param sequence_lens: Tensor of sequences lengths of each batch element[0m[28;126H[K[28;126H63,1[10C16%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :return:  [batch_size * num_sentences, word_hidden_size * 2][0m[28;126H[K[28;126H64,1[10C17%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        '''[0m[28;126H[K[28;126H65,1[10C17%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x, sequence_lens)[28;126H[K[28;126H66,1[10C18%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_embed = self.word_embeddings(word_sorted)[28;126H[K[28;126H67,1[10C18%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens), batch_first=[36mTrue[0m)[28;126H[K[28;126H68,1[10C19%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[28;126H[K[28;126H69,1[10C19%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[28;126H[K[28;126H70,1[10C20%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = self._unsort_word_tensor(output, order)[28;126H[K[28;126H71,1[10C20%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidden_size*2_],  e.g.: 2 3 4[0m[28;126H[K[28;126H72,1[10C20%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd1 = output.size()[[31m0[0m][28;126H[K[28;126H73,1[10C21%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd2 = output.size()[[31m1[0m][28;126H[K[28;126H74,1[10C21%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd3 = output.size()[[31m2[0m][28;126H[K[28;126H75,1[10C22%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hprojection = self.word_projection(output)[28;126H[K[28;126H76,1[10C22%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hprojection = self.bn(projection)[28;126H[K[28;126H77,1[10C23%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hprojection = self.word_proj_nonlinearity(projection).view(-[31m1[0m, self.word_context_size)  [34m# [2x3, 5][0m[28;126H[K[28;126H78,1[10C23%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = torch.mm(projection, self.word_context)  [34m# [2x3, 1][0m[28;126H[K[28;126H79,1[10C24%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[28;126H[K[28;126H80,1[10C24%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).resize(d1 * d3, d2)[28;126H[K[28;126H81,1[10C25%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,3][0m[28;126H[K[28;126H82,1[10C25%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsentence_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).transpose([31m0[0m, [31m1[0m)[28;126H[K[28;126H83,1[10C26%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m sentence_tensor[28;126H[K[28;126H84,1[10C26%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H85,0-1[8C26%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# sentence_tensor = Variable(torch.zeros((output.size(0), output.size(2))).cuda())[0m[28;126H[K[28;126H86,1[10C27%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidden_size*2_][0m[28;126H[K[28;126H87,1[10C27%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# for word_ind in range(output.size(0)):[0m[28;126H[K[28;126H88,1[10C28%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     projection = self.word_projection(output[word_ind])[0m[28;126H[K[28;126H89,1[10C28%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     projection = self.bn(projection)[0m[28;126H[K[28;126H90,1[10C29%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     projection = self.word_proj_nonlinearity(projection)[0m[28;126H[K[28;126H91,1[10C29%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     # size: [sequence_length, word_context_size][0m[28;126H[K[28;126H92,1[10C30%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     attention = torch.mm(projection, self.word_context)  # [sequence_length, 1][0m[28;126H[K[28;126H93,1[10C30%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     attention = self.softmax(attention.transpose(0,1))  # [0m[30m[43mTODO[0m[28;126H[K[28;126H94,1[10C31%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     sentence_tensor[word_ind, :] = output[word_ind].transpose(1, 0).mv(attention.view(-1))[0m[28;126H[K[28;126H95,1[10C31%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# return sentence_tensor[0m[28;126H[K[28;126H96,1[10C32%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H97,0-1[8C32%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H98,0-1[8C33%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33mclass[0m [36mSentenceToDocment[0m(nn.Module):[28;126H[K[28;126H99,1[10C33%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[31m"""[0m[28;126H[K[28;126H100,1[9C33%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m    The word-to-sentence module.[0m[28;126H[K[28;126H101,1[9C34%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m    """[0m[28;126H[K[28;126H102,1[9C34%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H103,0-1[7C35%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36m__init__[0m(self, config):[28;126H[K[28;126H104,1[9C35%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[36msuper[0m(SentenceToDocment, self).__init__()[28;126H[K[28;126H105,1[9C36%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.projection_nonlinearity = nn.ReLU[28;126H[K[28;126H106,1[9C36%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.rnn = nn.GRU[28;126H[K[28;126H107,1[9C37%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_to_document = self.rnn(config.word_hidden_size*[31m2[0m, config.sentence_hidden_size,[28;126H[K[28;126H108,1[9C37%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;36Hbidirectional=[36mTrue[0m, dropout=config.dropout_rate, batch_first=[36mTrue[0m)[28;126H[K[28;126H109,1[9C38%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_context = nn.Parameter(torch.FloatTensor(config.sentence_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())[28;126H[K[28;126H110,1[9C38%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_projection = nn.Linear(config.sentence_hidden_size * [31m2[0m, config.sentence_context_size)[28;126H[K[28;126H111,1[9C39%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_context_size = config.sentence_context_size[28;126H[K[28;126H112,1[9C39%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.bn = nn.BatchNorm1d(num_features=config.num_sentences)[28;126H[K[28;126H113,1[9C40%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_proj_nonlinearity = self.projection_nonlinearity()[28;126H[K[28;126H114,1[9C40%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.softmax = nn.Softmax()[28;126H[K[28;126H115,1[9C40%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H116,0-1[7C41%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36m_sort_sentence_tensor[0m(self, padded_tensor, num_sentences_lens):[28;126H[K[28;126H117,1[9C41%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hnum_sentences_lens, order = num_sentences_lens.sort([31m0[0m, descending=[36mTrue[0m)[28;126H[K[28;126H118,1[9C42%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = padded_tensor[order][28;126H[K[28;126H119,1[9C42%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m padded_tensor, num_sentences_lens, order[28;126H[K[28;126H120,1[9C43%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H121,0-1[7C43%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36m_unsort_sentence_tensor[0m(self, output, order):[28;126H[K[28;126H122,1[9C44%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[31m'''[0m[28;126H[K[28;126H123,1[9C44%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H124,0-1[7C45%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[28;126H[K[28;126H125,1[9C45%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param order:  Tensor[0m[28;126H[K[28;126H126,1[9C46%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :return: Tensor[0m[28;126H[K[28;126H127,1[9C46%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        '''[0m[28;126H[K[28;126H128,1[9C46%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[28;126H[K[28;126H129,1[9C47%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Horder = [36mlist[0m(order)[28;126H[K[28;126H130,1[9C47%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[28;126H[K[28;126H131,1[9C48%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13Hpadded_tensor[i, :] = (output[order.index(i)])[28;126H[K[28;126H132,1[9C48%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m padded_tensor[28;126H[K[28;126H133,1[9C49%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H134,0-1[7C49%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36mforward[0m(self, x, sent_hidden_stat,  num_sentences_lens):[28;126H[K[28;126H135,1[9C50%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[31m'''[0m[28;126H[K[28;126H136,1[9C50%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H137,0-1[7C51%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param x: [batch_size, num_sentences, word_hidden_size * 2], Variable[0m[28;126H[K[28;126H138,1[9C51%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param num_sentences_lens: Tensor[0m[28;126H[K[28;126H139,1[9C52%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :return: [batch_size, sentence_hidden_size*2][0m[28;126H[K[28;126H140,1[9C52%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        '''[0m[28;126H[K[28;126H141,1[9C53%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsentence_sorted, num_sentences_lens, order = self._sort_sentence_tensor(x, num_sentences_lens)[28;126H[K[28;126H142,1[9C53%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hpacked = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_sentences_lens), batch_first=[36mTrue[0m)[28;126H[K[28;126H143,1[9C53%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, (hidden, cell) = self.sentence_to_document(packed, sent_hidden_stat)[28;126H[K[28;126H144,1[9C54%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[28;126H[K[28;126H145,1[9C54%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = self._unsort_sentence_tensor(output, order)  [34m# Variable[0m[28;126H[K[28;126H146,1[9C55%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd1 = output.size()[[31m0[0m][28;126H[K[28;126H147,1[9C55%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd2 = output.size()[[31m1[0m][28;126H[K[28;126H148,1[9C56%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hd3 = output.size()[[31m2[0m][28;126H[K[28;126H149,1[9C56%[27;1H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;9Hprojection = self.sentence_proj_nonlinearity(self.bn(self.sentence_projection(output))).view(-[31m1[0m, self.sentence_context_size)  [34m# [2*3, 55[27;1H][0m[28;126H[K[28;126H150,1[9C57%[26;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = torch.mm(projection, self.sentence_context)  [34m# [2x3, 1][0m[28;126H[K[28;126H151,1[9C57%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[28;126H[K[28;126H152,1[9C58%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).resize(d1 * d3, d2)[28;126H[K[28;126H153,1[9C58%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,3][0m[28;126H[K[28;126H154,1[9C59%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hdocument_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).transpose([31m0[0m, [31m1[0m)[28;126H[K[28;126H155,1[9C59%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m document_tensor[28;126H[K[28;126H156,1[9C60%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H157,0-1[7C60%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# for sentence_ind in range(output.size(0)):[0m[28;126H[K[28;126H158,1[9C61%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     projection = self.sentence_projection(output[sentence_ind])[0m[28;126H[K[28;126H159,1[9C61%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     projection = self.bn(projection)[0m[28;126H[K[28;126H160,1[9C62%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     projection = self.sentence_proj_nonlinearity(projection)[0m[28;126H[K[28;126H161,1[9C62%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     attention = torch.mm(projection, self.sentence_context)[0m[28;126H[K[28;126H162,1[9C62%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     attention = self.softmax(attention.transpose(1, 0))[0m[28;126H[K[28;126H163,1[9C63%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     document_tensor[sentence_ind, :] = output[sentence_ind].transpose(1, 0).mv(attention.view(-1))[0m[28;126H[K[28;126H164,1[9C63%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# return document_tensor[0m[28;126H[K[28;126H165,1[9C64%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H166,0-1[7C64%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[28;126H[K[28;126H167,1[9C65%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[28;126H[K[28;126H168,1[9C65%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H169,0-1[7C66%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H170,0-1[7C66%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[33mclass[0m [36mHAN[0m(nn.Module):[28;126H[K[28;126H171,1[9C67%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H172,0-1[7C67%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36m__init__[0m(self, config):[28;126H[K[28;126H173,1[9C68%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[36msuper[0m(HAN, self).__init__()[28;126H[K[28;126H174,1[9C68%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.num_class = config.num_class[28;126H[K[28;126H175,1[9C68%[27;1H[34h[?25h[?25l[1;27r[1;1H[2M[1;28r[26;2H[34m#       self.dropout = nn.Dropout(p=config.dropout_rate)[0m[27;9Hself.word_to_sentence = WordToSentence(config)[28;126H[K[28;126H176,1[9C69%[26;1H[34h[?25h[?25l[28;128H7[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.sentence_to_document = SentenceToDocment(config)[28;126H[K[28;126H178,1[9C70%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.config = config[28;126H[K[28;126H179,1[9C70%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.is_training = [36mTrue[0m[28;126H[K[28;126H180,1[9C71%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# set up the intermediate output step, if required[0m[28;126H[K[28;126H181,1[9C71%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#self.intermediate = False[0m[28;126H[K[28;126H182,1[9C72%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#self.intermediate_output_nonlinearity = nn.ELU[0m[28;126H[K[28;126H183,1[9C72%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#if self.intermediate:[0m[28;126H[K[28;126H184,1[9C73%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H[34m# self.intermediate_output = nn.Linear(config.sentence_hidden_size * 2, config.sentence_hidden_size * 2)[0m[28;126H[K[28;126H185,1[9C73%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;14H[34m#self.intermediate_nonlinearity = self.intermediate_output_nonlinearity()[0m[28;126H[K[28;126H186,1[9C73%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H187,0-1[7C74%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# final transformation to class weightings[0m[28;126H[K[28;126H188,1[9C74%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num_class)[28;126H[K[28;126H189,1[9C75%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H190,0-1[7C75%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36mforward[0m(self, x, sequence_lens, num_sentences_lens):[28;126H[K[28;126H191,1[9C76%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#[0m[28;126H[K[28;126H192,1[9C76%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[31m'''[0m[28;126H[K[28;126H193,1[9C77%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H194,0-1[7C77%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch.Tensor[0m[28;126H[K[28;126H195,1[9C78%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        :return:[0m[28;126H[K[28;126H196,1[9C78%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[31m        '''[0m[28;126H[K[28;126H197,1[9C79%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hbegin = datetime.datetime.now()[28;126H[K[28;126H198,1[9C79%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hbatch_size = x.size()[[31m0[0m][28;126H[K[28;126H199,1[9C80%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hnum_sentences = x.size()[[31m1[0m][28;126H[K[28;126H200,1[9C80%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# print(x.size())[0m[28;126H[K[28;126H201,1[9C80%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsequence_length = x.size()[[31m2[0m][28;126H[K[28;126H202,1[9C81%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batch_size)[28;126H[K[28;126H203,1[9C81%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentences, sequence_length][0m[28;126H[K[28;126H204,1[9C82%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [34m# [batch_size * num_sentences, word_hidden_size*2][0m[28;126H[K[28;126H205,1[9C82%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hx = x.resize(batch_size, num_sentences, self.config.word_hidden_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[28;126H[K[28;126H206,1[9C83%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hself.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  [34m# [batch_size, sentence_hidden_size*2][0m[28;126H[K[28;126H207,1[9C83%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# dropout or not[0m[28;126H[K[28;126H208,1[9C84%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;1H[34m#        self.document_tensor = self.dropout(self.document_tensor)[0m[28;126H[K[28;126H209,1[9C84%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#[0m[28;126H[K[28;126H210,1[9C85%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#if self.intermediate:[0m[28;126H[K[28;126H211,1[9C85%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#    self.document_tensor = self.intermediate_output(self.document_tensor)[0m[28;126H[K[28;126H212,1[9C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#    self.document_tensor = self.intermediate_nonlinearity(self.document_tensor)[0m[28;126H[K[28;126H213,1[9C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H214,0-1[7C86%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Houtputs = self.fc(self.document_tensor)[28;126H[K[28;126H215,1[9C87%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hend = datetime.datetime.now()[28;126H[K[28;126H216,1[9C87%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[36mprint[0m([31m'In model:'[0m, begin, end, end-begin)[28;126H[K[28;126H217,1[9C88%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m outputs[28;126H[K[28;126H218,1[9C88%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H219,0-1[7C89%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36minit_rnn_hidden[0m(self, batch_size):[28;126H[K[28;126H220,1[9C89%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hword_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size*self.config.num_sentences, self.config.word_hidden_size))[28;126H[K[28;126H221,1[9C90%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9Hsent_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size, self.config.sentence_hidden_size))[28;126H[K[28;126H222,1[9C90%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m word_hidden_stat.cuda(), sent_hidden_stat.cuda()[28;126H[K[28;126H223,1[9C91%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H224,0-1[7C91%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[34m# [0m[30m[43mTODO[0m[28;126H[K[28;126H225,1[9C92%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[28;126H[K[28;126H226,1[9C92%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# for name, v in self.named_parameters():[0m[28;126H[K[28;126H227,1[9C93%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#     print(name, v)[0m[28;126H[K[28;126H228,1[9C93%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# a = input("21321321312")[0m[28;126H[K[28;126H229,1[9C93%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m# return torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[0m[28;126H[K[28;126H230,1[9C94%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H231,0-1[7C94%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[33mreturn[0m torch.optim.Adam([[28;126H[K[28;126H232,1[9C95%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{[31m'params'[0m: self.word_to_sentence.word_to_sentence.parameters()},[28;126H[K[28;126H233,1[9C95%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{[31m'params'[0m: self.word_to_sentence.word_context},[28;126H[K[28;126H234,1[9C96%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{[31m'params'[0m: self.word_to_sentence.word_projection.parameters()},[28;126H[K[28;126H235,1[9C96%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{[31m'params'[0m: self.word_to_sentence.bn.parameters()},[28;126H[K[28;126H236,1[9C97%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{[31m'params'[0m: self.word_to_sentence.word_embeddings.parameters(), [31m'lr'[0m: lr2},[28;126H[K[28;126H237,1[9C97%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{[31m'params'[0m: self.sentence_to_document.parameters()},[28;126H[K[28;126H238,1[9C98%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;13H{[31m'params'[0m: self.fc.parameters()}[28;126H[K[28;126H239,1[9C98%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H[34m#    {'params': self.intermediate_output.parameters()}[0m[28;126H[K[28;126H240,1[9C99%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[27;9H], lr=lr, weight_decay=weight_decay)[28;126H[K[28;126H241,1[9C99%[27;1H[34h[?25h[?25l[1;27r[27;1H
[1;28r[28;126H[K[28;126H242,0-1[7CBot[27;1H[34h[?25h[?25l[28;128H1,1  [26;1H[34h[?25h[?25l[28;128H0[25;1H[34h[?25h[?25l[28;127H39[24;1H[34h[?25h[?25l[28;128H8[23;1H[34h[?25h[?25l[28;128H7[22;1H[34h[?25h[?25l[28;128H6[21;1H[34h[?25h[?25l[28;128H5[20;1H[34h[?25h[?25l[28;128H4[19;1H[34h[?25h[?25l[28;128H3[18;1H[34h[?25h[?25l[28;128H2[17;1H[34h[?25h[?25l[28;128H1,0-1[16;1H[34h[?25h[?25l[28;128H0,1  [15;1H[34h[?25h[?25l[28;127H29[14;1H[34h[?25h[?25l[28;128H8[13;1H[34h[?25h[?25l[28;128H7[12;1H[34h[?25h[?25l[28;128H6[11;1H[34h[?25h[?25l[28;128H5[10;1H[34h[?25h[?25l[28;128H4,0-1[9;1H[34h[?25h[?25l[28;128H3,1  [8;1H[34h[?25h[?25l[28;128H2[7;1H[34h[?25h[?25l[28;128H1[6;1H[34h[?25h[?25l[28;128H0[5;1H[34h[?25h[?25l[28;127H19,0-1[4;1H[34h[?25h[?25l[28;128H8,1  [3;1H[34h[?25h[?25l[28;128H7[2;1H[34h[?25h[?25l[28;128H6[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Houtputs = self.fc(self.document_tensor)[28;126H[K[28;126H215,1[9C99%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H214,0-1[7C99%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m#    self.document_tensor = self.intermediate_nonlinearity(self.document_tensor)[0m[28;126H[K[28;126H213,1[9C98%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m#    self.document_tensor = self.intermediate_output(self.document_tensor)[0m[28;126H[K[28;126H212,1[9C98%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m#if self.intermediate:[0m[28;126H[K[28;126H211,1[9C97%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m#[0m[28;126H[K[28;126H210,1[9C97%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[34m#        self.document_tensor = self.dropout(self.document_tensor)[0m[28;126H[K[28;126H209,1[9C96%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m# dropout or not[0m[28;126H[K[28;126H208,1[9C96%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hself.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  [34m# [batch_size, sentence_hidden_size*2][0m[28;126H[K[28;126H207,1[9C95%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hx = x.resize(batch_size, num_sentences, self.config.word_hidden_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[28;126H[K[28;126H206,1[9C95%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [34m# [batch_size * num_sentences, word_hidden_size*2][0m[28;126H[K[28;126H205,1[9C94%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentences, sequence_length][0m[28;126H[K[28;126H204,1[9C94%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batch_size)[28;126H[K[28;126H203,1[9C93%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hsequence_length = x.size()[[31m2[0m][28;126H[K[28;126H202,1[9C93%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m# print(x.size())[0m[28;126H[K[28;126H201,1[9C93%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hnum_sentences = x.size()[[31m1[0m][28;126H[K[28;126H200,1[9C92%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hbatch_size = x.size()[[31m0[0m][28;126H[K[28;126H199,1[9C92%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hbegin = datetime.datetime.now()[28;126H[K[28;126H198,1[9C91%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[31m        '''[0m[28;126H[K[28;126H197,1[9C91%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[31m        :return:[0m[28;126H[K[28;126H196,1[9C90%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch.Tensor[0m[28;126H[K[28;126H195,1[9C90%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H194,0-1[7C89%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[31m'''[0m[28;126H[K[28;126H193,1[9C89%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m#[0m[28;126H[K[28;126H192,1[9C88%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;5H[33mdef[0m [36mforward[0m(self, x, sequence_lens, num_sentences_lens):[28;126H[K[28;126H191,1[9C88%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H190,0-1[7C87%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9Hself.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num_class)[28;126H[K[28;126H189,1[9C87%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m# final transformation to class weightings[0m[28;126H[K[28;126H188,1[9C86%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[28;126H[K[28;126H187,0-1[7C86%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;14H[34m#self.intermediate_nonlinearity = self.intermediate_output_nonlinearity()[0m[28;126H[K[28;126H186,1[9C86%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;13H[34m# self.intermediate_output = nn.Linear(config.sentence_hidden_size * 2, config.sentence_hidden_size * 2)[0m[28;126H[K[28;126H185,1[9C85%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m#if self.intermediate:[0m[28;126H[K[28;126H184,1[9C85%[1;1H[34h[?25h[?25l[1;27r[1;1H[L[1;28r[1;9H[34m#self.intermediate_output_nonlinearity = nn.ELU[0m[28;126H[K[28;126H183,1[9C84%[1;1H[34h[?25h[?25l[28;126H[K[28;1H:[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l[28;1H[K[28;1H[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ clear
[H[Jdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/models$ cd ..
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ cd ..learvim hierarchical.pymv hierarchical.py.1 hierarchical.py.backupla[Kmv hierarchical.py.backup hierarchical.pyls[Kmv hierarchical.py hierarchical.py.1ls[Kvim hierarchical.py.backup [17Pcd models/vim train_szx.py cd BDCI2017-MingLue/..[Kvim train_szx.py CUDA_VISIBLE_DEVICES=1 python train_szx.py --model-id 4[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvim train_szx.py [KCUDA_VISIBLE_DEVICES=1 python train_szx.py --model-id 4[C
Using TensorFlow backend.
epoch num:  8
loading data...
max sentence length:  42583
total vocab size 780707
load word2index
0 1
(144734, 55, 70)
trainset size: 130260
validset size: 14474
!!!
begin: 2017-12-10 17:55:39.622186
^[[B^[[B^[[B^[[B^[[B^[[B^[[B130257 130257
end: 2017-12-10 18:04:05.636240
0:08:26.014054
!!!
data loaded
config vocab size: 219083
pretrain...
loss weight: 
 0.7786
 0.8593
 1.1661
 1.2979
 1.1405
 0.9833
 0.5955
 1.1791
[torch.FloatTensor of size 8]

training...
lr: 0.001 lr2: 0.0
Before: 2017-12-10 18:04:34.819740 2017-12-10 18:04:35.043543 0:00:00.223803
Traceback (most recent call last):
  File "train_szx.py", line 306, in <module>
    main(args.model_id, use_element, args.is_save)
  File "train_szx.py", line 216, in main
    outputs = model(inputs, sequence_lens_list, num_sentences_lens_list)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/backup231/dyhu/BDCI2017-MingLue/models/hierarchical.py", line 205, in forward
    x = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  # [batch_size * num_sentences, word_hidden_size*2]
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/backup231/dyhu/BDCI2017-MingLue/models/hierarchical.py", line 66, in forward
    word_sorted, sequence_lens, order = self._sort_word_tensor(x, sequence_lens)
  File "/backup231/dyhu/BDCI2017-MingLue/models/hierarchical.py", line 41, in _sort_word_tensor
    padded_tensor = padded_tensor[order]
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/autograd/variable.py", line 74, in __getitem__
    return IndexSelect.apply(self, 0, key)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/autograd/_functions/tensor.py", line 297, in forward
    return tensor.index_select(dim, index)
RuntimeError: invalid argument 3: expecting vector of indices at /pytorch/torch/lib/THC/generic/THCTensorIndex.cu:405
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ CUDA_VISIBLE_DEVICES=1 python train_szx.py --model-id 4[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccd ..[Klearvim hierarchical.pymv hierarchical.py.1 hierarchical.py.backupla[Kmv hierarchical.py.backup hierarchical.pyla[Kmv hierarchical.py.1 hierarchical.py.backupla[Kmv hierarchical.py.backup hierarchical.pyla[K[Kdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ la[K[Kcd ..[K[Klog/[K[K[K[K[K[K[Kclear
[H[Jdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ cim [K[K[K[Kvim config.py 
[?1049h[?1h=[1;24r[34l[34h[?25h[23m[24m[0m[H[J[?25l[24;1H"config.py" 183L, 5139C[1;1H[35mimport[0m pickle

[33mclass[0m [36mConfig[0m:
    has_cuda = [36mTrue[0m
    is_training = [36mTrue[0m
    is_pretrain = [36mTrue[0m
    force_word2index = [36mFalse[0m
    embedding_path = [31m"./word2vec/pretrain_emb.alltrain.256d.npy"[0m
[34m#    embedding_path = "./word2vec/pretrain_emb.128d.npy"[0m
    test_path = [31m'./corpus/seg_test.txt'[0m
[34m#    test_path = './corpus/test_preprocessed.txt'[0m
    result_path = [31m'./results/test_result.json'[0m
[34m#    data_path = './corpus/all_seg_train.txt'[0m
    data_path = [31m'./corpus/all_seg_train.txt'[0m
[34m#    data_path = './corpus/train_m_preprocessed.txt'[0m
    model_path = [31m'./pickles/params.pkl'[0m[18;5Hindex2word_path = [31m'./pickles/index2word.all.pkl'[0m
    word2index_path = [31m'./pickles/word2index.all.pkl'[0m
    model_names = [[31m'fastText'[0m,[21;20H[31m'TextCNN'[0m,[22;20H[31m'TextRCNN'[0m,[23;20H[31m'TextRNN'[0m,[24;126H1,1[11CTop[1;1H[34h[?25h[?25l[24;126H2,0-1[2;1H[34h[?25h[?25l[24;126H3,1  [3;1H[34h[?25h[?25l[24;126H4[4;1H[34h[?25h[?25l[24;126H5[5;1H[34h[?25h[?25l[24;126H6[6;1H[34h[?25h[?25l[24;126H7[7;1H[34h[?25h[?25l[24;126H8[8;1H[34h[?25h[?25l[24;126H9[9;1H[34h[?25h[?25l[24;126H10,1[10;1H[34h[?25h[?25l[24;127H1[11;1H[34h[?25h[?25l[24;127H2[12;1H[34h[?25h[?25l[24;127H3[13;1H[34h[?25h[?25l[24;127H4[14;1H[34h[?25h[?25l[24;127H3[13;1H[34h[?25h[?25l[24;127H4[14;1H[34h[?25h[?25l[24;127H3[13;1H[34h[?25h[?25l[24;1H[K[24;1H:[1;1H    is_pretrain = [36mTrue[0m
    force_word2index = [36mFalse[0m
    embedding_path = [31m"./word2vec/pretrain_emb.alltrain.256d.npy"[0m
[34m#    embedding_path = "./word2vec/pretrain_emb.128d.npy"[0m
    test_path = [31m'./corpus/seg_test.txt'[0m
[34m#    test_path = './corpus/test_preprocessed.txt'[0m
    result_path = [31m'./results/test_result.json'[0m
[34m#    data_path = './corpus/all_seg_train.txt'[0m[8;46H[K[9;1H    data_path = [31m'./corpus/all_seg_train.txt'[0m[9;45H[K[10;1H[34m#    data_path = './corpus/train_m_preprocessed.txt'[0m
    model_path = [31m'./pickles/params.pkl'[0m[11;40H[K[12;5H[K[13;1H    index2word_path = [31m'./pickles/index2word.all.pkl'[0m
    word2index_path = [31m'./pickles/word2index.all.pkl'[0m
[7mconfig.py                                                                                                                    13,1            2%[0m[16;1H[1m[34m:[0m[33mwq[0m[16;5H[K[17;1H[1m[34m:[0m[33mset[0m [35mnumber[0m
[1m[34m:[0m[33mqall[0m[18;6H[K[19;1H[1m[34m:[0m[33mwq[0m![19;5H[K[20;1H[1m[34m:[0m[33mq[0m[20;5H[K[21;1H[1m[34m:[0m[33mq[0m![21;20H[K[22;1H[1m[34m:[0m[22;20H[K[23;1H[1m[7m[Command Line]                                                                                                               10,0-1         Bot[22;2H[34h[?25h[?25l[23;126H9,1   [21;2H[34h[?25h


[?25l[0m[24;1H[K[24;1H[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ 
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ cd data/[K[K[K[K[Kcp[Korpus/
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/corpus$ less[K[K[K[Kwc -l ./*
    144734 ./all_seg_train.txt
      1000 ./sample_seg_test.txt
     10000 ./sample_seg_train.txt
wc: ./seg_corpus: Is a directory
         0 ./seg_corpus
       100 ./seg_test_100.txt
     90000 ./seg_test.txt
    120000 ./seg_train.txt
    365834 total
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue/corpus$ cd ..
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ vi [Km config.py 
[?1049h[?1h=[1;24r[34l[34h[?25h[23m[24m[0m[H[J[?25l[24;1H"config.py" 183L, 5139C[1;1H[35mimport[0m pickle

[33mclass[0m [36mConfig[0m:
    has_cuda = [36mTrue[0m
    is_training = [36mTrue[0m
    is_pretrain = [36mTrue[0m
    force_word2index = [36mFalse[0m
    embedding_path = [31m"./word2vec/pretrain_emb.alltrain.256d.npy"[0m
[34m#    embedding_path = "./word2vec/pretrain_emb.128d.npy"[0m
    test_path = [31m'./corpus/seg_test.txt'[0m
[34m#    test_path = './corpus/test_preprocessed.txt'[0m
    result_path = [31m'./results/test_result.json'[0m
[34m#    data_path = './corpus/all_seg_train.txt'[0m
    data_path = [31m'./corpus/all_seg_train.txt'[0m
[34m#    data_path = './corpus/train_m_preprocessed.txt'[0m
    model_path = [31m'./pickles/params.pkl'[0m[18;5Hindex2word_path = [31m'./pickles/index2word.all.pkl'[0m
    word2index_path = [31m'./pickles/word2index.all.pkl'[0m
    model_names = [[31m'fastText'[0m,[21;20H[31m'TextCNN'[0m,[22;20H[31m'TextRCNN'[0m,[23;20H[31m'TextRNN'[0m,[24;126H1,1[11CTop[1;1H[34h[?25h[?25l[24;126H2,0-1[2;1H[34h[?25h[?25l[24;126H3,1  [3;1H[34h[?25h[?25l[24;126H4[4;1H[34h[?25h[?25l[24;126H5[5;1H[34h[?25h[?25l[24;126H6[6;1H[34h[?25h[?25l[24;126H7[7;1H[34h[?25h[?25l[24;126H8[8;1H[34h[?25h[?25l[24;126H9[9;1H[34h[?25h[?25l[24;126H10,1[10;1H[34h[?25h[?25l[24;127H1[11;1H[34h[?25h[?25l[24;127H2[12;1H[34h[?25h[?25l[24;127H3[13;1H[34h[?25h[?25l[24;127H4[14;1H[34h[?25h[?25l[24;1H[1m-- INSERT --[0m[24;13H[K[24;126H14,1[10CTop[14;1H[34h[?25h[?25l[24;129H2[14;2H[34h[?25h[?25l[24;129H3[14;3H[34h[?25h[?25l[24;129H4[14;4H[34h[?25h[?25l[24;129H5[14;5H[34h[?25h[?25l[24;129H6[14;6H[34h[?25h[?25l[24;129H7[14;7H[34h[?25h[?25l[24;129H8[14;8H[34h[?25h[?25l[24;129H9[14;9H[34h[?25h[?25l[24;129H10[14;10H[34h[?25h[?25l[24;130H1[14;11H[34h[?25h[?25l[24;130H2[14;12H[34h[?25h[?25l[24;130H3[14;13H[34h[?25h[?25l[24;130H4[14;14H[34h[?25h[?25l[24;130H5[14;15H[34h[?25h[?25l[24;130H6[14;16H[34h[?25h[?25l[24;130H7[14;17H[34h[?25h[?25l[24;130H8[14;18H[34h[?25h[?25l[24;130H9[14;19H[34h[?25h[?25l[24;129H20[14;20H[34h[?25h[?25l[24;130H1[14;21H[34h[?25h[?25l[24;130H2[14;22H[34h[?25h[?25l[24;130H3[14;23H[34h[?25h[?25l[24;130H4[14;24H[34h[?25h[?25l[24;130H5[14;25H[34h[?25h[?25l[24;130H6[14;26H[34h[?25h[?25l[24;130H7[14;27H[34h[?25h[?25l[24;130H8[14;28H[34h[?25h[?25l[24;130H9[14;29H[34h[?25h[?25l[24;129H30[14;30H[34h[?25h[?25l[24;130H1[14;31H[34h[?25h[?25l[24;130H2[14;32H[34h[?25h[?25l[24;130H1[14;31H[34h[?25h[?25l[31mseg_train.txt'[0m[14;44H[K[24;130H0[14;30H[34h[?25h[?25l[31mseg_train.txt'[0m[14;43H[K[24;129H29[14;29H[34h[?25h[?25l[31mseg_train.txt'[0m[14;42H[K[24;130H8[14;28H[34h[?25h[?25l[31mseg_train.txt'[0m[14;41H[K[24;130H7[14;27H[34h[?25h[24;1H[K[14;26H[?25l[24;126H14,26[9CTop[14;26H[34h[?25h[?25l[24;127H3[13;26H[34h[?25h[?25l[24;1H[1m-- INSERT --[0m[24;126H[K[24;126H13,26[9CTop[13;26H[34m/all_seg_train.txt'[0m[13;45H[K[13;26H[34h[?25h[?25l[34ms/all_seg_train.txt'[0m[24;130H7[13;27H[34h[?25h[24;1H[K[13;26H[?25l[24;126H13,26[9CTop[13;26H[34h[?25h[?25l[13;23r[23;1H
[1;24r[23;20H[31m'HAN'[0m,[24;126H[K[24;126H13,5[10CTop[13;5H[34h[?25h[?25l[24;127H4[14;5H[34h[?25h[?25l[24;127H5[15;5H[34h[?25h[?25l[24;127H6,4[16;4H[34h[?25h[?25l[24;127H7,5[17;5H[34h[?25h[?25l[24;127H8[18;5H[34h[?25h[?25l[24;127H9[19;5H[34h[?25h[?25l[24;126H20[20;5H[34h[?25h[?25l[24;127H1[21;5H[34h[?25h[?25l[24;127H2[22;5H[34h[?25h[?25l[24;127H3[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;20H[31m'CNNWithDoc2Vec'[0m,[24;126H[K[24;126H24,5[11C0%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;20H[31m'RCNNWithDoc2Vec'[0m,[24;126H[K[24;126H25,5[11C1%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;20H[31m'CNNInception'[0m[24;126H[K[24;126H26,5[11C1%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;19H][24;126H[K[24;126H27,5[11C2%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H28,0-1[9C3%[23;1H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hbatch_size = [31m32[0m [34m# 64 if has cuda[0m[24;126H[K[24;126H29,5[11C3%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hstep = [31m6000[0m//batch_size     [34m# 3000 // batch_size if has cuda[0m[24;126H[K[24;126H30,5[11C4%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hnum_workers = [31m1[0m[24;126H[K[24;126H31,5[11C5%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[34m#    vocab_size = 241684[0m[24;126H[K[24;126H32,5[11C5%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[34m#    vocab_size = 338209[0m[24;126H[K[24;126H33,5[11C6%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hvocab_size = [31m0[0m[24;126H[K[24;126H34,5[11C6%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hmin_count = [31m5[0m[24;126H[K[24;126H35,5[11C7%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hmax_text_len = [31m2000[0m[24;126H[K[24;126H36,5[11C8%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hembedding_size = [31m256[0m[24;126H[K[24;126H37,5[11C8%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[34m#    embedding_size = 128[0m[24;126H[K[24;126H38,5[11C9%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hnum_class = [31m8[0m[24;126H[K[24;126H39,5[10C10%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hlearning_rate = [31m0.001[0m[24;126H[K[24;126H40,5[10C10%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[33mif[0m [33mnot[0m is_pretrain:[24;126H[K[24;126H41,5[10C11%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hlearning_rate2 = [31m0.001[0m[24;126H[K[24;126H42,5[10C11%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[33melse[0m:[24;126H[K[24;126H43,5[10C12%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;9Hlearning_rate2 = [31m0.0[0m    [34m# 0.0 if pre train emb[0m[24;126H[K[24;126H44,5[10C13%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hlr_decay = [31m0.75[0m[24;126H[K[24;126H45,5[10C13%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hbegin_epoch = [31m2[0m[24;126H[K[24;126H46,5[10C14%[23;5H[34h[?25h[?25l[24;127H5[22;5H[34h[?25h[?25l[24;127H4[21;5H[34h[?25h[?25l[24;127H3[20;5H[34h[?25h[?25l[24;127H2[19;5H[34h[?25h[?25l[24;127H1[18;5H[34h[?25h[?25l[24;127H0[17;5H[34h[?25h[?25l[24;126H39[16;5H[34h[?25h[?25l[24;127H8[15;5H[34h[?25h[?25l[24;127H7[14;5H[34h[?25h[?25l[24;127H6[13;5H[34h[?25h[?25l[24;127H5[12;5H[34h[?25h[?25l[24;127H4[11;5H[34h[?25h[?25l[24;127H3[10;5H[34h[?25h[?25l[24;127H2[9;5H[34h[?25h[?25l[24;127H1[8;5H[34h[?25h[?25l[24;127H0[7;5H[34h[?25h[?25l[24;126H29[6;5H[34h[?25h[?25l[24;127H8,0-1[5;1H[34h[?25h[?25l[24;127H7,5  [4;5H[34h[?25h[?25l[24;127H8,0-1[5;1H[34h[?25h[?25l[24;127H9,5  [6;5H[34h[?25h[?25l[24;129H6[6;6H[34h[?25h[?25l[24;129H7[6;7H[34h[?25h[?25l[24;129H8[6;8H[34h[?25h[?25l[24;129H9[6;9H[34h[?25h[?25l[24;129H10[6;10H[34h[?25h[?25l[24;130H1[6;11H[34h[?25h[?25l[24;130H2[6;12H[34h[?25h[?25l[24;130H3[6;13H[34h[?25h[?25l[24;130H4[6;14H[34h[?25h[?25l[24;130H5[6;15H[34h[?25h[?25l[24;130H6[6;16H[34h[?25h[?25l[24;130H7[6;17H[34h[?25h[?25l[24;130H8[6;18H[34h[?25h[?25l[24;130H9[6;19H[34h[?25h[?25l[24;129H20[6;20H[34h[?25h[?25l[24;129H19[6;19H[34h[?25h[?25l[24;130H8[6;18H[34h[?25h[?25l[24;1H[1m-- INSERT --[0m[24;126H[K[24;126H29,18[9C14%[6;18H[34h[?25h[?25l[24;130H9[6;19H[34h[?25h[?25l[24;129H20[6;20H[34h[?25h[?25l [34m# 64 if has cuda[0m[6;36H[K[24;129H19[6;19H[34h[?25h[?25l [34m# 64 if has cuda[0m[6;35H[K[24;130H8[6;18H[34h[?25h[?25l[31m6[0m [34m# 64 if has cuda[0m[24;130H9[6;19H[34h[?25h[?25l[31m4[0m [34m# 64 if has cuda[0m[24;129H20[6;20H[34h[?25h[?25l[24;126H30[7;20H[34h[?25h[?25l[24;127H1[8;20H[34h[?25h[?25l[24;127H2[9;20H[34h[?25h[?25l[24;127H3[10;20H[34h[?25h[?25l[24;127H4,19[11;19H[34h[?25h[?25l[24;127H5,18[12;18H[34h[?25h[?25l[24;127H6,20[13;20H[34h[?25h[?25l[24;127H7[14;20H[34h[?25h[?25l[24;127H8[15;20H[34h[?25h[?25l[24;127H9,18[16;18H[34h[?25h[?25l[24;126H40,20[17;20H[34h[?25h[?25l[24;127H1[18;20H[34h[?25h[?25l[24;127H2[19;20H[34h[?25h[?25l[24;127H3,1[20;10H[34h[?25h[?25l[24;127H4,2[21;20H[34h[?25h[?25l[24;127H5[22;20H[34h[?25h[?25l[24;127H6[23;20H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hweight_decay = [31m0.0[0m[24;126H[K[24;126H47,20[9C15%[23;20H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hdropout_rate = [31m0.5[0m[24;126H[K[24;126H48,20[9C15%[23;20H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hepoch_num = [31m8[0m[24;126H[K[24;126H49,18[9C16%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hepoch_step = [36mmax[0m([31m1[0m, epoch_num // [31m20[0m)[24;126H[K[24;126H50,20[9C16%[23;20H[34h[?25h[?25l[24;126H49,18[22;18H[34h[?25h[?25l[22;17H[K[24;130H7[22;17H[34h[?25h[?25l[31m6[0m[24;130H8[22;18H[34h[?25h[?25l[24;126H50[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H51,5[10C17%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[34m# cnnInception[0m[24;126H[K[24;126H52,18[9C18%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hinception_dim = [31m512[0m[24;126H[K[24;126H53,18[9C18%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hlinear_hidden_size = [31m300[0m[24;126H[K[24;126H54,18[9C19%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H55,4[10C20%[23;4H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[34m# textcnn[0m[24;126H[K[24;126H56,14[9C20%[23;14H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hfeature_size = [31m100[0m[24;126H[K[24;126H57,18[9C21%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hwindow_sizes = [[31m3[0m,[31m4[0m,[31m5[0m,[31m6[0m][24;126H[K[24;126H58,18[9C22%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H59,1[10C22%[23;1H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[34m# textrcnn[0m[24;126H[K[24;126H60,15[9C23%[23;15H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hkernel_sizes = [[31m1[0m, [31m2[0m, [31m3[0m][24;126H[K[24;126H61,18[9C23%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hhidden_size = [31m256[0m [34m# LSTM hidden size, 128 is better than 64[0m[24;126H[K[24;126H62,18[9C24%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hnum_layers = [31m2[0m [34m# LSTM layers[0m[24;126H[K[24;126H63,18[9C25%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H64,1[10C25%[23;1H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[34m# HAN[0m[24;126H[K[24;126H65,10[9C26%[23;10H[34h[?25h[?25l[1;23r[1;1H[2M[1;24r[22;5Hhan_batch_size = [31m32[0m
    num_sentences = [31m55[0m  [34m# 20[0m[24;126H[K[24;126H67,18[9C27%[23;18H[34h[?25h[?25l[1;23r[1;1H[2M[1;24r[22;5Hsequence_length = [31m70[0m
    word_hidden_size =  [31m50[0m[24;126H[K[24;126H69,18[9C28%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hsentence_hidden_size = [31m50[0m[24;126H[K[24;126H70,18[9C29%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hword_context_size = [31m100[0m[24;126H[K[24;126H71,18[9C30%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hsentence_context_size = [31m100[0m[24;126H[K[24;126H72,18[9C30%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H73,1[10C31%[23;1H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[34m# with doc2vec[0m[24;126H[K[24;126H74,18[9C32%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hdoc2vec_size = [31m128[0m  [34m# dmpv+dbow = 256[0m[24;126H[K[24;126H75,18[9C32%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hdoc2vec_out_size = [31m50[0m[24;126H[K[24;126H76,18[9C33%[23;18H[34h[?25h[?25l[1;23r[1;1H[2M[1;24r[22;5Htotal_out_size = [31m100[0m
    dmpv_model_path = [31m"./doc2vec/doc2vec.128d.dmpv.model.bin"[0m[24;126H[K[24;126H78,18[9C34%[23;18H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hdbow_model_path = [31m"./doc2vec/doc2vec.128d.dbow.model.bin"[0m[24;126H[K[24;126H79,18[9C35%[23;18H[34h[?25h[?25l[24;127H8[22;18H[34h[?25h[?25l[24;127H7[21;18H[34h[?25h[?25l[24;127H6[20;18H[34h[?25h[?25l[24;127H5[19;18H[34h[?25h[?25l[24;127H4[18;18H[34h[?25h[?25l[24;127H3,1 [17;1H[34h[?25h[?25l[24;127H2,18[16;18H[34h[?25h[?25l[24;127H1[15;18H[34h[?25h[?25l[24;127H0[14;18H[34h[?25h[?25l[24;126H69[13;18H[34h[?25h[?25l[24;127H8[12;18H[34h[?25h[?25l[24;127H7[11;18H[34h[?25h[?25l[24;127H6[10;18H[34h[?25h[?25l[24;127H5,10[9;10H[34h[?25h[?25l[24;127H6,18[10;18H[34h[?25h[?25l[24;130H9[10;19H[34h[?25h[?25l[24;129H20[10;20H[34h[?25h[?25l[24;130H1[10;21H[34h[?25h[?25l[24;130H2[10;22H[34h[?25h[?25l[24;130H3[10;23H[34h[?25h[?25l[24;130H4[10;24H[34h[?25h[?25l[10;23H[K[24;130H3[10;23H[34h[?25h[?25l[10;22H[K[24;130H2[10;22H[34h[?25h[?25l[31m6[0m[24;130H3[10;23H[34h[?25h[?25l[31m4[0m[24;130H4[10;24H[34h[?25h[?25l[24;127H7,23[11;23H[34h[?25h[?25l[24;127H8,24[12;24H[34h[?25h[?25l[31m0[0m [24;130H3[12;23H[34h[?25h[?25l[31m80[0m[24;130H4[12;24H[34h[?25h[?25l[24;127H9[13;24H[34h[?25h[?25l[24;126H70[14;24H[34h[?25h[?25l[24;127H1[15;24H[34h[?25h[?25l[24;127H3,1 [17;1H[34h[?25h[?25l[24;127H4,19[18;19H[34h[?25h[?25l[24;127H5,24[19;24H[34h[?25h[?25l[24;127H7[21;24H[34h[?25h[?25l[24;127H8[22;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H80,5[10C35%[23;5H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H[34m# with element MLP[0m[24;126H[K[24;126H81,23[9C36%[23;23H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Huse_element=[36mFalse[0m[24;126H[K[24;126H82,22[9C37%[23;22H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Helement_vector_path = [31m"./pickles/sample_seg_train_element_vector.pkl"[0m[24;126H[K[24;126H83,24[9C37%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Helement_embedding_size = [31m256[0m[24;126H[K[24;126H84,24[9C38%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Helement_size = [31m34[0m[24;126H[K[24;126H85,22[9C38%[23;22H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H86,1[10C39%[23;1H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hloss_weight_value = [[24;126H[K[24;126H87,24[9C40%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.4243[0m,[24;126H[K[24;126H88,17[9C40%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.5050[0m,[24;126H[K[24;126H89,17[9C41%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.8118[0m,[24;126H[K[24;126H90,17[9C42%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.9436[0m,[24;126H[K[24;126H91,17[9C42%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.7862[0m,[24;126H[K[24;126H92,17[9C43%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.6290[0m,[24;126H[K[24;126H93,17[9C44%[23;17H[34h[?25h[?25l[24;127H2[22;17H[34h[?25h[?25l[24;127H1[21;17H[34h[?25h[?25l[24;127H0[20;17H[34h[?25h[?25l[24;126H89[19;17H[34h[?25h[?25l[24;127H8[18;17H[34h[?25h[?25l[24;127H7,24[17;24H[34h[?25h[?25l[24;127H6,1 [16;1H[34h[?25h[?25l[24;127H5,22[15;22H[34h[?25h[?25l[24;127H4,24[14;24H[34h[?25h[?25l[24;127H3[13;24H[34h[?25h[?25l[24;127H2,22[12;22H[34h[?25h[?25l[24;127H1,23[11;23H[34h[?25h[?25l[24;127H0,5 [10;5H[34h[?25h[?25l[24;126H79,24[9;24H[34h[?25h[?25l[24;127H8[8;24H[34h[?25h[?25l[24;127H7[7;24H[34h[?25h[?25l[24;127H6[6;24H[34h[?25h[?25l[24;127H5[5;24H[34h[?25h[?25l[24;127H4,19[4;19H[34h[?25h[?25l[24;127H3,1 [3;1H[34h[?25h[?25l[24;127H2,24[2;24H[34h[?25h[?25l[24;127H1[1;24H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5Hsentence_hidden_size = [31m50[0m[24;126H[K[24;126H70,24[9C43%[1;24H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5Hword_hidden_size =  [31m50[0m[24;126H[K[24;126H69,24[9C42%[1;24H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5Hsequence_length = [31m80[0m[24;126H[K[24;126H68,24[9C42%[1;24H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5Hnum_sentences = [31m55[0m  [34m# 20[0m[24;126H[K[24;126H67,23[9C41%[1;23H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5Hhan_batch_size = [31m64[0m[24;126H[K[24;126H66,24[9C40%[1;24H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5H[34m# HAN[0m[24;126H[K[24;126H65,10[9C40%[1;10H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[24;126H[K[24;126H64,1[10C39%[1;1H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5Hnum_layers = [31m2[0m [34m# LSTM layers[0m[24;126H[K[24;126H63,24[9C38%[1;24H[34h[?25h[?25l[1;23r[1;1H[L[1;24r[1;5Hhidden_size = [31m256[0m [34m# LSTM hidden size, 128 is better than 64[0m[24;126H[K[24;126H62,24[9C38%[1;24H[34h[?25h[?25l[24;127H3[2;24H[34h[?25h[?25l[24;127H4,1 [3;1H[34h[?25h[?25l[24;127H5,10[4;10H[34h[?25h[?25l[24;127H6,24[5;24H[34h[?25h[?25l[24;127H8[7;24H[34h[?25h[?25l[24;127H9[8;24H[34h[?25h[?25l[24;126H71[10;24H[34h[?25h[?25l[24;127H2[11;24H[34h[?25h[?25l[24;127H3,1 [12;1H[34h[?25h[?25l[24;127H4,19[13;19H[34h[?25h[?25l[24;127H5,24[14;24H[34h[?25h[?25l[24;127H6[15;24H[34h[?25h[?25l[24;127H7[16;24H[34h[?25h[?25l[24;127H9[18;24H[34h[?25h[?25l[24;126H80,5 [19;5H[34h[?25h[?25l[24;127H1,23[20;23H[34h[?25h[?25l[24;127H2,22[21;22H[34h[?25h[?25l[24;127H3,24[22;24H[34h[?25h[?25l[24;127H4[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Helement_size = [31m34[0m[24;126H[K[24;126H85,22[9C38%[23;22H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H86,1[10C39%[23;1H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hloss_weight_value = [[24;126H[K[24;126H87,24[9C40%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.4243[0m,[24;126H[K[24;126H88,17[9C40%[23;17H[34h[?25h[?25l[1;23r[1;1H[2M[1;24r[22;10H[31m0.5050[0m,[23;10H[31m0.8118[0m,[24;126H[K[24;126H90,17[9C42%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.9436[0m,[24;126H[K[24;126H91,17[9C42%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.7862[0m,[24;126H[K[24;126H92,17[9C43%[23;17H[34h[?25h[?25l[1;23r[1;1H[2M[1;24r[22;10H[31m0.6290[0m,[23;10H[31m0.2412[0m,[24;126H[K[24;126H94,17[9C44%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;10H[31m0.8248[0m,[24;126H[K[24;126H95,17[9C45%[23;17H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5H][24;126H[K[24;126H96,6[10C45%[14;25H[46m[[23;5H][0m[24;126H[K[24;126H96,6[10C45%[23;6H[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H97,1[10C46%[13;25H[[22;5H]
[34h[?25h[?25l[1;23r[23;1H
[1;24r[24;126H[K[24;126H98,1[10C47%[23;1H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[33mclass[0m [36mMultiConfig[0m:[24;126H[K[24;126H99,19[9C47%[23;19H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hhas_cuda = [36mTrue[0m[24;126H[K[24;126H100,20[8C48%[23;20H[34h[?25h[?25l[1;23r[1;1H[2M[1;24r[22;5His_training = [36mTrue[0m
    is_pretrain = [36mTrue[0m[24;126H[K[24;126H102,23[8C49%[23;23H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hforce_word2index = [36mFalse[0m[24;126H[K[24;126H103,24[8C50%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hembedding_path = [31m"./word2vec/pretrain_emb.alltrain.256d.npy"[0m[24;126H[K[24;126H104,24[8C50%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Htest_path = [31m'./corpus/seg_test.txt'[0m[24;126H[K[24;126H105,24[8C51%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[34m#    test_path = './data/test_preprocessed.txt'[0m[24;126H[K[24;126H106,24[8C52%[23;24H[34h[?25h[?25l[1;23r[23;1H
[1;24r[23;5Hresult_path = [31m'./results/test_result_task2.json'[0m[24;126H[K[24;126H107,24[8C52%[23;24H[34h[?25h[24;1H[K[23;23H[?25l[24;126H107,23[8C52%[23;23H[34h[?25h[?25l[24;126H[K[24;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l"config.py" 182L, 5089C written
[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ nvidia-smi
Sun Dec 10 18:13:46 2017       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 375.26                 Driver Version: 375.26                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX TIT...  Off  | 0000:03:00.0     Off |                  N/A |
| 38%   79C    P2    77W / 250W |    860MiB / 12205MiB |      2%      Default |
+-------------------------------+----------------------+----------------------+
|   1  GeForce GTX TIT...  Off  | 0000:04:00.0     Off |                  N/A |
| 40%   81C    P2    82W / 250W |    322MiB / 12206MiB |     24%      Default |
+-------------------------------+----------------------+----------------------+
|   2  GeForce GTX TIT...  Off  | 0000:81:00.0     Off |                  N/A |
| 48%   81C    P2   101W / 250W |   5624MiB / 12206MiB |     24%      Default |
+-------------------------------+----------------------+----------------------+
|   3  GeForce GTX TIT...  Off  | 0000:82:00.0     Off |                  N/A |
| 25%   64C    P2    73W / 250W |   8369MiB / 12206MiB |      2%      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID  Type  Process name                               Usage      |
|=============================================================================|
|    0     36171    C   python2                                        280MiB |
|    0     36764    C   python                                         320MiB |
|    0     40818    C   python                                         253MiB |
|    1     30861    C   python                                         320MiB |
|    2     10109    C   python                                        5282MiB |
|    2     14171    C   python                                         340MiB |
|    3     13750    C   python                                         321MiB |
+-----------------------------------------------------------------------------+
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ nvidia-smivim config.py [9Pcd ..wc -l ./*q[K[K[K[K[K[K[K[K[K[Khtop
(B)0[?1049h[1;24r[m[4l[?1h=[?25l[39;49m[?1000h[39;49m[m[H[J[1B  [36m1  [39m[0;1m[[30m                      0.0%[39m][m    [36m13 [39m[0;1m[[0m[32m||||||||||||||||||||100.0%[39m[0;1m][m   [36m25 [39m[0;1m[[30m                      0.0%[39m][m    [36m37 [39m[0;1m[[30m                      0.0%[39m][3;3H[0m[36m2  [39m[0;1m[[0m[32m||||||||||||||||||||100.0%[39m[0;1m][m    [36m14 [39m[0;1m[[0m[31m|||||||||||||[0;1m[30m        50.0%[39m][m   [36m26 [39m[0;1m[[30m                      0.0%[39m][m    [36m38 [39m[0;1m[[30m                      0.0%[39m][4;3H[0m[36m3  [39m[0;1m[[0m[31m||||||||||||||||||||100.0%[39m[0;1m][m    [36m15 [39m[0;1m[[0m[31m|||||||||[0;1m[30m            33.3%[39m][m   [36m27 [39m[0;1m[[30m                      0.0%[39m][m    [36m39 [39m[0;1m[[30m                      0.0%[39m][5;3H[0m[36m4  [39m[0;1m[[0m[31m|||||||||||||[0;1m[30m        50.0%[39m][m    [36m16 [39m[0;1m[[30m                      0.0%[39m][m   [36m28 [39m[0;1m[[30m                      0.0%[39m][m    [36m40 [39m[0;1m[[30m                      0.0%[39m][6;3H[0m[36m5  [39m[0;1m[[30m                      0.0%[39m][m    [36m17 [39m[0;1m[[30m                      0.0%[39m][m   [36m29 [39m[0;1m[[30m                      0.0%[39m][m    [36m41 [39m[0;1m[[30m                      0.0%[39m][7;3H[0m[36m6  [39m[0;1m[[30m                      0.0%[39m][m    [36m18 [39m[0;1m[[30m                      0.0%[39m][m   [36m30 [39m[0;1m[[30m                      0.0%[39m][m    [36m42 [39m[0;1m[[30m                      0.0%[39m][8;3H[0m[36m7  [39m[0;1m[[30m                      0.0%[39m][m    [36m19 [39m[0;1m[[30m                      0.0%[39m][m   [36m31 [39m[0;1m[[30m                      0.0%[39m][m    [36m43 [39m[0;1m[[30m                      0.0%[39m][9;3H[0m[36m8  [39m[0;1m[[30m                      0.0%[39m][m    [36m20 [39m[0;1m[[0m[32m||||||||||||||||||||100.0%[39m[0;1m][m   [36m32 [39m[0;1m[[30m                      0.0%[39m][m    [36m44 [39m[0;1m[[30m                      0.0%[39m][10;3H[0m[36m9  [39m[0;1m[[30m                      0.0%[39m][m    [36m21 [39m[0;1m[[30m                      0.0%[39m][m   [36m33 [39m[0;1m[[30m                      0.0%[39m][m    [36m45 [39m[0;1m[[30m                      0.0%[39m][11;3H[0m[36m10 [39m[0;1m[[30m                      0.0%[39m][m    [36m22 [39m[0;1m[[30m                      0.0%[39m][m   [36m34 [39m[0;1m[[30m                      0.0%[39m][m    [36m46 [39m[0;1m[[30m                      0.0%[39m][12;3H[0m[36m11 [39m[0;1m[[30m                      0.0%[39m][m    [36m23 [39m[0;1m[[30m                      0.0%[39m][m   [36m35 [39m[0;1m[[30m                      0.0%[39m][m    [36m47 [39m[0;1m[[30m                      0.0%[39m][13;3H[0m[36m12 [39m[0;1m[[30m                      0.0%[39m][m    [36m24 [39m[0;1m[[30m                      0.0%[39m][m   [36m36 [39m[0;1m[[30m                      0.0%[39m][m    [36m48 [39m[0;1m[[30m                      0.0%[39m][14;3H[0m[36mMem[39m[0;1m[[0m[32m||||||||||||||||||||||||||||||||||[34m|[33m||||[0;1m[30m           34.5G/62.8G[39m][m   [36mTasks: [0;1m[36m289[0m[36m, [0;1m[32m367[0m[32m thr[36m; [0;1m[32m26[0m[36m running[15;3HSwp[39m[0;1m[[0m[31m||||||||||||||||||||||||||||||||||||||||||||||||||29.0G/[0;1m[30m31.9G[39m][m   [36mLoad average: [39m[0;1m7.04 [36m6.65 [0m[36m6.99 [16;72HUptime: [0;1m[36m13 days, 02:15:49[2B[0m[30m[46m  PID [30m[42mUSER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command                                                                         [19;1H[30m[46m    1 root       20   0 33912  2512  1180 S  0.0  0.0  0:02.55 /sbin/init                                                                      [20;3H[39;49m[m447 [0;1m[30mroot      [39m[m 20   0 [36m 107M  2[39m[m388 [36m 2[39m[m044 S  0.0  0.0  0:00.02 sshd: dyhu [priv][21;3H450 [0;1m[30mhlcao     [39m[m 20   0 [36m 107M  1[39m[m768 [36m 1[39m[m488 S  0.0  0.0  0:02.01 sshd: hlcao@pts/51[22;3H451 [0;1m[30mhlcao     [39m[m 20   0 [36m27[39m[m572 [36m 2[39m[m440 [36m 2[39m[m028 S  0.0  0.0  0:00.14 -bash[23;3H522 [0;1m[30mroot      [39m[m 20   0 [36m 107M [39m[m   12     4 S  0.0  0.0  0:00.02 sshd: dyhu [priv][1BF1[30m[46mHelp  [39;49m[mF2[30m[46mSetup [39;49m[mF3[30m[46mSearch[39;49m[mF4[30m[46mFilter[39;49m[mF5[30m[46mTree  [39;49m[mF6[30m[46mSortBy[39;49m[mF7[30m[46mNice -[39;49m[mF8[30m[46mNice +[39;49m[mF9[30m[46mKill  [39;49m[mF10[30m[46mQuit                                                                [1@ [H[39;49m[m[2;7H[31m|[2;29H[0;1m[30m3.2[2;52H[0m[31m|||||[0;1m[30m      56.3%[2;76H[0m[32m|[31m|[2;98H[0;1m[30m3.9[2;111H[0m[31m|[2;135H[0;1m[30m7[3;27H[0m[32m|99.[31m4%[3;42H[32m|||||||[31m|||[0;1m[30m   [3;63H35.3[3;76H[0m[32m|[3;98H[0;1m[30m1.3[4;7H[0m[32m|[31m||[0;1m[30m                   8.5%[4;42H[0m[32m|||||||||[31m|||||[7C[0;1m[30m52[4;76H[0m[32m||[31m|[4;98H[0;1m[30m4.5[5;7H[0m[32m||[31m||[0;1m[30m         [5;28H13.1[5;42H[0m[32m|||||[31m|||||[5;63H[0;1m[30m36.9[5;76H[0m[32m|[31m|[5;98H[0;1m[30m3.9[6;7H[0m[32m||[31m||[6;29H[0;1m[30m9.7[6;42H[0m[32m||||[31m||||||[6;63H[0;1m[30m33.6[6;76H[0m[32m|[31m|[6;98H[0;1m[30m3.9[7;7H[0m[32m|[31m|[7;29H[0;1m[30m3.3[7;42H[0m[32m|[7;64H[0;1m[30m2.6[7;76H[0m[32m|[7;98H[0;1m[30m3.3[8;7H[0m[32m|[31m|[8;29H[0;1m[30m3.9[8;42H[0m[32m|[8;64H[0;1m[30m2[8;76H[0m[32m||[31m|[8;98H[0;1m[30m4.6[9;7H[0m[32m|[31m|[9;29H[0;1m[30m3.9[9;62H[0m[32m|8[31m5[0;1m[30m.4%[9;76H[0m[32m|[31m|[9;98H[0;1m[30m3.9[10;7H[0m[32m|[31m|[10;29H[0;1m[30m3.9[10;42H[0m[31m|[10;64H[0;1m[30m2[10;76H[0m[32m|[31m|[10;98H[0;1m[30m3.9[11;7H[0m[32m||[31m|[11;29H[0;1m[30m5.9[11;42H[0m[32m|[11;64H[0;1m[30m3.3[11;76H[0m[32m||[11;98H[0;1m[30m3.9[12;7H[0m[32m|[31m|[12;29H[0;1m[30m3.9[12;76H[0m[32m|[31m|[12;98H[0;1m[30m3.9[13;7H[0m[32m||[31m|[13;29H[0;1m[30m4.6[13;76H[0m[32m|[31m|[13;98H[0;1m[30m3.9[14;93H[32m5[39m[m[1P[15;86H[0;1m6.96 [36m6.63 [0m[36m6.98[16;95H[0;1m[36m50[H[39m[m[23B[J[34h[?25h[?1000l[24;1H[?1049l[?1l>dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ clear
[H[Jdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ CUDclear[1Phtopnvidia-smivim config.py [9Pcd ..wc -l ./*cd corpus/vim config.py [9PclearCUDA_VISIBLE_DEVICES=1 python train_szx.py --model-id 4[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccd ..[Kleard ..CUDA_VISIBLE_DEVICES=1 python train_szx.py --model-id 4[1P[1P[1P[1P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C --is-save y
Using TensorFlow backend.
epoch num:  6
loading data...
max sentence length:  42583
total vocab size 691360
load word2index
0 1
save HAN...
(120000, 55, 80)
(120000, 55, 80) (120000,)
120000
data loaded
config vocab size: 219083
pretrain...
loss weight: 
 0.7786
 0.8593
 1.1661
 1.2979
 1.1405
 0.9833
 0.5955
 1.1791
[torch.FloatTensor of size 8]

training...
lr: 0.001 lr2: 0.0
^[:[1,    93] loss: 1.906, acc: 18.750
Traceback (most recent call last):
  File "train.py", line 231, in <module>
    main(args.model_id, use_element, args.is_save)
  File "train.py", line 162, in main
    outputs = model(inputs)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/backup231/dyhu/BDCI2017-MingLue/models/hierarchical.py", line 251, in forward
    self.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  # [batch_size, sentence_hidden_size*2]
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/backup231/dyhu/BDCI2017-MingLue/models/hierarchical.py", line 150, in forward
    projection = self.sentence_proj_nonlinearity(self.bn(self.sentence_projection(output))).view(-1, self.sentence_context_size)  # [2*3, 5]
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/batchnorm.py", line 37, in forward
    self.training, self.momentum, self.eps)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/functional.py", line 639, in batch_norm
    return f(input, weight, bias)
RuntimeError: running_mean should contain 43 elements not 55
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ vim /[K/[K./preprocessor/builddataset.py 
[?1049h[?1h=[1;30r[34l[34h[?25h[23m[24m[0m[H[J[?25l[30;1HE325: ATTENTION
Found a swap file by the name "./preprocessor/.builddataset.py.swp"
[10Cowned by: root   dated: Fri Dec  8 23:08:53 2017
[9Cfile name: /backup231/dyhu/BDCI2017-MingLue/preprocessor/builddataset.py
[10Cmodified: YES
[9Cuser name: dyhu   host name: mit116
[8Cprocess ID: 48471
While opening file "./preprocessor/builddataset.py"
[13Cdated: Sun Dec 10 15:30:16 2017
      NEWER than swap file!

(1) Another program may be editing the same file.  If this is the case,
    be careful not to end up with two different instances of the same
    file when making changes.  Quit, or continue with caution.
(2) An edit session for this file crashed.
    If this is the case, use ":recover" or "vim -r ./preprocessor/builddataset.py"
    to recover the changes (see ":help recovery").
    If you did this already, delete the swap file "./preprocessor/.builddataset.py.swp"
    to avoid this message.

Swap file "./preprocessor/.builddataset.py.swp" already exists!
[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:[34h[?25h[30;1H[K[?25l[30;1H"./preprocessor/builddataset.py" [readonly] 323L, 10383C[1;1H[35mimport[0m numpy [33mas[0m np
[35mfrom[0m collections [35mimport[0m Counter
[35mimport[0m random
[35mimport[0m math

[33mdef[0m [36mdiscretization[0m(s):
    [33mtry[0m:[8;9Hans = [36mint[0m([36mfloat[0m(s))
        tmp = [36mmax[0m([31m1[0m, [31m10[0m**([36mlen[0m([36mstr[0m(ans))-[31m2[0m))
        [33mreturn[0m [36mstr[0m(ans // tmp * tmp)[10;37H[K[11;5H[33mexcept[0m:[11;12H[K[12;9H[33mreturn[0m s[12;17H[K[13;11H[K[14;1H[33mdef[0m [36mload_data[0m(data_path):[14;28H[K[15;5H[31m"""[0m[15;9H[K[16;1H[31m    载入数据[0m[16;13H[K[17;1H[31m    """[0m[17;14H[K[18;5Hdata= [][18;13H[K[19;5Hlabels = []
    ids = [][20;13H[K[21;5Hmax_sentence_len = [31m0[0m[21;25H[K[22;5H[K[23;1H    [33mwith[0m [36mopen[0m(data_path, [31m'r'[0m) [33mas[0m f:[23;36H[K[24;5H    [33mfor[0m line [33min[0m f:[24;23H[K[25;5H        line = line.strip()[25;33H[K[26;5H        line_list = line.split([31m'[0m[35m\t[0m[31m'[0m)[26;41H[K[27;5H        one_data = line_list[[31m1[0m].split([31m' '[0m)[28;13Hlabel = [36mint[0m(line_list[[31m2[0m])
            tmp_len = [36mlen[0m(one_data)[29;36H[K[30;126H1,1[11CTop[1;1H[34h[?25h[?25l[30;126H2[2;1H[34h[?25h[?25l[30;126H3[3;1H[34h[?25h[?25l[30;126H4[4;1H[34h[?25h[?25l[30;126H5,0-1[5;1H[34h[?25h[?25l[30;126H6,1  [6;1H[34h[?25h[?25l[30;126H7[7;1H[34h[?25h[?25l[30;126H8[8;1H[34h[?25h[?25l[30;126H9[9;1H[34h[?25h[?25l[30;126H10,1[10;1H[34h[?25h[?25l[30;127H1[11;1H[34h[?25h[?25l[30;127H2[12;1H[34h[?25h[?25l[30;127H3,0-1[13;1H[34h[?25h[?25l[30;127H4,1  [14;1H[34h[?25h[?25l[30;127H5[15;1H[34h[?25h[?25l[30;127H6[16;1H[34h[?25h[?25l[30;127H7[17;1H[34h[?25h[?25l[30;127H8[18;1H[34h[?25h[?25l[30;127H9[19;1H[34h[?25h[?25l[30;126H20[20;1H[34h[?25h[?25l[30;127H1[21;1H[34h[?25h[?25l[30;127H2[22;1H[34h[?25h[?25l[30;127H3[23;1H[34h[?25h[?25l[30;127H4[24;1H[34h[?25h[?25l[30;127H5[25;1H[34h[?25h[?25l[30;127H6[26;1H[34h[?25h[?25l[30;127H7[27;1H[34h[?25h[?25l[30;127H8[28;1H[34h[?25h[?25l[30;127H9[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m tmp_len > max_sentence_len:[30;1H[K[30;126H30,1[11C0%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hmax_sentence_len = tmp_len[30;126H[K[30;126H31,1[11C0%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;12H[34m# if tmp_len <= 2000:[0m[30;126H[K[30;126H32,1[11C1%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;16H[34m# data.append([discretization(i) for i in one_data])[0m[30;126H[K[30;126H33,1[11C1%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hids.append(line_list[[31m0[0m])[30;126H[K[30;126H34,1[11C1%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hdata.append(one_data)[30;126H[K[30;126H35,1[11C2%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hlabels.append(label)[30;126H[K[30;126H36,1[11C2%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hf.close()[30;126H[K[30;126H37,1[11C2%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m([31m"max sentence length: "[0m, max_sentence_len)[30;126H[K[30;126H38,1[11C3%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m ids, data, labels[30;126H[K[30;126H39,1[11C3%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H40,0-1[9C3%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H41,0-1[9C4%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mover_sample[0m(ids, data, labels):[30;126H[K[30;126H42,1[11C4%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m([31m"over sampling"[0m)[30;126H[K[30;126H43,1[11C4%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hlabels_counter = Counter(labels)[30;126H[K[30;126H44,1[11C5%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(labels_counter)[30;126H[K[30;126H45,1[11C5%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hmax_count = labels_counter.most_common([31m1[0m)[[31m0[0m][[31m1[0m][30;126H[K[30;126H46,1[11C5%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hp = [36mdict[0m()[30;126H[K[30;126H47,1[11C6%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i [33min[0m labels_counter.keys():[30;126H[K[30;126H48,1[11C6%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hp[i] = (max_count - labels_counter[i]) / labels_counter[i][30;126H[K[30;126H49,1[11C6%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(p)[30;126H[K[30;126H50,1[11C7%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H51,0-1[9C7%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_ids = [][30;126H[K[30;126H52,1[11C7%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_data = [][30;126H[K[30;126H53,1[11C8%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_labels = [][30;126H[K[30;126H54,1[11C8%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hindices = np.arange([36mlen[0m(labels))[30;126H[K[30;126H55,1[11C8%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H56,1[11C9%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_ids.append(ids[i])[30;126H[K[30;126H57,1[11C9%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_data.append(data[i])[30;126H[K[30;126H58,1[11C9%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_labels.append(labels[i])[30;126H[K[30;126H59,1[10C10%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hcur_p = p[labels[i]][30;126H[K[30;126H60,1[10C10%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m cur_p > [31m1[0m:[30;126H[K[30;126H61,1[10C10%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mfor[0m c [33min[0m [36mrange[0m([36mint[0m(math.sqrt(cur_p)+[31m0.5[0m)):[30;126H[K[30;126H62,1[10C11%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_ids.append(ids[i])[30;126H[K[30;126H63,1[10C11%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_data.append(data[i])[30;126H[K[30;126H64,1[10C11%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_labels.append(labels[i])[30;126H[K[30;126H65,1[10C12%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33melse[0m:[30;126H[K[30;126H66,1[10C12%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hrand_p = random.random()[30;126H[K[30;126H67,1[10C12%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m rand_p < cur_p-[31m0.1[0m:[30;126H[K[30;126H68,1[10C13%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_ids.append(ids[i])[30;126H[K[30;126H69,1[10C13%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_data.append(data[i])[30;126H[K[30;126H70,1[10C13%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_labels.append(labels[i])[30;126H[K[30;126H71,1[10C14%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H72,0-1[8C14%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hindices = np.arange([36mlen[0m(new_labels))[30;126H[K[30;126H73,1[10C14%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnp.random.shuffle(indices)[30;126H[K[30;126H74,1[10C15%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H75,0-1[8C15%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m [new_ids[i] [33mfor[0m i [33min[0m indices], np.array(new_data, dtype=np.int64)[indices], np.array(new_labels, dtype=np.int64)[indices][30;126H[K[30;126H76,1[10C15%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H77,0-1[8C16%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H78,0-1[8C16%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mload_test_data[0m(data_path):[30;126H[K[30;126H79,1[10C17%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H80,1[10C17%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    载入测试数据[0m[30;126H[K[30;126H81,1[10C17%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H82,1[10C18%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdata= [][30;126H[K[30;126H83,1[10C18%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Htests_id = [][30;126H[K[30;126H84,1[10C18%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hmax_sentence_len = [31m0[0m[30;126H[K[30;126H85,1[10C19%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mwith[0m [36mopen[0m(data_path, [31m'r'[0m) [33mas[0m f:[30;126H[K[30;126H86,1[10C19%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m line [33min[0m f:[30;126H[K[30;126H87,1[10C19%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_list = line.split([31m'[0m[35m\t[0m[31m'[0m)[30;126H[K[30;126H88,1[10C20%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Htests_id.append(line_list[[31m0[0m])[30;126H[K[30;126H89,1[10C20%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hone_data = line_list[[31m1[0m].split([31m' '[0m)[30;126H[K[30;126H90,1[10C20%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Htmp_len = [36mlen[0m(one_data)[30;126H[K[30;126H91,1[10C21%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m tmp_len > max_sentence_len:[30;126H[K[30;126H92,1[10C21%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hmax_sentence_len = tmp_len[30;126H[K[30;126H93,1[10C21%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hdata.append(one_data)[30;126H[K[30;126H94,1[10C22%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hf.close()[30;126H[K[30;126H95,1[10C22%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m([31m"max text length in test set: "[0m, max_sentence_len)[30;126H[K[30;126H96,1[10C22%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m tests_id, data[30;126H[K[30;126H97,1[10C23%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H98,0-1[8C23%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H99,0-1[8C23%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mbuild_vocabulary[0m(data, min_count=[31m3[0m):[30;126H[K[30;126H100,1[9C24%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H101,1[9C24%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    基于所有数据构建词表[0m[30;126H[K[30;126H102,1[9C24%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H103,1[9C25%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# add <PAD> for embedding[0m[30;126H[K[30;126H104,1[9C25%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hcount = [([31m'<UNK>'[0m, -[31m1[0m), ([31m'<PAD>'[0m, -[31m1[0m)][30;126H[K[30;126H105,1[9C25%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# count = [('UNK', -1)][0m[30;126H[K[30;126H106,1[9C26%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hwords = [][30;126H[K[30;126H107,1[9C26%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m line [33min[0m data:[30;126H[K[30;126H108,1[9C26%[29;1H[34h[?25h[?25l[30;128H7[28;1H[34h[?25h[?25l[30;128H8[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hwords.extend(line)  [34m#[0m[30m[43mTODO[0m[34m ?[0m[30;126H[K[30;126H109,1[9C27%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hcounter = Counter(words)[30;126H[K[30;126H110,1[9C27%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hcounter_list = counter.most_common()[30;126H[K[30;126H111,1[9C27%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m word, c [33min[0m counter_list:[30;126H[K[30;126H112,1[9C28%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m c >= min_count:[30;126H[K[30;126H113,1[9C28%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hcount.append((word, c))[30;126H[K[30;126H114,1[9C28%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdict_word2index = [36mdict[0m()[30;126H[K[30;126H115,1[9C29%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m word, _ [33min[0m count:[30;126H[K[30;126H116,1[9C29%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdict_word2index[word] = [36mlen[0m(dict_word2index)[30;126H[K[30;126H117,1[9C29%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdict_index2word = [36mdict[0m([36mzip[0m(dict_word2index.values(), dict_word2index.keys()))[30;126H[K[30;126H118,1[9C30%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m([31m"vocab size:"[0m, [36mlen[0m(count))[30;126H[K[30;126H119,1[9C30%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(count[-[31m1[0m])[30;126H[K[30;126H120,1[9C30%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m count, dict_word2index, dict_index2word[30;126H[K[30;126H121,1[9C31%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H122,0-1[7C31%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H123,0-1[7C31%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mbuild_dataset[0m(ids, data, labels, dict_word2index, max_text_len):[30;126H[K[30;126H124,1[9C32%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H125,1[9C32%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H126,1[9C32%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H127,1[9C33%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdataset = [][30;126H[K[30;126H128,1[9C33%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hindices = np.arange([36mlen[0m(labels))[30;126H[K[30;126H129,1[9C34%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[34m#    np.random.shuffle(indices)[0m[30;126H[K[30;126H130,1[9C34%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_labels = [][30;126H[K[30;126H131,1[9C34%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_ids = [][30;126H[K[30;126H132,1[9C35%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H133,1[9C35%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_ids.append([31m"train_"[0m+ids[i])[30;126H[K[30;126H134,1[9C35%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_labels.append(labels[i]-[31m1[0m)[30;126H[K[30;126H135,1[9C36%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_line = [][30;126H[K[30;126H136,1[9C36%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m word [33min[0m data[i]:[30;126H[K[30;126H137,1[9C36%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H138,1[9C37%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = dict_word2index[word][30;126H[K[30;126H139,1[9C37%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33melse[0m:[30;126H[K[30;126H140,1[9C37%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = [31m0[0m    [34m# <UNK>[0m[30;126H[K[30;126H141,1[9C38%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_line.append(index)[30;126H[K[30;126H142,1[9C38%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H143,0-1[7C38%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpad_num = max_text_len - [36mlen[0m(new_line)[30;126H[K[30;126H144,1[9C39%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H145,1[9C39%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_line.append([31m1[0m)   [34m# <PAD>[0m[30;126H[K[30;126H146,1[9C39%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H147,1[9C40%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdataset.append(new_line[:max_text_len])[30;126H[K[30;126H148,1[9C40%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m new_ids, np.array(dataset, dtype=np.int64), np.array(new_labels, dtype=np.int64)[30;126H[K[30;126H149,1[9C40%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H150,0-1[7C41%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H151,0-1[7C41%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mbuild_dataset_over_sample[0m(ids, data, labels, dict_word2index, max_text_len):[30;126H[K[30;126H152,1[9C41%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H153,1[9C42%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H154,1[9C42%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    以二分之一max_text_len进行分段[0m[30;126H[K[30;126H155,1[9C42%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H156,1[9C43%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdataset = [][30;126H[K[30;126H157,1[9C43%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hindices = np.arange([36mlen[0m(labels))[30;126H[K[30;126H158,1[9C43%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_labels = [][30;126H[K[30;126H159,1[9C44%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_ids = [][30;126H[K[30;126H160,1[9C44%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H161,1[9C44%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_line = [][30;126H[K[30;126H162,1[9C45%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m word [33min[0m data[i]:[30;126H[K[30;126H163,1[9C45%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H164,1[9C45%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = dict_word2index[word][30;126H[K[30;126H165,1[9C46%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33melse[0m:[30;126H[K[30;126H166,1[9C46%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = [31m0[0m    [34m# <UNK>[0m[30;126H[K[30;126H167,1[9C46%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_line.append(index)[30;126H[K[30;126H168,1[9C47%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H169,0-1[7C47%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpad_num = max_text_len - [36mlen[0m(new_line)[30;126H[K[30;126H170,1[9C47%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H171,1[9C48%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_line.append([31m1[0m)  [34m# <PAD>[0m[30;126H[K[30;126H172,1[9C48%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H173,1[9C48%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_line_len = [36mlen[0m(new_line)[30;126H[K[30;126H174,1[9C49%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m new_line_len == max_text_len:[30;126H[K[30;126H175,1[9C49%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hdataset.append(new_line)[30;126H[K[30;126H176,1[9C50%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_ids.append([31m"train_"[0m+ids[i])[30;126H[K[30;126H177,1[9C50%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_labels.append(labels[i]-[31m1[0m)[30;126H[K[30;126H178,1[9C50%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33melse[0m:[30;126H[K[30;126H179,1[9C51%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hstep_len = [36mint[0m(max_text_len)[30;126H[K[30;126H180,1[9C51%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hb = [31m0[0m[30;126H[K[30;126H181,1[9C51%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13He = b + max_text_len[30;126H[K[30;126H182,1[9C52%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mwhile[0m e < new_line_len:[30;126H[K[30;126H183,1[9C52%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hdataset.append(new_line[b:e])[30;126H[K[30;126H184,1[9C52%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_ids.append([31m"train_"[0m+ids[i])[30;126H[K[30;126H185,1[9C53%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_labels.append(labels[i]-[31m1[0m)[30;126H[K[30;126H186,1[9C53%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hb += step_len[30;126H[K[30;126H187,1[9C53%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17He += step_len[30;126H[K[30;126H188,1[9C54%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num = max_text_len - (new_line_len - b)[30;126H[K[30;126H189,1[9C54%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m pad_num < [36mint[0m(max_text_len * [31m0.5[0m):[30;126H[K[30;126H190,1[9C54%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H191,1[9C55%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;21Hnew_line.append([31m1[0m)  [34m# <PAD>[0m[30;126H[K[30;126H192,1[9C55%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;21Hpad_num -= [31m1[0m[30;126H[K[30;126H193,1[9C55%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hdataset.append(new_line[b:e])[30;126H[K[30;126H194,1[9C56%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_ids.append([31m"train_"[0m+ids[i])[30;126H[K[30;126H195,1[9C56%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hnew_labels.append(labels[i]-[31m1[0m)[30;126H[K[30;126H196,1[9C56%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H197,1[9C57%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_indices = np.arange([36mlen[0m(new_labels))[30;126H[K[30;126H198,1[9C57%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnp.random.shuffle(new_indices)[30;126H[K[30;126H199,1[9C57%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H200,0-1[7C58%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m [new_ids[i] [33mfor[0m i [33min[0m new_indices], np.array(dataset, dtype=np.int64)[new_indices], np.array(new_labels, dtype=np.int64)[new_indices][30;126H[K[30;126H201,1[9C58%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H202,0-1[7C58%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H203,0-1[7C59%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mbuild_test_data[0m(test_data, dict_word2index, max_text_len):[30;126H[K[30;126H204,1[9C59%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H205,1[9C59%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    基于词表构建测试数据集（数值化）[0m[30;126H[K[30;126H206,1[9C60%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H207,1[9C60%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdataset = [][30;126H[K[30;126H208,1[9C60%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m one_data [33min[0m test_data:[30;126H[K[30;126H209,1[9C61%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_one_data = [][30;126H[K[30;126H210,1[9C61%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m word [33min[0m one_data:[30;126H[K[30;126H211,1[9C61%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H212,0-1[7C62%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H213,1[9C62%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = dict_word2index[word][30;126H[K[30;126H214,1[9C62%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33melse[0m:[30;126H[K[30;126H215,1[9C63%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = [31m0[0m   [34m# <UNK>[0m[30;126H[K[30;126H216,1[9C63%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_one_data.append(index)[30;126H[K[30;126H217,1[9C63%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H218,0-1[7C64%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpad_num = max_text_len - [36mlen[0m(new_one_data)[30;126H[K[30;126H219,1[9C64%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H220,1[9C64%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_one_data.append([31m1[0m)  [34m# <PAD>[0m[30;126H[K[30;126H221,1[9C65%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H222,1[9C65%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdataset.append(new_one_data[:max_text_len])[30;126H[K[30;126H223,1[9C65%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H224,0-1[7C66%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m np.array(dataset, dtype=np.int64)[30;126H[K[30;126H225,1[9C66%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H226,0-1[7C67%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H227,0-1[7C67%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36msplit_data[0m(data, radio=[31m0.7[0m):[30;126H[K[30;126H228,1[9C67%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H229,1[9C68%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    将训练集分给为训练集和检验集[0m[30;126H[K[30;126H230,1[9C68%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H231,1[9C68%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hsplit_index = [36mint[0m([36mlen[0m(data) * radio)[30;126H[K[30;126H232,1[9C69%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_data1 = data[ : split_index][30;126H[K[30;126H233,1[9C69%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_data2 = data[split_index : ][30;126H[K[30;126H234,1[9C69%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m new_data1, new_data2[30;126H[K[30;126H235,1[9C70%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H236,0-1[7C70%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mbuild_data_set_HAN[0m(data, labels, dict_word2index, num_sentences, sequence_length):[30;126H[K[30;126H237,1[9C70%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H238,1[9C71%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H239,1[9C71%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H240,1[9C71%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdataset = [][30;126H[K[30;126H241,1[9C72%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hindices = np.arange([36mlen[0m(labels))[30;126H[K[30;126H242,1[9C72%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[34m#    np.random.shuffle(indices)[0m[30;126H[K[30;126H243,1[9C72%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_labels = [][30;126H[K[30;126H244,1[9C73%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H245,1[9C73%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_labels.append(labels[i]-[31m1[0m)[30;126H[K[30;126H246,1[9C73%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_line = [][30;126H[K[30;126H247,1[9C74%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m word [33min[0m data[i]:[30;126H[K[30;126H248,1[9C74%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H249,1[9C74%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = dict_word2index[word][30;126H[K[30;126H250,1[9C75%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33melse[0m:[30;126H[K[30;126H251,1[9C75%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = [31m0[0m    [34m# <UNK>[0m[30;126H[K[30;126H252,1[9C75%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_line.append(index)[30;126H[K[30;126H253,1[9C76%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hline_splitted = sentences_splitted(text=new_line, split_chars=[dict_word2index[split_label] [33mfor[0m split_label [33min[0m [[31m'。'[0m, [31m'！'[0m, [31m'？'[0m]])[30;126H[K[30;126H254,1[9C76%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# 向后补齐sequence_length[0m[30;126H[K[30;126H255,1[9C76%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m ls_i, ls [33min[0m [36menumerate[0m(line_splitted):[30;126H[K[30;126H256,1[9C77%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted[ls_i] = sentence_padding(sentence=ls, max_length=sequence_length)[30;126H[K[30;126H257,1[9C77%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# 向后补齐num_sentences[0m[30;126H[K[30;126H258,1[9C77%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpad_num = num_sentences - [36mlen[0m(line_splitted)[30;126H[K[30;126H259,1[9C78%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m pad_num < [31m0[0m:[30;126H[K[30;126H260,1[9C78%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted = line_splitted[-[31m1[0m*num_sentences:][30;126H[K[30;126H261,1[9C78%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H262,1[9C79%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted.append([[31m1[0m [33mfor[0m _ [33min[0m [36mrange[0m(sequence_length)])  [34m# <PAD>[0m[30;126H[K[30;126H263,1[9C79%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H264,1[9C79%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdataset.append(line_splitted)[30;126H[K[30;126H265,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(np.shape(dataset))[30;126H[K[30;126H266,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# [total_size, num_sentences, sequence_length][0m[30;126H[K[30;126H267,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m np.array(dataset, dtype=np.int64), np.array(new_labels, dtype=np.int64)[30;126H[K[30;126H268,1[9C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H269,0-1[7C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H270,0-1[7C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mbuild_test_data_HAN[0m(data, dict_word2index, num_sentences, sequence_length):[30;126H[K[30;126H271,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H272,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H273,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H274,1[9C83%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdataset = [][30;126H[K[30;126H275,1[9C83%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hindices = np.arange([36mlen[0m(data))[30;126H[K[30;126H276,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[34m#    np.random.shuffle(indices)[0m[30;126H[K[30;126H277,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_labels = [][30;126H[K[30;126H278,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H279,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_line = [][30;126H[K[30;126H280,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m word [33min[0m data[i]:[30;126H[K[30;126H281,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H282,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = dict_word2index[word][30;126H[K[30;126H283,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33melse[0m:[30;126H[K[30;126H284,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = [31m0[0m    [34m# <UNK>[0m[30;126H[K[30;126H285,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_line.append(index)[30;126H[K[30;126H286,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hline_splitted = sentences_splitted(text=new_line, split_chars=[dict_word2index[split_label] [33mfor[0m split_label [33min[0m [[31m'。'[0m, [31m'！'[0m, [31m'？'[0m]])[30;126H[K[30;126H287,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# 向后补齐sequence_length[0m[30;126H[K[30;126H288,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m ls_i, ls [33min[0m [36menumerate[0m(line_splitted):[30;126H[K[30;126H289,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted[ls_i] = sentence_padding(sentence=ls, max_length=sequence_length)[30;126H[K[30;126H290,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# 向后补齐num_sentences[0m[30;126H[K[30;126H291,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpad_num = num_sentences - [36mlen[0m(line_splitted)[30;126H[K[30;126H292,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m pad_num < [31m0[0m:[30;126H[K[30;126H293,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted = line_splitted[-[31m1[0m*num_sentences:][30;126H[K[30;126H294,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H295,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted.append([[31m1[0m [33mfor[0m _ [33min[0m [36mrange[0m(sequence_length)])  [34m# <PAD>[0m[30;126H[K[30;126H296,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H297,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdataset.append(line_splitted)[30;126H[K[30;126H298,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(np.shape(dataset))[30;126H[K[30;126H299,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# [total_size, num_sentences, sequence_length][0m[30;126H[K[30;126H300,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m np.array(dataset, dtype=np.int64)[30;126H[K[30;126H301,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H302,0-1[7C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H303,0-1[7C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H304,0-1[7C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36msentence_padding[0m(sentence, max_length):[30;126H[K[30;126H305,1[9C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mif[0m [36mlen[0m(sentence) <= max_length:[30;126H[K[30;126H306,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m _ [33min[0m [36mrange[0m(max_length-[36mlen[0m(sentence)):[30;126H[K[30;126H307,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hsentence.append([31m1[0m)[30;126H[K[30;126H308,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33melse[0m:[30;126H[K[30;126H309,1[9C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsentence = sentence[max_length*(-[31m1[0m):][30;126H[K[30;126H310,1[9C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m sentence[30;126H[K[30;126H311,1[9C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H312,0-1[7C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36msentences_splitted[0m(text, split_chars=[[31m"。"[0m]):[30;126H[K[30;126H313,1[9C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# text : list, 1-dim[0m[30;126H[K[30;126H314,1[9C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# 按照分隔符进行分句[0m[30;126H[K[30;126H315,1[9C97%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hsplitted = [][30;126H[K[30;126H316,1[9C97%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hidxs = [i [33mfor[0m i, a [33min[0m [36menumerate[0m(text) [33mif[0m a [33min[0m split_chars][30;126H[K[30;126H317,1[9C97%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i, _ [33min[0m [36menumerate[0m(idxs):[30;126H[K[30;126H318,1[9C98%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m i == [31m0[0m:[30;126H[K[30;126H319,1[9C98%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hsplitted.append(text[:idxs[i] + [31m1[0m])[30;126H[K[30;126H320,1[9C98%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33melse[0m:[30;126H[K[30;126H321,1[9C99%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hsplitted.append(text[idxs[i - [31m1[0m] + [31m1[0m: idxs[i] + [31m1[0m])[30;126H[K[30;126H322,1[9C99%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m splitted[30;126H[K[30;126H323,1[9CBot[29;1H[34h[?25h[?25l[30;128H2[28;1H[34h[?25h[?25l[30;128H1[27;1H[34h[?25h[?25l[30;128H0[26;1H[34h[?25h[?25l[30;127H19[25;1H[34h[?25h[?25l[30;128H8[24;1H[34h[?25h[?25l[30;128H7[23;1H[34h[?25h[?25l[30;128H6[22;1H[34h[?25h[?25l[30;128H5[21;1H[34h[?25h[?25l[30;128H4[20;1H[34h[?25h[?25l[30;128H3[19;1H[34h[?25h[?25l[30;128H2,0-1[18;1H[34h[?25h[?25l[30;128H1,1  [17;1H[34h[?25h[?25l[30;128H0[16;1H[34h[?25h[?25l[30;127H09[15;1H[34h[?25h[?25l[30;128H8[14;1H[34h[?25h[?25l[30;128H7[13;1H[34h[?25h[?25l[30;128H6[12;1H[34h[?25h[?25l[30;128H5[11;1H[34h[?25h[?25l[30;128H4,0-1[10;1H[34h[?25h[?25l[30;128H3[9;1H[34h[?25h[?25l[30;128H2[8;1H[34h[?25h[?25l[30;128H1,1  [7;1H[34h[?25h[?25l[30;128H0[6;1H[34h[?25h[?25l[30;126H299[5;1H[34h[?25h[?25l[30;128H8[4;1H[34h[?25h[?25l[30;128H7[3;1H[34h[?25h[?25l[30;128H6[2;1H[34h[?25h[?25l[30;128H5[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hline_splitted = line_splitted[-[31m1[0m*num_sentences:][30;126H[K[30;126H294,1[9C99%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mif[0m pad_num < [31m0[0m:[30;126H[K[30;126H293,1[9C99%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hpad_num = num_sentences - [36mlen[0m(line_splitted)[30;126H[K[30;126H292,1[9C98%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[34m# 向后补齐num_sentences[0m[30;126H[K[30;126H291,1[9C98%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hline_splitted[ls_i] = sentence_padding(sentence=ls, max_length=sequence_length)[30;126H[K[30;126H290,1[9C98%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mfor[0m ls_i, ls [33min[0m [36menumerate[0m(line_splitted):[30;126H[K[30;126H289,1[9C97%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[34m# 向后补齐sequence_length[0m[30;126H[K[30;126H288,1[9C97%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hline_splitted = sentences_splitted(text=new_line, split_chars=[dict_word2index[split_label] [33mfor[0m split_label [33min[0m [[31m'。'[0m, [31m'！'[0m, [31m'？'[0m]])[30;126H[K[30;126H287,1[9C97%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hnew_line.append(index)[30;126H[K[30;126H286,1[9C96%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hindex = [31m0[0m    [34m# <UNK>[0m[30;126H[K[30;126H285,1[9C96%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33melse[0m:[30;126H[K[30;126H284,1[9C96%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hindex = dict_word2index[word][30;126H[K[30;126H283,1[9C95%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H282,1[9C95%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mfor[0m word [33min[0m data[i]:[30;126H[K[30;126H281,1[9C95%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hnew_line = [][30;126H[K[30;126H280,1[9C94%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H279,1[9C94%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hnew_labels = [][30;126H[K[30;126H278,1[9C94%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[34m#    np.random.shuffle(indices)[0m[30;126H[K[30;126H277,1[9C93%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hindices = np.arange([36mlen[0m(data))[30;126H[K[30;126H276,1[9C93%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hdataset = [][30;126H[K[30;126H275,1[9C93%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m    """[0m[30;126H[K[30;126H274,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H273,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[31m"""[0m[30;126H[K[30;126H272,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[33mdef[0m [36mbuild_test_data_HAN[0m(data, dict_word2index, num_sentences, sequence_length):[30;126H[K[30;126H271,1[9C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H270,0-1[7C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H269,0-1[7C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mreturn[0m np.array(dataset, dtype=np.int64), np.array(new_labels, dtype=np.int64)[30;126H[K[30;126H268,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[34m# [total_size, num_sentences, sequence_length][0m[30;126H[K[30;126H267,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[36mprint[0m(np.shape(dataset))[30;126H[K[30;126H266,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hdataset.append(line_splitted)[30;126H[K[30;126H265,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hpad_num -= [31m1[0m[30;126H[K[30;126H264,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hline_splitted.append([[31m1[0m [33mfor[0m _ [33min[0m [36mrange[0m(sequence_length)])  [34m# <PAD>[0m[30;126H[K[30;126H263,1[9C89%[1;1H[34h[?25h[?25l[30;128H4[2;1H[34h[?25h[?25l[30;128H5[3;1H[34h[?25h[?25l[30;128H6[4;1H[34h[?25h[?25l[30;128H7[5;1H[34h[?25h[?25l[30;128H8[6;1H[34h[?25h[?25l[30;128H9,0-1[7;1H[34h[?25h[?25l[30;127H70[8;1H[34h[?25h[?25l[30;128H1,1  [9;1H[34h[?25h[?25l[30;128H2[10;1H[34h[?25h[?25l[30;128H3[11;1H[34h[?25h[?25l[30;128H4[12;1H[34h[?25h[?25l[30;128H5[13;1H[34h[?25h[?25l[30;128H6[14;1H[34h[?25h[?25l[30;128H7[15;1H[34h[?25h[?25l[30;128H8[16;1H[34h[?25h[?25l[30;128H9[17;1H[34h[?25h[?25l[30;127H80[18;1H[34h[?25h[?25l[30;128H1[19;1H[34h[?25h[?25l[30;128H2[20;1H[34h[?25h[?25l[30;128H3[21;1H[34h[?25h[?25l[30;128H4[22;1H[34h[?25h[?25l[30;128H5[23;1H[34h[?25h[?25l[30;128H6[24;1H[34h[?25h[?25l[30;128H7[25;1H[34h[?25h[?25l[30;128H8[26;1H[34h[?25h[?25l[30;128H9[27;1H[34h[?25h[?25l[30;127H90[28;1H[34h[?25h[?25l[30;128H1[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpad_num = num_sentences - [36mlen[0m(line_splitted)[30;126H[K[30;126H292,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m pad_num < [31m0[0m:[30;126H[K[30;126H293,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted = line_splitted[-[31m1[0m*num_sentences:][30;126H[K[30;126H294,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H295,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted.append([[31m1[0m [33mfor[0m _ [33min[0m [36mrange[0m(sequence_length)])  [34m# <PAD>[0m[30;126H[K[30;126H296,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H297,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdataset.append(line_splitted)[30;126H[K[30;126H298,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(np.shape(dataset))[30;126H[K[30;126H299,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# [total_size, num_sentences, sequence_length][0m[30;126H[K[30;126H300,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m np.array(dataset, dtype=np.int64)[30;126H[K[30;126H301,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H302,0-1[7C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H303,0-1[7C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H304,0-1[7C93%[29;1H[34h[?25h[?25l[30;128H3[28;1H[34h[?25h[?25l[30;128H2[27;1H[34h[?25h[?25l[30;128H1,1  [26;1H[34h[?25h[?25l[30;128H0[25;1H[34h[?25h[?25l[30;126H299[24;1H[34h[?25h[?25l[30;128H8[23;1H[34h[?25h[?25l[30;128H7[22;1H[34h[?25h[?25l[30;128H6[21;1H[34h[?25h[?25l[30;128H5[20;1H[34h[?25h[?25l[30;128H4[19;1H[34h[?25h[?25l[30;128H3[18;1H[34h[?25h[?25l[30;128H2[17;1H[34h[?25h[?25l[30;128H1[16;1H[34h[?25h[?25l[30;128H0[15;1H[34h[?25h[?25l[30;127H89[14;1H[34h[?25h[?25l[30;128H8[13;1H[34h[?25h[?25l[30;128H7[12;1H[34h[?25h[?25l[30;128H6[11;1H[34h[?25h[?25l[30;128H5[10;1H[34h[?25h[?25l[30;128H4[9;1H[34h[?25h[?25l[30;128H3[8;1H[34h[?25h[?25l[30;128H2[7;1H[34h[?25h[?25l[30;128H1[6;1H[34h[?25h[?25l[30;128H0[5;1H[34h[?25h[?25l[30;127H79[4;1H[34h[?25h[?25l[30;128H8[3;1H[34h[?25h[?25l[30;128H7[2;1H[34h[?25h[?25l[30;128H6[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hdataset = [][30;126H[K[30;126H275,1[9C93%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m    """[0m[30;126H[K[30;126H274,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H273,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[31m"""[0m[30;126H[K[30;126H272,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[33mdef[0m [36mbuild_test_data_HAN[0m(data, dict_word2index, num_sentences, sequence_length):[30;126H[K[30;126H271,1[9C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H270,0-1[7C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H269,0-1[7C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mreturn[0m np.array(dataset, dtype=np.int64), np.array(new_labels, dtype=np.int64)[30;126H[K[30;126H268,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[34m# [total_size, num_sentences, sequence_length][0m[30;126H[K[30;126H267,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[36mprint[0m(np.shape(dataset))[30;126H[K[30;126H266,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hdataset.append(line_splitted)[30;126H[K[30;126H265,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hpad_num -= [31m1[0m[30;126H[K[30;126H264,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hline_splitted.append([[31m1[0m [33mfor[0m _ [33min[0m [36mrange[0m(sequence_length)])  [34m# <PAD>[0m[30;126H[K[30;126H263,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H262,1[9C88%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hline_splitted = line_splitted[-[31m1[0m*num_sentences:][30;126H[K[30;126H261,1[9C88%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mif[0m pad_num < [31m0[0m:[30;126H[K[30;126H260,1[9C88%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hpad_num = num_sentences - [36mlen[0m(line_splitted)[30;126H[K[30;126H259,1[9C87%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[34m# 向后补齐num_sentences[0m[30;126H[K[30;126H258,1[9C87%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hline_splitted[ls_i] = sentence_padding(sentence=ls, max_length=sequence_length)[30;126H[K[30;126H257,1[9C87%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mfor[0m ls_i, ls [33min[0m [36menumerate[0m(line_splitted):[30;126H[K[30;126H256,1[9C86%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[34m# 向后补齐sequence_length[0m[30;126H[K[30;126H255,1[9C86%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hline_splitted = sentences_splitted(text=new_line, split_chars=[dict_word2index[split_label] [33mfor[0m split_label [33min[0m [[31m'。'[0m, [31m'！'[0m, [31m'？'[0m]])[30;126H[K[30;126H254,1[9C86%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hnew_line.append(index)[30;126H[K[30;126H253,1[9C85%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hindex = [31m0[0m    [34m# <UNK>[0m[30;126H[K[30;126H252,1[9C85%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33melse[0m:[30;126H[K[30;126H251,1[9C85%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hindex = dict_word2index[word][30;126H[K[30;126H250,1[9C84%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H249,1[9C84%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mfor[0m word [33min[0m data[i]:[30;126H[K[30;126H248,1[9C84%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hnew_line = [][30;126H[K[30;126H247,1[9C83%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hnew_labels.append(labels[i]-[31m1[0m)[30;126H[K[30;126H246,1[9C83%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H245,1[9C82%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hnew_labels = [][30;126H[K[30;126H244,1[9C82%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[34m#    np.random.shuffle(indices)[0m[30;126H[K[30;126H243,1[9C82%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hindices = np.arange([36mlen[0m(labels))[30;126H[K[30;126H242,1[9C81%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hdataset = [][30;126H[K[30;126H241,1[9C81%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m    """[0m[30;126H[K[30;126H240,1[9C81%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H239,1[9C80%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[31m"""[0m[30;126H[K[30;126H238,1[9C80%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[33mdef[0m [36mbuild_data_set_HAN[0m(data, labels, dict_word2index, num_sentences, sequence_length):[30;126H[K[30;126H237,1[9C80%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H236,0-1[7C79%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mreturn[0m new_data1, new_data2[30;126H[K[30;126H235,1[9C79%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5Hnew_data2 = data[split_index : ][30;126H[K[30;126H234,1[9C79%[1;1H[34h[?25h[?25l[30;128H5[2;1H[34h[?25h[?25l[30;128H6,0-1[3;1H[34h[?25h[?25l[30;128H7,1  [4;1H[34h[?25h[?25l[30;128H8[5;1H[34h[?25h[?25l[30;128H9[6;1H[34h[?25h[?25l[30;127H40[7;1H[34h[?25h[?25l[30;128H1[8;1H[34h[?25h[?25l[30;128H2[9;1H[34h[?25h[?25l[30;128H3[10;1H[34h[?25h[?25l[30;128H4[11;1H[34h[?25h[?25l[30;128H5[12;1H[34h[?25h[?25l[30;128H6[13;1H[34h[?25h[?25l[30;128H7[14;1H[34h[?25h[?25l[30;128H8[15;1H[34h[?25h[?25l[30;128H9[16;1H[34h[?25h[?25l[30;127H50[17;1H[34h[?25h[?25l[30;128H1[18;1H[34h[?25h[?25l[30;128H2[19;1H[34h[?25h[?25l[30;128H3[20;1H[34h[?25h[?25l[30;128H4[21;1H[34h[?25h[?25l[30;128H5[22;1H[34h[?25h[?25l[30;128H6[23;1H[34h[?25h[?25l[30;128H7[24;1H[34h[?25h[?25l[30;128H8[25;1H[34h[?25h[?25l[30;128H9[26;1H[34h[?25h[?25l[30;127H60[27;1H[34h[?25h[?25l[30;128H1[28;1H[34h[?25h[?25l[30;128H2[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted.append([[31m1[0m [33mfor[0m _ [33min[0m [36mrange[0m(sequence_length)])  [34m# <PAD>[0m[30;126H[K[30;126H263,1[9C79%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H264,1[9C79%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdataset.append(line_splitted)[30;126H[K[30;126H265,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(np.shape(dataset))[30;126H[K[30;126H266,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# [total_size, num_sentences, sequence_length][0m[30;126H[K[30;126H267,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m np.array(dataset, dtype=np.int64), np.array(new_labels, dtype=np.int64)[30;126H[K[30;126H268,1[9C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H269,0-1[7C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H270,0-1[7C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36mbuild_test_data_HAN[0m(data, dict_word2index, num_sentences, sequence_length):[30;126H[K[30;126H271,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H272,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    基于词表构建数据集（数值化）[0m[30;126H[K[30;126H273,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H274,1[9C83%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hdataset = [][30;126H[K[30;126H275,1[9C83%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hindices = np.arange([36mlen[0m(data))[30;126H[K[30;126H276,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[34m#    np.random.shuffle(indices)[0m[30;126H[K[30;126H277,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hnew_labels = [][30;126H[K[30;126H278,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i [33min[0m indices:[30;126H[K[30;126H279,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnew_line = [][30;126H[K[30;126H280,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m word [33min[0m data[i]:[30;126H[K[30;126H281,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m word [33min[0m dict_word2index:[30;126H[K[30;126H282,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = dict_word2index[word][30;126H[K[30;126H283,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33melse[0m:[30;126H[K[30;126H284,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hindex = [31m0[0m    [34m# <UNK>[0m[30;126H[K[30;126H285,1[9C87%[29;1H[34h[?25h[?25l[30;128H4[28;1H[34h[?25h[?25l[30;128H3[27;1H[34h[?25h[?25l[30;128H4[28;1H[34h[?25h[?25l[30;128H5[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnew_line.append(index)[30;126H[K[30;126H286,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hline_splitted = sentences_splitted(text=new_line, split_chars=[dict_word2index[split_label] [33mfor[0m split_label [33min[0m [[31m'。'[0m, [31m'！'[0m, [31m'？'[0m]])[30;126H[K[30;126H287,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# 向后补齐sequence_length[0m[30;126H[K[30;126H288,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m ls_i, ls [33min[0m [36menumerate[0m(line_splitted):[30;126H[K[30;126H289,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted[ls_i] = sentence_padding(sentence=ls, max_length=sequence_length)[30;126H[K[30;126H290,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# 向后补齐num_sentences[0m[30;126H[K[30;126H291,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpad_num = num_sentences - [36mlen[0m(line_splitted)[30;126H[K[30;126H292,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m pad_num < [31m0[0m:[30;126H[K[30;126H293,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted = line_splitted[-[31m1[0m*num_sentences:][30;126H[K[30;126H294,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mwhile[0m pad_num > [31m0[0m:[30;126H[K[30;126H295,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hline_splitted.append([[31m1[0m [33mfor[0m _ [33min[0m [36mrange[0m(sequence_length)])  [34m# <PAD>[0m[30;126H[K[30;126H296,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpad_num -= [31m1[0m[30;126H[K[30;126H297,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdataset.append(line_splitted)[30;126H[K[30;126H298,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[36mprint[0m(np.shape(dataset))[30;126H[K[30;126H299,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# [total_size, num_sentences, sequence_length][0m[30;126H[K[30;126H300,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m np.array(dataset, dtype=np.int64)[30;126H[K[30;126H301,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H302,0-1[7C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H303,0-1[7C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H304,0-1[7C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36msentence_padding[0m(sentence, max_length):[30;126H[K[30;126H305,1[9C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mif[0m [36mlen[0m(sentence) <= max_length:[30;126H[K[30;126H306,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m _ [33min[0m [36mrange[0m(max_length-[36mlen[0m(sentence)):[30;126H[K[30;126H307,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hsentence.append([31m1[0m)[30;126H[K[30;126H308,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33melse[0m:[30;126H[K[30;126H309,1[9C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsentence = sentence[max_length*(-[31m1[0m):][30;126H[K[30;126H310,1[9C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m sentence[30;126H[K[30;126H311,1[9C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H312,0-1[7C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mdef[0m [36msentences_splitted[0m(text, split_chars=[[31m"。"[0m]):[30;126H[K[30;126H313,1[9C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# text : list, 1-dim[0m[30;126H[K[30;126H314,1[9C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# 按照分隔符进行分句[0m[30;126H[K[30;126H315,1[9C97%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hsplitted = [][30;126H[K[30;126H316,1[9C97%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5Hidxs = [i [33mfor[0m i, a [33min[0m [36menumerate[0m(text) [33mif[0m a [33min[0m split_chars][30;126H[K[30;126H317,1[9C97%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mfor[0m i, _ [33min[0m [36menumerate[0m(idxs):[30;126H[K[30;126H318,1[9C98%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m i == [31m0[0m:[30;126H[K[30;126H319,1[9C98%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hsplitted.append(text[:idxs[i] + [31m1[0m])[30;126H[K[30;126H320,1[9C98%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33melse[0m:[30;126H[K[30;126H321,1[9C99%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hsplitted.append(text[idxs[i - [31m1[0m] + [31m1[0m: idxs[i] + [31m1[0m])[30;126H[K[30;126H322,1[9C99%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mreturn[0m splitted[30;126H[K[30;126H323,1[9CBot[29;1H[34h[?25h[?25l[30;126H[K[30;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l"./preprocessor/builddataset.py" 323L, 10383C written
[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ vim config.py [K[K[K[K[K[K[K[K[K[Kmodels/hierarchical.py 
[?1049h[?1h=[1;30r[34l[34h[?25h[23m[24m[0m[H[J[?25l[30;1H"models/hierarchical.py" 285L, 13086C[1;1H[35mimport[0m numpy [33mas[0m np
[35mimport[0m os
[35mimport[0m torch
[35mimport[0m torch.nn [33mas[0m nn
[35mfrom[0m torch.autograd [35mimport[0m Variable
[35mfrom[0m torch [35mimport[0m optim
[35mimport[0m torch.nn.functional [33mas[0m F

[35mfrom[0m torch.nn.utils.rnn [35mimport[0m pack_padded_sequence, pad_packed_sequence

[33mclass[0m [36mWordToSentence[0m(nn.Module):
    [31m"""
    The wordacter to word-level module.
    """[0m
    [33mdef[0m [36m__init__[0m(self, config):[16;9H[36msuper[0m(WordToSentence, self).__init__()[17;9Hself.word_embeddings = nn.Embedding(num_embeddings=config.vocab_size,[18;45Hembedding_dim=config.embedding_size)[19;9Hself.projection_nonlinearity = nn.ReLU[20;9Hself.rnn = nn.GRU[21;9Hself.word_to_sentence = self.rnn(config.embedding_size, config.word_hidden_size, bidirectional=[36mTrue[0m,[22;33Hbatch_first=[36mTrue[0m, dropout=config.dropout_rate)[24;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.word_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())  [34m# [0m[30m[43mTODO[0m[34m 改变初始化方式[0m[25;9Hself.word_projection = nn.Linear(config.word_hidden_size * [31m2[0m, config.word_context_size)[26;9Hself.word_context_size = config.word_context_size[27;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[28;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[29;9Hself.softmax = nn.Softmax()[30;126H1,1[11CTop[1;1H[34h[?25h[?25l[30;126H2[2;1H[34h[?25h[?25l[30;126H3[3;1H[34h[?25h[?25l[30;126H4[4;1H[34h[?25h[?25l[30;126H5[5;1H[34h[?25h[?25l[30;126H6[6;1H[34h[?25h[?25l[30;126H7[7;1H[34h[?25h[?25l[30;126H8,0-1[8;1H[34h[?25h[?25l[30;126H9,1  [9;1H[34h[?25h[?25l[30;126H10,0-1[10;1H[34h[?25h[?25l[30;127H1,1  [11;1H[34h[?25h[?25l[30;127H2[12;1H[34h[?25h[?25l[30;127H3[13;1H[34h[?25h[?25l[30;127H4[14;1H[34h[?25h[?25l[30;127H5[15;1H[34h[?25h[?25l[30;127H6[16;1H[34h[?25h[?25l[30;127H7[17;1H[34h[?25h[?25l[30;127H8[18;1H[34h[?25h[?25l[30;127H9[19;1H[34h[?25h[?25l[30;126H20[20;1H[34h[?25h[?25l[30;127H1[21;1H[34h[?25h[?25l[30;127H2[22;1H[34h[?25h[?25l[30;127H3,0-1[23;1H[34h[?25h[?25l[30;127H4,1  [24;1H[34h[?25h[?25l[30;127H5[25;1H[34h[?25h[?25l[30;127H6[26;1H[34h[?25h[?25l[30;127H7[27;1H[34h[?25h[?25l[30;127H8[28;1H[34h[?25h[?25l[30;127H9[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mif[0m os.path.exists(config.embedding_path) [33mand[0m config.is_training [33mand[0m config.is_pretrain:[30;1H[K[30;126H30,1[11C0%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[36mprint[0m([31m"pretrain..."[0m)[30;126H[K[30;126H31,1[11C0%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(np.load(config.embedding_path)))[30;126H[K[30;126H32,1[11C1%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H33,0-1[9C1%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[30;126H[K[30;126H34,1[11C1%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[30;126H[K[30;126H35,1[11C2%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H36,0-1[9C2%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[30;126H[K[30;126H37,1[11C3%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[30;126H[K[30;126H38,1[11C3%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# print(type(sequence_lens), type(order))[0m[30;126H[K[30;126H39,1[11C3%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTensor' >[0m[30;126H[K[30;126H40,1[11C4%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpadded_tensor = padded_tensor[order][30;126H[K[30;126H41,1[11C4%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m padded_tensor, sequence_lens, order[30;126H[K[30;126H42,1[11C5%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H43,0-1[9C5%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36m_unsort_word_tensor[0m(self, output, order):[30;126H[K[30;126H44,1[11C5%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[31m'''[0m[30;126H[K[30;126H45,1[11C6%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H46,0-1[9C6%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[30;126H[K[30;126H47,1[11C7%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param order:  Tensor[0m[30;126H[K[30;126H48,1[11C7%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :return: Variable[0m[30;126H[K[30;126H49,1[11C7%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        '''[0m[30;126H[K[30;126H50,1[11C8%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[30;126H[K[30;126H51,1[11C8%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Horder = [36mlist[0m(order)[30;126H[K[30;126H52,1[11C8%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[30;126H[K[30;126H53,1[11C9%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpadded_tensor[i, :] = (output[order.index(i)])[30;126H[K[30;126H54,1[11C9%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m padded_tensor[30;126H[K[30;126H55,1[10C10%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H56,0-1[8C10%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H57,0-1[8C10%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H58,0-1[8C11%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[30;126H[K[30;126H59,1[10C11%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[31m'''[0m[30;126H[K[30;126H60,1[10C12%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m                  [[0m[30;126H[K[30;126H61,1[10C12%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param x: batch_size * num_sentences, sequence_length][0m[30;126H[K[30;126H62,1[10C12%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param sequence_lens: Tensor of sequences lengths of each batch element[0m[30;126H[K[30;126H63,1[10C13%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :return:  [batch_size * num_sentences, word_hidden_size * 2][0m[30;126H[K[30;126H64,1[10C13%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        '''[0m[30;126H[K[30;126H65,1[10C14%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x, sequence_lens)[30;126H[K[30;126H66,1[10C14%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hword_embed = self.word_embeddings(word_sorted)[30;126H[K[30;126H67,1[10C14%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens), batch_first=[36mTrue[0m)[30;126H[K[30;126H68,1[10C15%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[30;126H[K[30;126H69,1[10C15%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[30;126H[K[30;126H70,1[10C16%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput = self._unsort_word_tensor(output, order)[30;126H[K[30;126H71,1[10C16%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidden_size*2_],  e.g.: 2 3 4[0m[30;126H[K[30;126H72,1[10C16%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hd1 = output.size()[[31m0[0m][30;126H[K[30;126H73,1[10C17%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hd2 = output.size()[[31m1[0m][30;126H[K[30;126H74,1[10C17%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hd3 = output.size()[[31m2[0m][30;126H[K[30;126H75,1[10C17%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hprojection = self.word_projection(output)[30;126H[K[30;126H76,1[10C18%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hprojection = self.bn(projection)[30;126H[K[30;126H77,1[10C18%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hprojection = self.word_proj_nonlinearity(projection).view(-[31m1[0m, self.word_context_size)  [34m# [2x3, 5][0m[30;126H[K[30;126H78,1[10C19%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hattention = torch.mm(projection, self.word_context)  [34m# [2x3, 1][0m[30;126H[K[30;126H79,1[10C19%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[30;126H[K[30;126H80,1[10C19%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).resize(d1 * d3, d2)[30;126H[K[30;126H81,1[10C20%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,3][0m[30;126H[K[30;126H82,1[10C20%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsentence_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).transpose([31m0[0m, [31m1[0m)[30;126H[K[30;126H83,1[10C21%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m sentence_tensor[30;126H[K[30;126H84,1[10C21%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H85,0-1[8C21%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# sentence_tensor = Variable(torch.zeros((output.size(0), output.size(2))).cuda())[0m[30;126H[K[30;126H86,1[10C22%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidden_size*2_][0m[30;126H[K[30;126H87,1[10C22%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# for word_ind in range(output.size(0)):[0m[30;126H[K[30;126H88,1[10C23%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     projection = self.word_projection(output[word_ind])[0m[30;126H[K[30;126H89,1[10C23%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     projection = self.bn(projection)[0m[30;126H[K[30;126H90,1[10C23%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     projection = self.word_proj_nonlinearity(projection)[0m[30;126H[K[30;126H91,1[10C24%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     # size: [sequence_length, word_context_size][0m[30;126H[K[30;126H92,1[10C24%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     attention = torch.mm(projection, self.word_context)  # [sequence_length, 1][0m[30;126H[K[30;126H93,1[10C25%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     attention = self.softmax(attention.transpose(0,1))  # [0m[30m[43mTODO[0m[30;126H[K[30;126H94,1[10C25%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     sentence_tensor[word_ind, :] = output[word_ind].transpose(1, 0).mv(attention.view(-1))[0m[30;126H[K[30;126H95,1[10C25%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# return sentence_tensor[0m[30;126H[K[30;126H96,1[10C26%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H97,0-1[8C26%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H98,0-1[8C26%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mclass[0m [36mSentenceToDocment[0m(nn.Module):[30;126H[K[30;126H99,1[10C27%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[31m"""[0m[30;126H[K[30;126H100,1[9C27%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    The word-to-sentence module.[0m[30;126H[K[30;126H101,1[9C28%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m    """[0m[30;126H[K[30;126H102,1[9C28%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H103,0-1[7C28%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36m__init__[0m(self, config):[30;126H[K[30;126H104,1[9C29%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[36msuper[0m(SentenceToDocment, self).__init__()[30;126H[K[30;126H105,1[9C29%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.projection_nonlinearity = nn.ReLU[30;126H[K[30;126H106,1[9C30%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.rnn = nn.GRU[30;126H[K[30;126H107,1[9C30%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.sentence_to_document = self.rnn(config.word_hidden_size*[31m2[0m, config.sentence_hidden_size,[30;126H[K[30;126H108,1[9C30%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;36Hbidirectional=[36mTrue[0m, dropout=config.dropout_rate, batch_first=[36mTrue[0m)[30;126H[K[30;126H109,1[9C31%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.sentence_context = nn.Parameter(torch.FloatTensor(config.sentence_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())[30;126H[K[30;126H110,1[9C31%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.sentence_projection = nn.Linear(config.sentence_hidden_size * [31m2[0m, config.sentence_context_size)[30;126H[K[30;126H111,1[9C32%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.sentence_context_size = config.sentence_context_size[30;126H[K[30;126H112,1[9C32%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.bn = nn.BatchNorm1d(num_features=config.num_sentences)[30;126H[K[30;126H113,1[9C32%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.sentence_proj_nonlinearity = self.projection_nonlinearity()[30;126H[K[30;126H114,1[9C33%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.softmax = nn.Softmax()[30;126H[K[30;126H115,1[9C33%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H116,0-1[7C33%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36m_sort_sentence_tensor[0m(self, padded_tensor, num_sentences_lens):[30;126H[K[30;126H117,1[9C34%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnum_sentences_lens, order = num_sentences_lens.sort([31m0[0m, descending=[36mTrue[0m)[30;126H[K[30;126H118,1[9C34%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpadded_tensor = padded_tensor[order][30;126H[K[30;126H119,1[9C35%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m padded_tensor, num_sentences_lens, order[30;126H[K[30;126H120,1[9C35%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H121,0-1[7C35%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36m_unsort_sentence_tensor[0m(self, output, order):[30;126H[K[30;126H122,1[9C36%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[31m'''[0m[30;126H[K[30;126H123,1[9C36%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H124,0-1[7C37%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[30;126H[K[30;126H125,1[9C37%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param order:  Tensor[0m[30;126H[K[30;126H126,1[9C37%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :return: Tensor[0m[30;126H[K[30;126H127,1[9C38%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        '''[0m[30;126H[K[30;126H128,1[9C38%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[30;126H[K[30;126H129,1[9C39%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Horder = [36mlist[0m(order)[30;126H[K[30;126H130,1[9C39%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[30;126H[K[30;126H131,1[9C39%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hpadded_tensor[i, :] = (output[order.index(i)])[30;126H[K[30;126H132,1[9C40%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m padded_tensor[30;126H[K[30;126H133,1[9C40%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H134,0-1[7C41%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mforward[0m(self, x, sent_hidden_stat,  num_sentences_lens):[30;126H[K[30;126H135,1[9C41%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[31m'''[0m[30;126H[K[30;126H136,1[9C41%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H137,0-1[7C42%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param x: [batch_size, num_sentences, word_hidden_size * 2], Variable[0m[30;126H[K[30;126H138,1[9C42%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param num_sentences_lens: Tensor[0m[30;126H[K[30;126H139,1[9C42%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :return: [batch_size, sentence_hidden_size*2][0m[30;126H[K[30;126H140,1[9C43%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        '''[0m[30;126H[K[30;126H141,1[9C43%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsentence_sorted, num_sentences_lens, order = self._sort_sentence_tensor(x, num_sentences_lens)[30;126H[K[30;126H142,1[9C44%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hpacked = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_sentences_lens), batch_first=[36mTrue[0m)[30;126H[K[30;126H143,1[9C44%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput, (hidden, cell) = self.sentence_to_document(packed, sent_hidden_stat)[30;126H[K[30;126H144,1[9C44%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[30;126H[K[30;126H145,1[9C45%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput = self._unsort_sentence_tensor(output, order)  [34m# Variable[0m[30;126H[K[30;126H146,1[9C45%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hd1 = output.size()[[31m0[0m][30;126H[K[30;126H147,1[9C46%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hd2 = output.size()[[31m1[0m][30;126H[K[30;126H148,1[9C46%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hd3 = output.size()[[31m2[0m][30;126H[K[30;126H149,1[9C46%[29;1H[34h[?25h[?25l[1;29r[1;1H[2M[1;30r[28;9Hprojection = self.sentence_proj_nonlinearity(self.bn(self.sentence_projection(output))).view(-[31m1[0m, self.sentence_context_size)  [34m# [2*3, 55[29;1H][0m[30;126H[K[30;126H150,1[9C47%[28;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hattention = torch.mm(projection, self.sentence_context)  [34m# [2x3, 1][0m[30;126H[K[30;126H151,1[9C47%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[30;126H[K[30;126H152,1[9C48%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).resize(d1 * d3, d2)[30;126H[K[30;126H153,1[9C48%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,3][0m[30;126H[K[30;126H154,1[9C49%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hdocument_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).transpose([31m0[0m, [31m1[0m)[30;126H[K[30;126H155,1[9C49%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m document_tensor[30;126H[K[30;126H156,1[9C49%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H157,0-1[7C50%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# for sentence_ind in range(output.size(0)):[0m[30;126H[K[30;126H158,1[9C50%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     projection = self.sentence_projection(output[sentence_ind])[0m[30;126H[K[30;126H159,1[9C50%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     projection = self.bn(projection)[0m[30;126H[K[30;126H160,1[9C51%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     projection = self.sentence_proj_nonlinearity(projection)[0m[30;126H[K[30;126H161,1[9C51%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     attention = torch.mm(projection, self.sentence_context)[0m[30;126H[K[30;126H162,1[9C52%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     attention = self.softmax(attention.transpose(1, 0))[0m[30;126H[K[30;126H163,1[9C52%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     document_tensor[sentence_ind, :] = output[sentence_ind].transpose(1, 0).mv(attention.view(-1))[0m[30;126H[K[30;126H164,1[9C52%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# return document_tensor[0m[30;126H[K[30;126H165,1[9C53%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H166,0-1[7C53%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[30;126H[K[30;126H167,1[9C54%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[30;126H[K[30;126H168,1[9C54%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H169,0-1[7C54%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H170,0-1[7C55%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[33mclass[0m [36mHAN[0m(nn.Module):[30;126H[K[30;126H171,1[9C55%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H172,0-1[7C56%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36m__init__[0m(self, config):[30;126H[K[30;126H173,1[9C56%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[36msuper[0m(HAN, self).__init__()[30;126H[K[30;126H174,1[9C56%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.num_class = config.num_class[30;126H[K[30;126H175,1[9C57%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;2H[34m#       self.dropout = nn.Dropout(p=config.dropout_rate)[0m[30;126H[K[30;126H176,1[9C57%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.word_to_sentence = WordToSentence(config)[30;126H[K[30;126H177,1[9C57%[29;1H[34h[?25h[?25l[1;29r[1;1H[2M[1;30r[28;9Hself.sentence_to_document = SentenceToDocment(config)[29;9Hself.config = config[30;126H[K[30;126H178,1[9C58%[28;1H[34h[?25h[?25l[30;128H9[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.is_training = [36mTrue[0m[30;126H[K[30;126H180,1[9C58%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# set up the intermediate output step, if required[0m[30;126H[K[30;126H181,1[9C59%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#self.intermediate = False[0m[30;126H[K[30;126H182,1[9C59%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#self.intermediate_output_nonlinearity = nn.ELU[0m[30;126H[K[30;126H183,1[9C60%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#if self.intermediate:[0m[30;126H[K[30;126H184,1[9C60%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[34m# self.intermediate_output = nn.Linear(config.sentence_hidden_size * 2, config.sentence_hidden_size * 2)[0m[30;126H[K[30;126H185,1[9C60%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;14H[34m#self.intermediate_nonlinearity = self.intermediate_output_nonlinearity()[0m[30;126H[K[30;126H186,1[9C61%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H187,0-1[7C61%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# final transformation to class weightings[0m[30;126H[K[30;126H188,1[9C62%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num_class)[30;126H[K[30;126H189,1[9C62%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H190,0-1[7C62%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mget_sequence_lens[0m(self, x):[30;126H[K[30;126H191,1[9C63%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsequence_lens = [][30;126H[K[30;126H192,1[9C63%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsequence_length = x.size()[[31m2[0m][30;126H[K[30;126H193,1[9C64%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hx = x.view(-[31m1[0m, sequence_length)[30;126H[K[30;126H194,1[9C64%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m line [33min[0m x:[30;126H[K[30;126H195,1[9C64%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hn = [31m0[0m[30;126H[K[30;126H196,1[9C65%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hidx = [36mlen[0m(line) - [31m1[0m[30;126H[K[30;126H197,1[9C65%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mwhile[0m idx >= [31m0[0m:[30;126H[K[30;126H198,1[9C66%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17H[33mif[0m [36mint[0m(line[idx]) != [31m1[0m: [34m#<pad>[0m[30;126H[K[30;126H199,1[9C66%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;21H[33mbreak[0m[30;126H[K[30;126H200,1[9C66%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hn += [31m1[0m[30;126H[K[30;126H201,1[9C67%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hidx -= [31m1[0m[30;126H[K[30;126H202,1[9C67%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m n == [36mlen[0m(line):[30;126H[K[30;126H203,1[9C67%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hsequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[30;126H[K[30;126H204,1[9C68%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33melse[0m:[30;126H[K[30;126H205,1[9C68%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hsequence_lens.append(([36mlen[0m(line) - n))[30;126H[K[30;126H206,1[9C69%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m torch.Tensor(sequence_lens).cuda()[30;126H[K[30;126H207,1[9C69%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H208,0-1[7C69%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mis_padded_list[0m(self, seq):[30;126H[K[30;126H209,1[9C70%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hflag = [36mTrue[0m[30;126H[K[30;126H210,1[9C70%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m w [33min[0m seq:[30;126H[K[30;126H211,1[9C71%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mif[0m w != [31m1[0m: [34m#<pad>[0m[30;126H[K[30;126H212,1[9C71%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hflag = [36mFalse[0m[30;126H[K[30;126H213,1[9C71%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17H[33mbreak[0m[30;126H[K[30;126H214,1[9C72%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m flag[30;126H[K[30;126H215,1[9C72%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H216,0-1[7C73%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mget_num_sentences_lens[0m(self, x):[30;126H[K[30;126H217,1[9C73%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[31m'''[0m[30;126H[K[30;126H218,1[9C73%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H219,0-1[7C74%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param x: batch_size, num_sentences, sequence_length], Tensor[0m[30;126H[K[30;126H220,1[9C74%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :return: num_sentences_lens: length: batch_size, Tensor[0m[30;126H[K[30;126H221,1[9C75%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        '''[0m[30;126H[K[30;126H222,1[9C75%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnum_sentences_lens = [][30;126H[K[30;126H223,1[9C75%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mfor[0m matrix [33min[0m x:[30;126H[K[30;126H224,1[9C76%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hn = [31m0[0m[30;126H[K[30;126H225,1[9C76%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hidx = [36mlen[0m(matrix) - [31m1[0m[30;126H[K[30;126H226,1[9C76%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H[33mwhile[0m idx >= [31m0[0m:[30;126H[K[30;126H227,1[9C77%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17H[33mif[0m [33mnot[0m self.is_padded_list(matrix[idx]):[30;126H[K[30;126H228,1[9C77%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;21H[33mbreak[0m[30;126H[K[30;126H229,1[9C78%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hn += [31m1[0m[30;126H[K[30;126H230,1[9C78%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;17Hidx -= [31m1[0m[30;126H[K[30;126H231,1[9C78%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13Hnum_sentences_lens.append(([36mlen[0m(matrix) - n))[30;126H[K[30;126H232,1[9C79%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m torch.Tensor(num_sentences_lens).cuda()[30;126H[K[30;126H233,1[9C79%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H234,0-1[7C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mforward[0m(self, x):[30;126H[K[30;126H235,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#[0m[30;126H[K[30;126H236,1[9C80%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[31m'''[0m[30;126H[K[30;126H237,1[9C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H238,0-1[7C81%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch.Tensor[0m[30;126H[K[30;126H239,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        :return:[0m[30;126H[K[30;126H240,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[31m        '''[0m[30;126H[K[30;126H241,1[9C82%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hbatch_size = x.size()[[31m0[0m][30;126H[K[30;126H242,1[9C83%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnum_sentences = x.size()[[31m1[0m][30;126H[K[30;126H243,1[9C83%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsequence_length = x.size()[[31m2[0m][30;126H[K[30;126H244,1[9C83%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batch_size)[30;126H[K[30;126H245,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsequence_lens = self.get_sequence_lens(x.data)[30;126H[K[30;126H246,1[9C84%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hnum_sentences_lens = self.get_num_sentences_lens(x.data)[30;126H[K[30;126H247,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentences, sequence_length][0m[30;126H[K[30;126H248,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [34m# [batch_size * num_sentences, word_hidden_size*2][0m[30;126H[K[30;126H249,1[9C85%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hx = x.resize(batch_size, num_sentences, self.config.word_hidden_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[30;126H[K[30;126H250,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hself.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  [34m# [batch_size, sentence_hidden_size*2][0m[30;126H[K[30;126H251,1[9C86%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# dropout or not[0m[30;126H[K[30;126H252,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;1H[34m#        self.document_tensor = self.dropout(self.document_tensor)[0m[30;126H[K[30;126H253,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#[0m[30;126H[K[30;126H254,1[9C87%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#if self.intermediate:[0m[30;126H[K[30;126H255,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#    self.document_tensor = self.intermediate_output(self.document_tensor)[0m[30;126H[K[30;126H256,1[9C88%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#    self.document_tensor = self.intermediate_nonlinearity(self.document_tensor)[0m[30;126H[K[30;126H257,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H258,0-1[7C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Houtputs = self.fc(self.document_tensor)[30;126H[K[30;126H259,1[9C89%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H260,0-1[7C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m outputs[30;126H[K[30;126H261,1[9C90%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H262,0-1[7C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36minit_rnn_hidden[0m(self, batch_size):[30;126H[K[30;126H263,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hword_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size*self.config.num_sentences, self.config.word_hidden_size))[30;126H[K[30;126H264,1[9C91%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9Hsent_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size, self.config.sentence_hidden_size))[30;126H[K[30;126H265,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m word_hidden_stat.cuda(), sent_hidden_stat.cuda()[30;126H[K[30;126H266,1[9C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H267,0-1[7C92%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[34m# [0m[30m[43mTODO[0m[30;126H[K[30;126H268,1[9C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[30;126H[K[30;126H269,1[9C93%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# for name, v in self.named_parameters():[0m[30;126H[K[30;126H270,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m#     print(name, v)[0m[30;126H[K[30;126H271,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# a = input("21321321312")[0m[30;126H[K[30;126H272,1[9C94%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[34m# return torch.optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)[0m[30;126H[K[30;126H273,1[9C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[30;126H[K[30;126H274,0-1[7C95%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;9H[33mreturn[0m torch.optim.Adam([[30;126H[K[30;126H275,1[9C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H{[31m'params'[0m: self.word_to_sentence.word_to_sentence.parameters()},[30;126H[K[30;126H276,1[9C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H{[31m'params'[0m: self.word_to_sentence.word_context},[30;126H[K[30;126H277,1[9C96%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H{[31m'params'[0m: self.word_to_sentence.word_projection.parameters()},[30;126H[K[30;126H278,1[9C97%[29;1H[34h[?25h[?25l[1;29r[29;1H
[1;30r[29;13H{[31m'params'[0m: self.word_to_sentence.bn.parameters()},[30;126H[K[30;126H279,1[9C97%[29;1H[34h[?25h[?25l[30;128H8[28;1H[34h[?25h[?25l[30;128H7[27;1H[34h[?25h[?25l[30;128H6[26;1H[34h[?25h[?25l[30;128H5[25;1H[34h[?25h[?25l[30;128H4,0-1[24;1H[34h[?25h[?25l[30;128H3,1  [23;1H[34h[?25h[?25l[30;128H2[22;1H[34h[?25h[?25l[30;128H1[21;1H[34h[?25h[?25l[30;128H0[20;1H[34h[?25h[?25l[30;127H69[19;1H[34h[?25h[?25l[30;128H8[18;1H[34h[?25h[?25l[30;128H7,0-1[17;1H[34h[?25h[?25l[30;128H6,1  [16;1H[34h[?25h[?25l[30;128H5[15;1H[34h[?25h[?25l[30;128H4[14;1H[34h[?25h[?25l[30;128H3[13;1H[34h[?25h[?25l[30;128H2,0-1[12;1H[34h[?25h[?25l[30;128H1,1  [11;1H[34h[?25h[?25l[30;128H0,0-1[10;1H[34h[?25h[?25l[30;127H59,1  [9;1H[34h[?25h[?25l[30;128H8,0-1[8;1H[34h[?25h[?25l[30;128H7,1  [7;1H[34h[?25h[?25l[30;128H6[6;1H[34h[?25h[?25l[30;128H5[5;1H[34h[?25h[?25l[30;128H4[4;1H[34h[?25h[?25l[30;128H3[3;1H[34h[?25h[?25l[30;128H2[2;1H[34h[?25h[?25l[30;128H1[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hx = x.resize(batch_size, num_sentences, self.config.word_hidden_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[30;126H[K[30;126H250,1[9C97%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [34m# [batch_size * num_sentences, word_hidden_size*2][0m[30;126H[K[30;126H249,1[9C96%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentences, sequence_length][0m[30;126H[K[30;126H248,1[9C96%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hnum_sentences_lens = self.get_num_sentences_lens(x.data)[30;126H[K[30;126H247,1[9C96%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hsequence_lens = self.get_sequence_lens(x.data)[30;126H[K[30;126H246,1[9C95%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batch_size)[30;126H[K[30;126H245,1[9C95%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hsequence_length = x.size()[[31m2[0m][30;126H[K[30;126H244,1[9C94%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hnum_sentences = x.size()[[31m1[0m][30;126H[K[30;126H243,1[9C94%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hbatch_size = x.size()[[31m0[0m][30;126H[K[30;126H242,1[9C94%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m        '''[0m[30;126H[K[30;126H241,1[9C93%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m        :return:[0m[30;126H[K[30;126H240,1[9C93%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch.Tensor[0m[30;126H[K[30;126H239,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H238,0-1[7C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[31m'''[0m[30;126H[K[30;126H237,1[9C92%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[34m#[0m[30;126H[K[30;126H236,1[9C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mdef[0m [36mforward[0m(self, x):[30;126H[K[30;126H235,1[9C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H234,0-1[7C91%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mreturn[0m torch.Tensor(num_sentences_lens).cuda()[30;126H[K[30;126H233,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hnum_sentences_lens.append(([36mlen[0m(matrix) - n))[30;126H[K[30;126H232,1[9C90%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hidx -= [31m1[0m[30;126H[K[30;126H231,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hn += [31m1[0m[30;126H[K[30;126H230,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;21H[33mbreak[0m[30;126H[K[30;126H229,1[9C89%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17H[33mif[0m [33mnot[0m self.is_padded_list(matrix[idx]):[30;126H[K[30;126H228,1[9C88%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33mwhile[0m idx >= [31m0[0m:[30;126H[K[30;126H227,1[9C88%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hidx = [36mlen[0m(matrix) - [31m1[0m[30;126H[K[30;126H226,1[9C87%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hn = [31m0[0m[30;126H[K[30;126H225,1[9C87%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mfor[0m matrix [33min[0m x:[30;126H[K[30;126H224,1[9C87%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hnum_sentences_lens = [][30;126H[K[30;126H223,1[9C86%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m        '''[0m[30;126H[K[30;126H222,1[9C86%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m        :return: num_sentences_lens: length: batch_size, Tensor[0m[30;126H[K[30;126H221,1[9C85%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;1H[31m        :param x: batch_size, num_sentences, sequence_length], Tensor[0m[30;126H[K[30;126H220,1[9C85%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H219,0-1[7C85%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[31m'''[0m[30;126H[K[30;126H218,1[9C84%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mdef[0m [36mget_num_sentences_lens[0m(self, x):[30;126H[K[30;126H217,1[9C84%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H216,0-1[7C83%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mreturn[0m flag[30;126H[K[30;126H215,1[9C83%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17H[33mbreak[0m[30;126H[K[30;126H214,1[9C83%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hflag = [36mFalse[0m[30;126H[K[30;126H213,1[9C82%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33mif[0m w != [31m1[0m: [34m#<pad>[0m[30;126H[K[30;126H212,1[9C82%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mfor[0m w [33min[0m seq:[30;126H[K[30;126H211,1[9C82%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hflag = [36mTrue[0m[30;126H[K[30;126H210,1[9C81%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;5H[33mdef[0m [36mis_padded_list[0m(self, seq):[30;126H[K[30;126H209,1[9C81%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[30;126H[K[30;126H208,0-1[7C80%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mreturn[0m torch.Tensor(sequence_lens).cuda()[30;126H[K[30;126H207,1[9C80%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hsequence_lens.append(([36mlen[0m(line) - n))[30;126H[K[30;126H206,1[9C80%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33melse[0m:[30;126H[K[30;126H205,1[9C79%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hsequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[30;126H[K[30;126H204,1[9C79%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33mif[0m n == [36mlen[0m(line):[30;126H[K[30;126H203,1[9C78%[1;1H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hidx -= [31m1[0m[30;126H[K[30;126H202,1[9C78%[1;1H[34h[?25h[?25l[30;128H3[2;1H[34h[?25h[?25l[30;128H4[3;1H[34h[?25h[?25l[30;128H5[4;1H[34h[?25h[?25l[30;128H6[5;1H[34h[?25h[?25l[30;128H7[6;1H[34h[?25h[?25l[30;128H8,0-1[7;1H[34h[?25h[?25l[30;128H9,1  [8;1H[34h[?25h[?25l[30;127H10[9;1H[34h[?25h[?25l[30;128H1[10;1H[34h[?25h[?25l[30;128H2[11;1H[34h[?25h[?25l[30;128H3[12;1H[34h[?25h[?25l[30;128H2[11;1H[34h[?25h[?25l[30;130H2[11;2H[34h[?25h[?25l[30;130H3[11;3H[34h[?25h[?25l[30;130H4[11;4H[34h[?25h[?25l[30;130H5[11;5H[34h[?25h[?25l[30;130H6[11;6H[34h[?25h[?25l[30;130H7[11;7H[34h[?25h[?25l[30;130H8[11;8H[34h[?25h[?25l[30;130H9[11;9H[34h[?25h[?25l[30;130H10[11;10H[34h[?25h[?25l[30;131H1[11;11H[34h[?25h[?25l[30;131H2[11;12H[34h[?25h[?25l[30;131H3[11;13H[34h[?25h[?25l[30;131H4[11;14H[34h[?25h[?25l[30;131H5[11;15H[34h[?25h[?25l[30;131H6[11;16H[34h[?25h[?25l[30;131H7[11;17H[34h[?25h[?25l[30;131H8[11;18H[34h[?25h[?25l[30;131H9[11;19H[34h[?25h[?25l[30;130H20[11;20H[34h[?25h[?25l[30;131H1[11;21H[34h[?25h[?25l[30;131H2[11;22H[34h[?25h[?25l[30;131H1[11;21H[34h[?25h[?25l[30;130H1 [11;1H[34h[?25h[?25l[30;1H[1m-- INSERT --[0m[30;126H[K[30;126H212,1[9C78%[11;1H[34h[?25h[?25l[30;130H2[11;2H[34h[?25h[?25l[30;130H3[11;3H[34h[?25h[?25l[30;130H4[11;4H[34h[?25h[?25l[30;130H7[11;7H[34h[?25h[?25l[30;130H8[11;8H[34h[?25h[?25l[30;130H9[11;9H[34h[?25h[?25l[30;130H10[11;10H[34h[?25h[?25l[30;131H1[11;11H[34h[?25h[?25l[30;131H2[11;12H[34h[?25h[?25l[30;131H3[11;13H[34h[?25h[?25l[30;131H4[11;14H[34h[?25h[?25l[30;131H5[11;15H[34h[?25h[?25l[30;131H6[11;16H[34h[?25h[?25l[30;131H7[11;17H[34h[?25h[?25l[30;131H8[11;18H[34h[?25h[?25l[30;131H9[11;19H[34h[?25h[?25l[30;130H20[11;20H[34h[?25h[?25l[30;131H1[11;21H[34h[?25h[?25l[30;131H2[11;22H[34h[?25h[?25l: [34m#<pad>[0m[11;29H[K[30;131H1[11;21H[34h[?25h[?25l[31m0[0m: [34m#<pad>[0m[30;131H2[11;22H[34h[?25h[?25l[30;128H1[10;22H[34h[?25h[?25l[30;128H0,20[9;20H[34h[?25h[?25l[30;127H09,22[8;22H[34h[?25h[?25l[30;128H8,1 [7;1H[34h[?25h[?25l[30;128H7,22[6;22H[34h[?25h[?25l[30;128H6[5;22H[34h[?25h[?25l[30;128H5,18[4;18H[34h[?25h[?25l[30;128H4,22[3;22H[34h[?25h[?25l[30;128H3[2;22H[34h[?25h[?25l[30;128H2[1;22H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17Hn += [31m1[0m[30;126H[K[30;126H201,22[8C78%[1;22H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;21H[33mbreak[0m[30;126H[K[30;126H200,22[8C77%[1;22H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;17H[33mif[0m [36mint[0m(line[idx]) != [31m1[0m: [34m#<pad>[0m[30;126H[K[30;126H199,22[8C77%[1;22H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13H[33mwhile[0m idx >= [31m0[0m:[30;126H[K[30;126H198,22[8C76%[1;22H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;13Hidx = [36mlen[0m(line) - [31m1[0m[30;126H[K[30;126H197,22[8C76%[1;22H[46m([0mline[46m)[34h[?25h[?25l[1;29r[0m[1;1H[L[1;30r[1;13Hn = [31m0[0m[30;126H[K[30;126H196,18[8C76%[2;22H(line)[1;18H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9H[33mfor[0m line [33min[0m x:[30;126H[K[30;126H195,22[8C75%[1;22H[34h[?25h[?25l[1;29r[1;1H[L[1;30r[1;9Hx = x.view(-[31m1[0m, sequence_length)[30;126H[K[30;126H194,22[8C75%[1;22H[34h[?25h[?25l[30;128H5[2;22H[34h[?25h[?25l[30;128H6,18[3;18H[34h[?25h[?25l[4;22H[46m([0mline[46m)[0m[30;128H7,22[4;22H[34h[?25h[?25l(line)[30;128H8[5;22H[34h[?25h[?25l[30;128H9[6;22H[34h[?25h[?25l[1C[46m([9C)[0m[30;131H3[6;23H[34h[?25h[?25l[30;126H[K[30;126H199,24[8C75%[6;24H[34h[?25h[?25l([9C)[30;131H5[6;25H[34h[?25h[?25l[30;131H6[6;26H[34h[?25h[?25l[30;131H7[6;27H[34h[?25h[?25le[46m[[0midx[46m][0m[30;131H8[6;28H[34h[?25h[?25l[30;126H[K[30;126H199,29[8C75%[6;29H[34h[?25h[?25l[idx][30;130H30[6;30H[34h[?25h[?25l[30;131H1[6;31H[34h[?25h[?25l[46m[[0midx[46m][0m[30;131H2[6;32H[34h[?25h[?25l[6;23H[46m([0mline[idx][46m)[0m[30;131H3[6;33H[34h[?25h[?25l[30;126H[K[30;126H199,34[8C75%[6;34H[34h[?25h[?25l[6;23H([9C)[30;131H5[6;35H[34h[?25h[?25l[30;131H6[6;36H[34h[?25h[?25l[30;131H7[6;37H[34h[?25h[?25l[30;131H8[6;38H[34h[?25h[?25l[30;131H9[6;39H[34h[?25h[?25l: [34m#<pad>[0m[6;46H[K[30;131H8[6;38H[34h[?25h[?25l[31m0[0m: [34m#<pad>[0m[30;131H9[6;39H[34h[?25h[?25l: [34m#<pad>[0m[6;46H[K[30;131H8[6;38H[34h[?25h[?25l[31m1[0m: [34m#<pad>[0m[30;131H9[6;39H[34h[?25h[?25l[30;126H200,26[7;26H[34h[?25h[?25l[30;128H1,23[8;23H[34h[?25h[?25l[30;128H2,25[9;25H[34h[?25h[?25l[30;128H3,31[10;31H[34h[?25h[?25l[11;37H[46m([1C)[0m[30;128H4,39[11;39H[34h[?25h[?25l([1C)[30;128H5,18[12;18H[34h[?25h[?25l[13;38H[46m([13C)[0m[30;126H[K[30;126H206,39[8C75%[13;39H[34h[?25h[?25l([13C)[30;128H7[14;39H[34h[?25h[?25l[30;128H8,1 [15;1H[34h[?25h[?25l[30;128H9,35[16;35H[34h[?25h[?25l[30;127H10,20[17;20H[34h[?25h[?25l[30;128H1,22[18;22H[34h[?25h[?25l[30;128H2,30[19;30H[34h[?25h[?25l[30;130H29[19;29H[34h[?25h[?25l[30;131H8[19;28H[34h[?25h[?25l[30;131H7[19;27H[34h[?25h[?25l[30;131H6[19;26H[34h[?25h[?25l[30;131H5[19;25H[34h[?25h[?25l[30;131H4[19;24H[34h[?25h[?25l[30;131H3[19;23H[34h[?25h[?25l[30;131H2[19;22H[34h[?25h[?25l: [34m#<pad>[0m[19;29H[K[30;131H1[19;21H[34h[?25h[?25l[31m1[0m: [34m#<pad>[0m[30;131H2[19;22H[34h[?25h[?25l:: [34m#<pad>[0m[30;131H3[19;23H[34h[?25h[?25l [34m#<pad>[0m[19;30H[K[30;131H2[19;22H[34h[?25h[30;1H[K[19;21H[?25l[30;126H212,21[8C75%[19;21H[34h[?25h[?25l[30;126H[K[30;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l"models/hierarchical.py" 285L, 13086C written
[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ a[Kscfee[K[K[Kreen -r HAN-12-6-save 
)0[?1049h[4l[?1h=[0m(B[1;30r[H[J[H[J[4Cbatch_size = [31m64[2C[34m# 64 or larger if has cuda[2;5H[39mstep = [31m10000[C[39m// batch_size   [34m# 3000 // batch_size if has cuda[3;5H[39mnum_workers = [31m1
[34m#    vocab_size = 241684
#    vocab_size = 338209[6;5H[39mvocab_size = [31m0[7;5H[39mmin_count = [31m5[8;5H[39mmax_text_len = [31m2000[9;5H[39membedding_size = [31m256[20D
[39mnum_class = [31m452
[34m#    num_class = 321
[39m"config.py" 182L, 5085C written
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ CUDA_VISIBLE_DEVICES=0 python multitrain.py --model-id 4 --is-save y
Using TensorFlow backend.
epoch num 6
loading data...
max sentence length:  42583
total vocab size 691360
load word2index
(120000, 55, 80)
save HAN...
(120000, 55, 80) (120000, 452)
120000
data loaded
config vocab size: 219083
pretrain...
0.002212389370825337
training...
lr: 0.001 lr2: 0.0
^[:   ^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[A^[[A^CProcess Process-1:
Traceback (most recent call last):
  File "/home/dyhu/.pyenv/versions/3.6.1/lib/python3.6/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/home/dyhu/.pyenv/versions/3.6.1/lib/python3.6/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 34, in _worker_loop
    r = index_queue.get()
  File "/home/dyhu/.pyenv/versions/3.6.1/lib/python3.6/multiprocessing/queues.py", line 343, in get
    res = self._reader.recv_bytes()
  File "/home/dyhu/.pyenv/versions/3.6.1/lib/python3.6/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/home/dyhu/.pyenv/versions/3.6.1/lib/python3.6/multiprocessing/connection.py", line 407, in _recv_bytes
    buf = self._recv(4)
  File "/home/dyhu/.pyenv/versions/3.6.1/lib/python3.6/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
^C^C^CTraceback (most recent call last):
  File "multitrain.py", line 232, in <module>
    main(args.model_id, use_element, args.is_save)
  File "multitrain.py", line 155, in main
    loss.backward()
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/autograd/variable.py", line 156, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, retain_variables)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/autograd/__init__.py", line 98, in backward
    variables, grad_variables, retain_graph)
KeyboardInterrupt
^Cclear
cd  cddyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ clear
[H[H[Jdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ cd[K[Kgggggg[?1l>[30;1H
[?1049l[screen is terminating]
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ [Kdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ clear
[H[Jdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ vim models/hierarchical.ppy 
[?1049h[?1h=[1;42r[34l[34h[?25h[23m[24m[0m[H[J[?25l[42;1H"models/hierarchical.py" 285L, 13086C[1;1H[35mimport[0m numpy [33mas[0m np
[35mimport[0m os
[35mimport[0m torch
[35mimport[0m torch.nn [33mas[0m nn
[35mfrom[0m torch.autograd [35mimport[0m Variable
[35mfrom[0m torch [35mimport[0m optim
[35mimport[0m torch.nn.functional [33mas[0m F

[35mfrom[0m torch.nn.utils.rnn [35mimport[0m pack_padded_sequence, pad_packed_sequenn[10;1Hce

[33mclass[0m [36mWordToSentence[0m(nn.Module):
    [31m"""
    The wordacter to word-level module.
    """[0m
    [33mdef[0m [36m__init__[0m(self, config):[17;9H[36msuper[0m(WordToSentence, self).__init__()[18;9Hself.word_embeddings = nn.Embedding(num_embeddings=config.vocaa[19;1Hb_size,[20;45Hembedding_dim=config.embedd[21;1Hding_size)[22;9Hself.projection_nonlinearity = nn.ReLU[23;9Hself.rnn = nn.GRU[24;9Hself.word_to_sentence = self.rnn(config.embedding_size, configg[25;1H.word_hidden_size, bidirectional=[36mTrue[0m,[26;33Hbatch_first=[36mTrue[0m, dropout=config.dropoo[27;1Hut_rate)[29;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.wordd[30;1H_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())  [34m# [0m[30m[43mTODO[0m[34m 改变初始化方式[0m[31;9Hself.word_projection = nn.Linear(config.word_hidden_size * [31m2[0m,  [32;1Hconfig.word_context_size)[33;9Hself.word_context_size = config.word_context_size[34;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[35;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[36;9Hself.softmax = nn.Softmax()[37;9H[33mif[0m os.path.exists(config.embedding_path) [33mand[0m config.is_traininn[38;1Hg [33mand[0m config.is_pretrain:[39;13H[36mprint[0m([31m"pretrain..."[0m)[40;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(npp[41;1H.load(config.embedding_path)))[42;53H1,1[11CTop[1;1H[34h[?25h[?25l[42;53H2[2;1H[34h[?25h[?25l[42;53H3[3;1H[34h[?25h[?25l[42;53H4[4;1H[34h[?25h[?25l[42;53H5[5;1H[34h[?25h[?25l[42;53H6[6;1H[34h[?25h[?25l[42;53H7[7;1H[34h[?25h[?25l[42;53H8,0-1[8;1H[34h[?25h[?25l[42;53H9,1  [9;1H[34h[?25h[?25l[42;53H10,0-1[11;1H[34h[?25h[?25l[42;54H1,1  [12;1H[34h[?25h[?25l[42;54H2[13;1H[34h[?25h[?25l[42;54H3[14;1H[34h[?25h[?25l[42;54H4[15;1H[34h[?25h[?25l[42;54H5[16;1H[34h[?25h[?25l[42;54H6[17;1H[34h[?25h[?25l[42;54H7[18;1H[34h[?25h[?25l[42;54H8[20;1H[34h[?25h[?25l[42;54H9[22;1H[34h[?25h[?25l[42;53H20[23;1H[34h[?25h[?25l[42;54H1[24;1H[34h[?25h[?25l[42;54H2[26;1H[34h[?25h[?25l[42;54H3,0-1[28;1H[34h[?25h[?25l[42;54H4,1  [29;1H[34h[?25h[?25l[42;54H5[31;1H[34h[?25h[?25l[42;54H6[33;1H[34h[?25h[?25l[42;54H7[34;1H[34h[?25h[?25l[42;54H8[35;1H[34h[?25h[?25l[42;54H9[36;1H[34h[?25h[?25l[42;53H30[37;1H[34h[?25h[?25l[42;54H1[39;1H[34h[?25h[?25l[42;54H2[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;1H[K[42;53H33,0-1[9C0%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H34,1[11C0%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[41;1H=weight_decay)[42;53H[K[42;53H35,1[11C1%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H36,0-1[9C1%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[42;53H[K[42;53H37,1[11C2%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[42;53H[K[42;53H38,1[11C2%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# print(type(sequence_lens), type(order))[0m[42;53H[K[42;53H39,1[11C3%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTenn[41;1Hsor' >[0m[42;53H[K[42;53H40,1[11C3%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hpadded_tensor = padded_tensor[order][42;53H[K[42;53H41,1[11C3%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor, sequence_lens, order[42;53H[K[42;53H42,1[11C4%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H43,0-1[9C4%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_unsort_word_tensor[0m(self, output, order):[42;53H[K[42;53H44,1[11C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H45,1[11C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H46,0-1[9C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[42;53H[K[42;53H47,1[11C6%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param order:  Tensor
        :return: Variable[0m[42;53H[K[42;53H48,1[11C6%[40;1H[34h[?25h[?25l[42;54H9[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H50,1[11C7%[40;1H[34h[?25h[?25l[42;54H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Horder = [36mlist[0m(order)[42;53H[K[42;53H52,1[11C7%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[42;53H[K[42;53H53,1[11C7%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13Hpadded_tensor[i, :] = (output[order.index(i)])[41;9H[33mreturn[0m padded_tensor[42;53H[K[42;53H54,1[11C8%[40;1H[34h[?25h[?25l[42;54H5[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[42;53H[K[42;53H56,0-1[9C8%[40;1H[34h[?25h[?25l[42;54H7[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H58,0-1[9C9%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[41;9H[31m'''[0m[42;53H[K[42;53H59,1[11C9%[40;1H[34h[?25h[?25l[42;53H60[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m                  [
        :param x: batch_size * num_sentences, sequence_length][0m[42;53H[K[42;53H61,1[10C10%[40;1H[34h[?25h[?25l[42;54H2[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param sequence_lens: Tensor of sequences lengths of each batcc[41;1Hh element[0m[42;53H[K[42;53H63,1[10C10%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return:  [batch_size * num_sentences, word_hidden_size * 2][0m[42;53H[K[42;53H64,1[10C11%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H65,1[10C11%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x,  [41;1Hsequence_lens)[42;53H[K[42;53H66,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hword_embed = self.word_embeddings(word_sorted)[42;53H[K[42;53H67,1[10C12%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens),,[41;1H batch_first=[36mTrue[0m)[42;53H[K[42;53H68,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[42;53H[K[42;53H69,1[10C13%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H70,1[10C13%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = self._unsort_word_tensor(output, order)[41;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidde[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H71,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[40;1H        [34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_],  e.g.: 2 3 4[0m[42;53H[K[42;53H72,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd1 = output.size()[[31m0[0m][42;53H[K[42;53H73,1[10C14%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H74,1[10C15%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H75,1[10C15%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_projection(output)[41;9Hprojection = self.bn(projection)[42;53H[K[42;53H76,1[10C16%[40;1H[34h[?25h[?25l[42;54H7[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_proj_nonlinearity(projection).view(-[31m1[0m,  [41;1Hself.word_context_size)  [34m# [2x3, 5][0m[42;53H[K[42;53H78,1[10C16%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = torch.mm(projection, self.word_context)  [34m# [2x3, 11[41;1H][0m[42;53H[K[42;53H79,1[10C17%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[42;53H[K[42;53H80,1[10C18%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[41;1Hize(d1 * d3, d2)[42;53H[K[42;53H81,1[10C18%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[41;1H][0m[42;53H[K[42;53H82,1[10C19%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hsentence_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H83,1[10C20%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m sentence_tensor[42;53H[K[42;53H84,1[10C20%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H85,0-1[8C20%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# sentence_tensor = Variable(torch.zeros((output.size(0), outpp[41;1Hut.size(2))).cuda())[0m[42;53H[K[42;53H86,1[10C21%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_][0m[42;53H[K[42;53H87,1[10C22%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# for word_ind in range(output.size(0)):[0m[42;53H[K[42;53H88,1[10C22%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.word_projection(output[word_ind])[0m[42;53H[K[42;53H89,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.bn(projection)[0m[42;53H[K[42;53H90,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.word_proj_nonlinearity(projection)[0m[42;53H[K[42;53H91,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     # size: [sequence_length, word_context_size][0m[42;53H[K[42;53H92,1[10C24%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     attention = torch.mm(projection, self.word_context)  # [[[41;1Hsequence_length, 1][0m[42;53H[K[42;53H93,1[10C24%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     attention = self.softmax(attention.transpose(0,1))  # [0m[30m[43mTOO[41;1HDO[0m[42;53H[K[42;53H94,1[10C25%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     sentence_tensor[word_ind, :] = output[word_ind].transposs[41;1He(1, 0).mv(attention.view(-1))[0m[42;53H[K[42;53H95,1[10C25%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# return sentence_tensor[0m[42;53H[K[42;53H96,1[10C26%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[42;53H[K[42;53H97,0-1[8C26%[40;1H[34h[?25h[?25l[42;54H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[33mclass[0m [36mSentenceToDocment[0m(nn.Module):[42;53H[K[42;53H99,1[10C27%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[31m"""[0m[42;53H[K[42;53H100,1[9C27%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m    The word-to-sentence module.[0m[42;53H[K[42;53H101,1[9C27%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m    """[0m[42;53H[K[42;53H102,1[9C28%[40;1H[34h[?25h[?25l[42;55H3,0-1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H104,1[9C28%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[36msuper[0m(SentenceToDocment, self).__init__()[42;53H[K[42;53H105,1[9C29%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.projection_nonlinearity = nn.ReLU[42;53H[K[42;53H106,1[9C29%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.rnn = nn.GRU[42;53H[K[42;53H107,1[9C29%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Hself.sentence_to_document = self.rnn(config.word_hidden_size*[31m22[0m[40;1H, config.sentence_hidden_size,[41;36Hbidirectional=[36mTrue[0m, dropout=config.[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H108,1[9C30%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H                                   bidirectional=[36mTrue[0m, dropout=config..[40;1Hdropout_rate, batch_first=[36mTrue[0m)[41;9Hself.sentence_context = nn.Parameter(torch.FloatTensor(config.[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H109,1[9C30%[39;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[40;1H        self.sentence_context = nn.Parameter(torch.FloatTensor(config..[41;1Hsentence_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())[42;53H[K[42;53H110,1[9C31%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_projection = nn.Linear(config.sentence_hidden_sii[41;1Hze * [31m2[0m, config.sentence_context_size)[42;53H[K[42;53H111,1[9C31%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_context_size = config.sentence_context_size[41;9Hself.bn = nn.BatchNorm1d(num_features=config.num_sentences)[42;53H[K[42;53H112,1[9C32%[40;1H[34h[?25h[?25l[42;55H3[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_proj_nonlinearity = self.projection_nonlinearityy[41;1H()[42;53H[K[42;53H114,1[9C32%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.softmax = nn.Softmax()[42;53H[K[42;53H115,1[9C33%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H116,0-1[7C33%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36m_sort_sentence_tensor[0m(self, padded_tensor, num_sentences_lens))[41;1H:[42;53H[K[42;53H117,1[9C33%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hnum_sentences_lens, order = num_sentences_lens.sort([31m0[0m, descendd[41;1Hing=[36mTrue[0m)[42;53H[K[42;53H118,1[9C34%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hpadded_tensor = padded_tensor[order][42;53H[K[42;53H119,1[9C34%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor, num_sentences_lens, order[42;53H[K[42;53H120,1[9C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H121,0-1[7C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_unsort_sentence_tensor[0m(self, output, order):[42;53H[K[42;53H122,1[9C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H123,1[9C36%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[42;53H[K[42;53H124,0-1[7C36%[40;1H[34h[?25h[?25l[42;55H5,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param order:  Tensor
        :return: Tensor[0m[42;53H[K[42;53H126,1[9C37%[40;1H[34h[?25h[?25l[42;55H7[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H128,1[9C37%[40;1H[34h[?25h[?25l[42;55H9[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Horder = [36mlist[0m(order)[42;53H[K[42;53H130,1[9C38%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[42;53H[K[42;53H131,1[9C38%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hpadded_tensor[i, :] = (output[order.index(i)])[42;53H[K[42;53H132,1[9C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor[42;53H[K[42;53H133,1[9C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H134,0-1[7C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mforward[0m(self, x, sent_hidden_stat,  num_sentences_lens):[42;53H[K[42;53H135,1[9C40%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H136,1[9C40%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H137,0-1[7C41%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param x: [batch_size, num_sentences, word_hidden_size * 2], VV[41;1Hariable[0m[42;53H[K[42;53H138,1[9C41%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param num_sentences_lens: Tensor[0m[42;53H[K[42;53H139,1[9C42%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return: [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H140,1[9C42%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hsentence_sorted, num_sentences_lens, order = self._sort_senten[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H141,1[9C42%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        sentence_sorted, num_sentences_lens, order = self._sort_sentenn[40;1Hce_tensor(x, num_sentences_lens)[41;9Hpacked = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_senten[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H142,1[9C43%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        packed = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_sentenn[40;1Hces_lens), batch_first=[36mTrue[0m)[41;9Houtput, (hidden, cell) = self.sentence_to_document(packed, sen[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H143,1[9C43%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        output, (hidden, cell) = self.sentence_to_document(packed, senn[40;1Ht_hidden_stat)[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H144,1[9C44%[39;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = self._unsort_sentence_tensor(output, order)  [34m# Variabb[41;1Hle[0m[42;53H[K[42;53H146,1[9C44%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hd1 = output.size()[[31m0[0m][41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H147,1[9C45%[40;1H[34h[?25h[?25l[42;55H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H149,1[9C45%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Hprojection = self.sentence_proj_nonlinearity(self.bn(self.sentt[40;1Hence_projection(output))).view(-[31m1[0m, self.sentence_context_size)  [34m# [2*33[41;1H, 5][0m[42;53H[K[42;53H150,1[9C46%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = torch.mm(projection, self.sentence_context)  [34m# [2xx[41;1H3, 1][0m[42;53H[K[42;53H151,1[9C46%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[42;53H[K[42;53H152,1[9C47%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[41;1Hize(d1 * d3, d2)[42;53H[K[42;53H153,1[9C47%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[41;1H][0m[42;53H[K[42;53H154,1[9C48%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hdocument_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H155,1[9C49%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m document_tensor[42;53H[K[42;53H156,1[9C49%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H157,0-1[7C49%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# for sentence_ind in range(output.size(0)):[0m[42;53H[K[42;53H158,1[9C50%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     projection = self.sentence_projection(output[sentence_inn[41;1Hd])[0m[42;53H[K[42;53H159,1[9C50%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.bn(projection)[0m[42;53H[K[42;53H160,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.sentence_proj_nonlinearity(projection)[0m[42;53H[K[42;53H161,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     attention = torch.mm(projection, self.sentence_context)[0m[42;53H[K[42;53H162,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     attention = self.softmax(attention.transpose(1, 0))[0m[42;53H[K[42;53H163,1[9C52%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     document_tensor[sentence_ind, :] = output[sentence_ind]..[41;1Htranspose(1, 0).mv(attention.view(-1))[0m[42;53H[K[42;53H164,1[9C52%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# return document_tensor[0m[42;53H[K[42;53H165,1[9C53%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H166,0-1[7C53%[40;1H[34h[?25h[?25l[42;55H7,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[41;1H=weight_decay)[42;53H[K[42;53H168,1[9C54%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H169,0-1[7C54%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;1H[33mclass[0m [36mHAN[0m(nn.Module):[42;53H[K[42;53H170,0-1[7C55%[40;1H[34h[?25h[?25l[42;55H1,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H172,0-1[7C56%[40;1H[34h[?25h[?25l[42;55H3,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[36msuper[0m(HAN, self).__init__()[41;9Hself.num_class = config.num_class[42;53H[K[42;53H174,1[9C56%[40;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;2H[34m#       self.dropout = nn.Dropout(p=config.dropout_rate)[0m[42;53H[K[42;53H176,1[9C57%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.word_to_sentence = WordToSentence(config)[41;9Hself.sentence_to_document = SentenceToDocment(config)[42;53H[K[42;53H177,1[9C57%[40;1H[34h[?25h[?25l[42;55H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.config = config[42;53H[K[42;53H179,1[9C58%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.is_training = [36mTrue[0m[42;53H[K[42;53H180,1[9C58%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# set up the intermediate output step, if required[0m[42;53H[K[42;53H181,1[9C58%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9H[34m#self.intermediate = False[40;9H#self.intermediate_output_nonlinearity = nn.ELU[41;9H#if self.intermediate:[0m[42;53H[K[42;53H182,1[9C59%[39;1H[34h[?25h[?25l[42;55H3[40;1H[34h[?25h[?25l[42;55H4[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H[34m# self.intermediate_output = nn.Linear(config.sentence_hidd[41;1Hden_size * 2, config.sentence_hidden_size * 2)[0m[42;53H[K[42;53H185,1[9C60%[40;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;14H[34m#self.intermediate_nonlinearity = self.intermediate_outpuu[40;1Ht_nonlinearity()[0m[42;53H[K[42;53H186,1[9C60%[39;1H[34h[?25h[?25l[42;55H7,0-1[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# final transformation to class weightings[0m[41;9Hself.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num_[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H188,1[9C61%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        self.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num__[40;1Hclass)[42;53H[K[42;53H189,1[9C62%[39;1H[34h[?25h[?25l[42;54H90,0-1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_sequence_lens[0m(self, x):[42;53H[K[42;53H191,1[9C62%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens = [][42;53H[K[42;53H192,1[9C62%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H193,1[9C63%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = x.view(-[31m1[0m, sequence_length)[41;9H[33mfor[0m line [33min[0m x:[42;53H[K[42;53H194,1[9C63%[40;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hn = [31m0[0m[42;53H[K[42;53H196,1[9C64%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hidx = [36mlen[0m(line) - [31m1[0m[42;53H[K[42;53H197,1[9C64%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H198,1[9C65%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mif[0m [36mint[0m(line[idx]) != [31m0[0m: [34m#<pad>[0m[42;53H[K[42;53H199,1[9C65%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;21H[33mbreak[0m[41;17Hn += [31m1[0m[42;53H[K[42;53H200,1[9C66%[40;1H[34h[?25h[?25l[42;55H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hidx -= [31m1[0m[42;53H[K[42;53H202,1[9C66%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mif[0m n == [36mlen[0m(line):[42;53H[K[42;53H203,1[9C66%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hsequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[42;53H[K[42;53H204,1[9C67%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H[33melse[0m:[41;17Hsequence_lens.append(([36mlen[0m(line) - n))[42;53H[K[42;53H205,1[9C68%[40;1H[34h[?25h[?25l[42;55H6[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.Tensor(sequence_lens).cuda()[42;53H[K[42;53H207,1[9C68%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H208,0-1[7C68%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mis_padded_list[0m(self, seq):[42;53H[K[42;53H209,1[9C69%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hflag = [36mTrue[0m[42;53H[K[42;53H210,1[9C69%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m w [33min[0m seq:[42;53H[K[42;53H211,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mif[0m w != [31m0[0m: [34m#<pad>[0m[42;53H[K[42;53H212,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hflag = [36mFalse[0m[42;53H[K[42;53H213,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mbreak[0m[42;53H[K[42;53H214,1[9C71%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m flag[42;53H[K[42;53H215,1[9C71%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H216,0-1[7C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_num_sentences_lens[0m(self, x):[42;53H[K[42;53H217,1[9C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H218,1[9C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H219,0-1[7C73%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param x: batch_size, num_sentences, sequence_length], Tensor[0m[42;53H[K[42;53H220,1[9C73%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return: num_sentences_lens: length: batch_size, Tensor[0m[42;53H[K[42;53H221,1[9C74%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H222,1[9C74%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hnum_sentences_lens = [][41;9H[33mfor[0m matrix [33min[0m x:[42;53H[K[42;53H223,1[9C75%[40;1H[34h[?25h[?25l[42;55H4[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13Hn = [31m0[0m[41;13Hidx = [36mlen[0m(matrix) - [31m1[0m[42;53H[K[42;53H225,1[9C75%[40;1H[34h[?25h[?25l[42;55H6[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H227,1[9C76%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mif[0m [33mnot[0m self.is_padded_list(matrix[idx]):[42;53H[K[42;53H228,1[9C76%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;21H[33mbreak[0m[41;17Hn += [31m1[0m[42;53H[K[42;53H229,1[9C77%[40;1H[34h[?25h[?25l[42;54H30[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hidx -= [31m1[0m[42;53H[K[42;53H231,1[9C77%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hnum_sentences_lens.append(([36mlen[0m(matrix) - n))[42;53H[K[42;53H232,1[9C78%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.Tensor(num_sentences_lens).cuda()[42;53H[K[42;53H233,1[9C78%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H234,0-1[7C79%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mforward[0m(self, x):[42;53H[K[42;53H235,1[9C79%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#[0m[42;53H[K[42;53H236,1[9C79%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H237,1[9C80%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H238,0-1[7C80%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch..[41;1HTensor[0m[42;53H[K[42;53H239,1[9C81%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return:[0m[42;53H[K[42;53H240,1[9C81%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H241,1[9C82%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hbatch_size = x.size()[[31m0[0m][42;53H[K[42;53H242,1[9C82%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hnum_sentences = x.size()[[31m1[0m][42;53H[K[42;53H243,1[9C82%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H244,1[9C83%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batcc[41;1Hh_size)[42;53H[K[42;53H245,1[9C83%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens = self.get_sequence_lens(x.data)[42;53H[K[42;53H246,1[9C84%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hnum_sentences_lens = self.get_num_sentences_lens(x.data)[42;53H[K[42;53H247,1[9C84%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentencess[41;1H, sequence_length][0m[42;53H[K[42;53H248,1[9C85%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [41;1H [34m# [batch_size * num_sentences, word_hidden_size*2][0m[42;53H[K[42;53H249,1[9C85%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = x.resize(batch_size, num_sentences, self.config.word_hiddee[41;1Hn_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[42;53H[K[42;53H250,1[9C85%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.document_tensor = self.sentence_to_document(x, sent_hiddee[41;1Hn_stat, num_sentences_lens)  [34m# [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H251,1[9C86%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# dropout or not[0m[42;53H[K[42;53H252,1[9C86%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[34m#        self.document_tensor = self.dropout(self.document_tensor)[0m[42;53H[K[42;53H253,1[9C87%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#[0m[42;53H[K[42;53H254,1[9C87%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#if self.intermediate:[0m[42;53H[K[42;53H255,1[9C88%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#    self.document_tensor = self.intermediate_output(self.docuu[41;1Hment_tensor)[0m[42;53H[K[42;53H256,1[9C88%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#    self.document_tensor = self.intermediate_nonlinearity(sell[41;1Hf.document_tensor)[0m[42;53H[K[42;53H257,1[9C88%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H258,0-1[7C89%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtputs = self.fc(self.document_tensor)[42;53H[K[42;53H259,1[9C89%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H260,0-1[7C90%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m outputs[42;53H[K[42;53H261,1[9C90%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H262,0-1[7C90%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36minit_rnn_hidden[0m(self, batch_size):[42;53H[K[42;53H263,1[9C91%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size*self.conn[41;1Hfig.num_sentences, self.config.word_hidden_size))[42;53H[K[42;53H264,1[9C91%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hsent_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size, self.coo[41;1Hnfig.sentence_hidden_size))[42;53H[K[42;53H265,1[9C92%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m word_hidden_stat.cuda(), sent_hidden_stat.cuda()[42;53H[K[42;53H266,1[9C92%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H267,0-1[7C92%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[34m# [0m[30m[43mTODO[0m[42;53H[K[42;53H268,1[9C93%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H269,1[9C93%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# for name, v in self.named_parameters():[41;9H#     print(name, v)[0m[42;53H[K[42;53H270,1[9C94%[40;1H[34h[?25h[?25l[42;55H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# a = input("21321321312")[0m[42;53H[K[42;53H272,1[9C94%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# return torch.optim.Adam(self.parameters(), lr=lr, weight_decc[41;1Hay=weight_decay)[0m[42;53H[K[42;53H273,1[9C95%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H274,0-1[7C95%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.optim.Adam([[42;53H[K[42;53H275,1[9C96%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H{[31m'params'[0m: self.word_to_sentence.word_to_sentence.parametee[41;1Hrs()},[42;53H[K[42;53H276,1[9C96%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H{[31m'params'[0m: self.word_to_sentence.word_context},[42;53H[K[42;53H277,1[9C96%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;13H{[31m'params'[0m: self.word_to_sentence.word_projection.parameterr[40;1Hs()},[41;13H{[31m'params'[0m: self.word_to_sentence.bn.parameters()},[1m[34m@                                                                     [0m[42;53H[K[42;53H278,1[9C97%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H            {[31m'params'[0m: self.word_to_sentence.bn.parameters()},         [40;1H [41;13H{[31m'params'[0m: self.word_to_sentence.word_embeddings.parameter[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H279,1[9C97%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H            {[31m'params'[0m: self.word_to_sentence.word_embeddings.parameterr[40;1Hs(), [31m'lr'[0m: lr2},[41;13H{[31m'params'[0m: self.sentence_to_document.parameters()},[42;53H[K[42;53H280,1[9C98%[39;1H[34h[?25h[?25l[42;55H1[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H{[31m'params'[0m: self.fc.parameters()}[41;9H[34m#    {'params': self.intermediate_output.parameters()}[0m[42;53H[K[42;53H282,1[9C99%[40;1H[34h[?25h[?25l[42;55H3[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H], lr=lr, weight_decay=weight_decay)[42;53H[K[42;53H284,1[9C99%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H285,0-1[7CBot[41;1H[34h[?25h[?25l[42;55H4,1  [40;1H[34h[?25h[?25l[42;55H3[39;1H[34h[?25h[?25l[42;55H2[38;1H[34h[?25h[?25l[42;55H1[37;1H[34h[?25h[?25l[42;55H0[35;1H[34h[?25h[?25l[42;54H79[33;1H[34h[?25h[?25l[42;55H8[31;1H[34h[?25h[?25l[42;55H7[30;1H[34h[?25h[?25l[42;55H6[28;1H[34h[?25h[?25l[42;55H5[27;1H[34h[?25h[?25l[42;55H4,0-1[26;1H[34h[?25h[?25l[42;55H3,1  [24;1H[34h[?25h[?25l[42;55H2[23;1H[34h[?25h[?25l[42;55H1[22;1H[34h[?25h[?25l[42;55H0[21;1H[34h[?25h[?25l[42;54H69[20;1H[34h[?25h[?25l[42;55H8[19;1H[34h[?25h[?25l[42;55H7,0-1[18;1H[34h[?25h[?25l[42;55H6,1  [17;1H[34h[?25h[?25l[42;55H5[15;1H[34h[?25h[?25l[42;55H4[13;1H[34h[?25h[?25l[42;55H3[12;1H[34h[?25h[?25l[42;55H2,0-1[11;1H[34h[?25h[?25l[42;55H1,1  [10;1H[34h[?25h[?25l[42;55H0,0-1[9;1H[34h[?25h[?25l[42;54H59,1  [8;1H[34h[?25h[?25l[42;55H8,0-1[7;1H[34h[?25h[?25l[42;55H7,1  [5;1H[34h[?25h[?25l[42;55H6[3;1H[34h[?25h[?25l[42;55H5[2;1H[34h[?25h[?25l[42;55H4[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[34m#        self.document_tensor = self.dropout(self.document_tensor)[0m[42;53H[K[42;53H253,1[9C99%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[34m# dropout or not[0m[42;53H[K[42;53H252,1[9C99%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hself.document_tensor = self.sentence_to_document(x, sent_hiddee[2;1Hn_stat, num_sentences_lens)  [34m# [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H251,1[9C98%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hx = x.resize(batch_size, num_sentences, self.config.word_hiddee[2;1Hn_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H250,1[9C97%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [2;1H [34m# [batch_size * num_sentences, word_hidden_size*2][0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H249,1[9C97%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentencess[2;1H, sequence_length][0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H248,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hnum_sentences_lens = self.get_num_sentences_lens(x.data)[42;53H[K[42;53H247,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_lens = self.get_sequence_lens(x.data)[42;53H[K[42;53H246,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batcc[2;1Hh_size)[42;53H[K[42;53H245,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H244,1[9C95%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hnum_sentences = x.size()[[31m1[0m][42;53H[K[42;53H243,1[9C95%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hbatch_size = x.size()[[31m0[0m][41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H242,1[9C94%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        '''[0m[42;53H[K[42;53H241,1[9C94%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        :return:[0m[42;53H[K[42;53H240,1[9C94%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch..[2;1HTensor[0m[42;53H[K[42;53H239,1[9C93%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H238,0-1[7C93%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[31m'''[0m[42;53H[K[42;53H237,1[9C92%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[34m#[0m[42;53H[K[42;53H236,1[9C92%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mforward[0m(self, x):[42;53H[K[42;53H235,1[9C92%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H234,0-1[7C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mreturn[0m torch.Tensor(num_sentences_lens).cuda()[42;53H[K[42;53H233,1[9C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hnum_sentences_lens.append(([36mlen[0m(matrix) - n))[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H232,1[9C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hidx -= [31m1[0m[42;53H[K[42;53H231,1[9C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hn += [31m1[0m[42;53H[K[42;53H230,1[9C90%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;21H[33mbreak[0m[42;53H[K[42;53H229,1[9C90%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17H[33mif[0m [33mnot[0m self.is_padded_list(matrix[idx]):[42;53H[K[42;53H228,1[9C90%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H227,1[9C89%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hidx = [36mlen[0m(matrix) - [31m1[0m[42;53H[K[42;53H226,1[9C89%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hn = [31m0[0m[42;53H[K[42;53H225,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mfor[0m matrix [33min[0m x:[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H224,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hnum_sentences_lens = [][42;53H[K[42;53H223,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        '''[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H222,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        :return: num_sentences_lens: length: batch_size, Tensor[0m[42;53H[K[42;53H221,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        :param x: batch_size, num_sentences, sequence_length], Tensor[0m[42;53H[K[42;53H220,1[9C87%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H219,0-1[7C87%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[31m'''[0m[42;53H[K[42;53H218,1[9C86%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mget_num_sentences_lens[0m(self, x):[42;53H[K[42;53H217,1[9C86%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H216,0-1[7C86%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mreturn[0m flag[42;53H[K[42;53H215,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17H[33mbreak[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H214,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hflag = [36mFalse[0m[42;53H[K[42;53H213,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33mif[0m w != [31m0[0m: [34m#<pad>[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H212,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mfor[0m w [33min[0m seq:[42;53H[K[42;53H211,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hflag = [36mTrue[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H210,1[9C84%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mis_padded_list[0m(self, seq):[42;53H[K[42;53H209,1[9C84%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H208,0-1[7C84%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mreturn[0m torch.Tensor(sequence_lens).cuda()[42;53H[K[42;53H207,1[9C83%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hsequence_lens.append(([36mlen[0m(line) - n))[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H206,1[9C83%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33melse[0m:[42;53H[K[42;53H205,1[9C83%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hsequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[42;53H[K[42;53H204,1[9C82%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33mif[0m n == [36mlen[0m(line):[42;53H[K[42;53H203,1[9C82%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hidx -= [31m1[0m[42;53H[K[42;53H202,1[9C82%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hn += [31m1[0m[42;53H[K[42;53H201,1[9C81%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;21H[33mbreak[0m[42;53H[K[42;53H200,1[9C81%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17H[33mif[0m [36mint[0m(line[idx]) != [31m0[0m: [34m#<pad>[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H199,1[9C80%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H198,1[9C80%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hidx = [36mlen[0m(line) - [31m1[0m[42;53H[K[42;53H197,1[9C80%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hn = [31m0[0m[42;53H[K[42;53H196,1[9C79%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mfor[0m line [33min[0m x:[42;53H[K[42;53H195,1[9C79%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hx = x.view(-[31m1[0m, sequence_length)[42;53H[K[42;53H194,1[9C79%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H193,1[9C78%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_lens = [][42;53H[K[42;53H192,1[9C78%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mget_sequence_lens[0m(self, x):[42;53H[K[42;53H191,1[9C77%[1;1H[34h[?25h[?25l[42;53H[K[42;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l"models/hierarchical.py" 285L, 13086C written
[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ clear
[H[Jdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ py[K[Kpyth[K[K[K[Kvim[K[K[Kvim[K[K[Kvim models/hierarchical.ppy 
[?1049h[?1h=[1;42r[34l[34h[?25h[23m[24m[0m[H[J[?25l[42;1H"models/hierarchical.py" 285L, 13086C[1;1H[35mimport[0m numpy [33mas[0m np
[35mimport[0m os
[35mimport[0m torch
[35mimport[0m torch.nn [33mas[0m nn
[35mfrom[0m torch.autograd [35mimport[0m Variable
[35mfrom[0m torch [35mimport[0m optim
[35mimport[0m torch.nn.functional [33mas[0m F

[35mfrom[0m torch.nn.utils.rnn [35mimport[0m pack_padded_sequence, pad_packed_sequenn[10;1Hce

[33mclass[0m [36mWordToSentence[0m(nn.Module):
    [31m"""
    The wordacter to word-level module.
    """[0m
    [33mdef[0m [36m__init__[0m(self, config):[17;9H[36msuper[0m(WordToSentence, self).__init__()[18;9Hself.word_embeddings = nn.Embedding(num_embeddings=config.vocaa[19;1Hb_size,[20;45Hembedding_dim=config.embedd[21;1Hding_size)[22;9Hself.projection_nonlinearity = nn.ReLU[23;9Hself.rnn = nn.GRU[24;9Hself.word_to_sentence = self.rnn(config.embedding_size, configg[25;1H.word_hidden_size, bidirectional=[36mTrue[0m,[26;33Hbatch_first=[36mTrue[0m, dropout=config.dropoo[27;1Hut_rate)[29;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.wordd[30;1H_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())  [34m# [0m[30m[43mTODO[0m[34m 改变初始化方式[0m[31;9Hself.word_projection = nn.Linear(config.word_hidden_size * [31m2[0m,  [32;1Hconfig.word_context_size)[33;9Hself.word_context_size = config.word_context_size[34;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[35;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[36;9Hself.softmax = nn.Softmax()[37;9H[33mif[0m os.path.exists(config.embedding_path) [33mand[0m config.is_traininn[38;1Hg [33mand[0m config.is_pretrain:[39;13H[36mprint[0m([31m"pretrain..."[0m)[40;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(npp[41;1H.load(config.embedding_path)))[42;53H1,1[11CTop[1;1H[34h[?25h[?25l[42;53H2[2;1H[34h[?25h[?25l[42;53H3[3;1H[34h[?25h[?25l[42;53H4[4;1H[34h[?25h[?25l[42;53H5[5;1H[34h[?25h[?25l[42;53H6[6;1H[34h[?25h[?25l[42;53H7[7;1H[34h[?25h[?25l[42;53H8,0-1[8;1H[34h[?25h[?25l[42;53H9,1  [9;1H[34h[?25h[?25l[42;53H10,0-1[11;1H[34h[?25h[?25l[42;54H1,1  [12;1H[34h[?25h[?25l[42;54H2[13;1H[34h[?25h[?25l[42;54H3[14;1H[34h[?25h[?25l[42;54H4[15;1H[34h[?25h[?25l[42;54H5[16;1H[34h[?25h[?25l[42;54H6[17;1H[34h[?25h[?25l[42;54H7[18;1H[34h[?25h[?25l[42;54H8[20;1H[34h[?25h[?25l[42;54H9[22;1H[34h[?25h[?25l[42;53H20[23;1H[34h[?25h[?25l[42;54H1[24;1H[34h[?25h[?25l[42;54H2[26;1H[34h[?25h[?25l[42;54H3,0-1[28;1H[34h[?25h[?25l[42;54H4,1  [29;1H[34h[?25h[?25l[42;54H5[31;1H[34h[?25h[?25l[42;54H6[33;1H[34h[?25h[?25l[42;54H7[34;1H[34h[?25h[?25l[42;54H8[35;1H[34h[?25h[?25l[42;54H9[36;1H[34h[?25h[?25l[42;53H30[37;1H[34h[?25h[?25l[42;54H1[39;1H[34h[?25h[?25l[42;54H2[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;1H[K[42;53H33,0-1[9C0%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H34,1[11C0%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[41;1H=weight_decay)[42;53H[K[42;53H35,1[11C1%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H36,0-1[9C1%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[42;53H[K[42;53H37,1[11C2%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[42;53H[K[42;53H38,1[11C2%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# print(type(sequence_lens), type(order))[0m[42;53H[K[42;53H39,1[11C3%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTenn[41;1Hsor' >[0m[42;53H[K[42;53H40,1[11C3%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hpadded_tensor = padded_tensor[order][42;53H[K[42;53H41,1[11C3%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor, sequence_lens, order[42;53H[K[42;53H42,1[11C4%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H43,0-1[9C4%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_unsort_word_tensor[0m(self, output, order):[42;53H[K[42;53H44,1[11C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H45,1[11C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H46,0-1[9C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[42;53H[K[42;53H47,1[11C6%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param order:  Tensor
        :return: Variable[0m[42;53H[K[42;53H48,1[11C6%[40;1H[34h[?25h[?25l[42;54H9[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H50,1[11C7%[40;1H[34h[?25h[?25l[42;54H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Horder = [36mlist[0m(order)[42;53H[K[42;53H52,1[11C7%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[42;53H[K[42;53H53,1[11C7%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13Hpadded_tensor[i, :] = (output[order.index(i)])[41;9H[33mreturn[0m padded_tensor[42;53H[K[42;53H54,1[11C8%[40;1H[34h[?25h[?25l[42;54H5[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[42;53H[K[42;53H56,0-1[9C8%[40;1H[34h[?25h[?25l[42;54H7[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H58,0-1[9C9%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[41;9H[31m'''[0m[42;53H[K[42;53H59,1[11C9%[40;1H[34h[?25h[?25l[42;53H60[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m                  [
        :param x: batch_size * num_sentences, sequence_length][0m[42;53H[K[42;53H61,1[10C10%[40;1H[34h[?25h[?25l[42;54H2[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param sequence_lens: Tensor of sequences lengths of each batcc[41;1Hh element[0m[42;53H[K[42;53H63,1[10C10%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return:  [batch_size * num_sentences, word_hidden_size * 2][0m[42;53H[K[42;53H64,1[10C11%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H65,1[10C11%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x,  [41;1Hsequence_lens)[42;53H[K[42;53H66,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hword_embed = self.word_embeddings(word_sorted)[42;53H[K[42;53H67,1[10C12%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens),,[41;1H batch_first=[36mTrue[0m)[42;53H[K[42;53H68,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[42;53H[K[42;53H69,1[10C13%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H70,1[10C13%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = self._unsort_word_tensor(output, order)[41;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidde[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H71,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[40;1H        [34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_],  e.g.: 2 3 4[0m[42;53H[K[42;53H72,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd1 = output.size()[[31m0[0m][42;53H[K[42;53H73,1[10C14%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H74,1[10C15%[41;1H[34h[?25h[?25l[42;54H3[40;1H[34h[?25h[?25l[42;54H2[38;1H[34h[?25h[?25l[42;54H1[37;1H[34h[?25h[?25l[42;54H0[36;1H[34h[?25h[?25l[42;53H69[35;1H[34h[?25h[?25l[42;54H8[33;1H[34h[?25h[?25l[42;54H7[32;1H[34h[?25h[?25l[42;54H6[30;1H[34h[?25h[?25l[42;54H5[29;1H[34h[?25h[?25l[42;54H4[28;1H[34h[?25h[?25l[42;54H3[26;1H[34h[?25h[?25l[42;54H2[25;1H[34h[?25h[?25l[42;54H1[24;1H[34h[?25h[?25l[42;54H0[23;1H[34h[?25h[?25l[42;53H59[22;1H[34h[?25h[?25l[42;54H8,0-1[21;1H[34h[?25h[?25l[42;54H7[20;1H[34h[?25h[?25l[42;54H6[19;1H[34h[?25h[?25l[42;54H5,1  [18;1H[34h[?25h[?25l[42;54H4[17;1H[34h[?25h[?25l[42;54H3[16;1H[34h[?25h[?25l[42;54H2[15;1H[34h[?25h[?25l[42;54H1[14;1H[34h[?25h[?25l[42;54H0[13;1H[34h[?25h[?25l[42;53H49[12;1H[34h[?25h[?25l[42;54H8[11;1H[34h[?25h[?25l[42;54H7[10;1H[34h[?25h[?25l[42;54H6,0-1[9;1H[34h[?25h[?25l[42;54H5,1  [8;1H[34h[?25h[?25l[42;54H4[7;1H[34h[?25h[?25l[42;54H3,0-1[6;1H[34h[?25h[?25l[42;54H2,1  [5;1H[34h[?25h[?25l[42;54H1[4;1H[34h[?25h[?25l[42;54H0[2;1H[34h[?25h[?25l[42;53H39[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[42;53H[K[42;53H38,1[10C14%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[42;53H[K[42;53H37,1[10C14%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H36,0-1[8C14%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[2;1H=weight_decay)[42;53H[K[42;53H35,1[10C13%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H34,1[10C13%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H33,0-1[8C12%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(npp[2;1H.load(config.embedding_path)))[42;53H[K[42;53H32,1[10C12%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[36mprint[0m([31m"pretrain..."[0m)[42;53H[K[42;53H31,1[10C12%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9H[33mif[0m os.path.exists(config.embedding_path) [33mand[0m config.is_traininn[2;1Hg [33mand[0m config.is_pretrain:[42;53H[K[42;53H30,1[10C11%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hself.softmax = nn.Softmax()[42;53H[K[42;53H29,1[10C11%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[42;53H[K[42;53H28,1[10C10%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H27,1[10C10%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hself.word_context_size = config.word_context_size[42;53H[K[42;53H26,1[10C10%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hself.word_projection = nn.Linear(config.word_hidden_size * [31m2[0m,  [2;1Hconfig.word_context_size)[42;53H[K[42;53H25,1[11C9%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.wordd[2;1H_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())  [34m# [0m[30m[43mTODO[0m[34m 改变初始化方式[0m[42;53H[K[42;53H24,1[11C9%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H23,0-1[9C8%[1;1H[34h[?25h[?25l[42;54H4,1  [2;1H[34h[?25h[?25l[42;54H5[4;1H[34h[?25h[?25l[42;54H6[6;1H[34h[?25h[?25l[42;54H7[7;1H[34h[?25h[?25l[42;54H8[8;1H[34h[?25h[?25l[42;54H9[9;1H[34h[?25h[?25l[42;53H30[10;1H[34h[?25h[?25l[42;54H1[12;1H[34h[?25h[?25l[42;54H2[13;1H[34h[?25h[?25l[42;54H3,0-1[15;1H[34h[?25h[?25l[42;54H4,1  [16;1H[34h[?25h[?25l[42;54H5[17;1H[34h[?25h[?25l[42;54H6,0-1[19;1H[34h[?25h[?25l[42;54H7,1  [20;1H[34h[?25h[?25l[42;54H8[21;1H[34h[?25h[?25l[42;54H9[22;1H[34h[?25h[?25l[42;53H40[23;1H[34h[?25h[?25l[42;54H1[25;1H[34h[?25h[?25l[42;54H2[26;1H[34h[?25h[?25l[42;54H3,0-1[27;1H[34h[?25h[?25l[42;54H4,1  [28;1H[34h[?25h[?25l[42;54H5[29;1H[34h[?25h[?25l[42;54H6,0-1[30;1H[34h[?25h[?25l[42;54H7,1  [31;1H[34h[?25h[?25l[42;54H8[32;1H[34h[?25h[?25l[42;54H9[33;1H[34h[?25h[?25l[42;53H50[34;1H[34h[?25h[?25l[42;54H1[35;1H[34h[?25h[?25l[42;54H2[36;1H[34h[?25h[?25l[42;54H3[37;1H[34h[?25h[?25l[42;54H4[38;1H[34h[?25h[?25l[42;54H5[39;1H[34h[?25h[?25l[42;54H6,0-1[40;1H[34h[?25h[?25l[42;54H7[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H58,0-1[9C9%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[41;9H[31m'''[0m[42;53H[K[42;53H59,1[11C9%[40;1H[34h[?25h[?25l[42;53H60[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m                  [
        :param x: batch_size * num_sentences, sequence_length][0m[42;53H[K[42;53H61,1[10C10%[40;1H[34h[?25h[?25l[42;54H2[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param sequence_lens: Tensor of sequences lengths of each batcc[41;1Hh element[0m[42;53H[K[42;53H63,1[10C10%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return:  [batch_size * num_sentences, word_hidden_size * 2][0m[42;53H[K[42;53H64,1[10C11%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H65,1[10C11%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x,  [41;1Hsequence_lens)[42;53H[K[42;53H66,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hword_embed = self.word_embeddings(word_sorted)[42;53H[K[42;53H67,1[10C12%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens),,[41;1H batch_first=[36mTrue[0m)[42;53H[K[42;53H68,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[42;53H[K[42;53H69,1[10C13%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H70,1[10C13%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = self._unsort_word_tensor(output, order)[41;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidde[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H71,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[40;1H        [34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_],  e.g.: 2 3 4[0m[42;53H[K[42;53H72,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd1 = output.size()[[31m0[0m][42;53H[K[42;53H73,1[10C14%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H74,1[10C15%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H75,1[10C15%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_projection(output)[41;9Hprojection = self.bn(projection)[42;53H[K[42;53H76,1[10C16%[40;1H[34h[?25h[?25l[42;54H7[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_proj_nonlinearity(projection).view(-[31m1[0m,  [41;1Hself.word_context_size)  [34m# [2x3, 5][0m[42;53H[K[42;53H78,1[10C16%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = torch.mm(projection, self.word_context)  [34m# [2x3, 11[41;1H][0m[42;53H[K[42;53H79,1[10C17%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[42;53H[K[42;53H80,1[10C18%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[41;1Hize(d1 * d3, d2)[42;53H[K[42;53H81,1[10C18%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[41;1H][0m[42;53H[K[42;53H82,1[10C19%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hsentence_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H83,1[10C20%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m sentence_tensor[42;53H[K[42;53H84,1[10C20%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H85,0-1[8C20%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# sentence_tensor = Variable(torch.zeros((output.size(0), outpp[41;1Hut.size(2))).cuda())[0m[42;53H[K[42;53H86,1[10C21%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_][0m[42;53H[K[42;53H87,1[10C22%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# for word_ind in range(output.size(0)):[0m[42;53H[K[42;53H88,1[10C22%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.word_projection(output[word_ind])[0m[42;53H[K[42;53H89,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.bn(projection)[0m[42;53H[K[42;53H90,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.word_proj_nonlinearity(projection)[0m[42;53H[K[42;53H91,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     # size: [sequence_length, word_context_size][0m[42;53H[K[42;53H92,1[10C24%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     attention = torch.mm(projection, self.word_context)  # [[[41;1Hsequence_length, 1][0m[42;53H[K[42;53H93,1[10C24%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     attention = self.softmax(attention.transpose(0,1))  # [0m[30m[43mTOO[41;1HDO[0m[42;53H[K[42;53H94,1[10C25%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     sentence_tensor[word_ind, :] = output[word_ind].transposs[41;1He(1, 0).mv(attention.view(-1))[0m[42;53H[K[42;53H95,1[10C25%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# return sentence_tensor[0m[42;53H[K[42;53H96,1[10C26%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[42;53H[K[42;53H97,0-1[8C26%[40;1H[34h[?25h[?25l[42;54H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[33mclass[0m [36mSentenceToDocment[0m(nn.Module):[42;53H[K[42;53H99,1[10C27%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[31m"""[0m[42;53H[K[42;53H100,1[9C27%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m    The word-to-sentence module.[0m[42;53H[K[42;53H101,1[9C27%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m    """[0m[42;53H[K[42;53H102,1[9C28%[40;1H[34h[?25h[?25l[42;55H3,0-1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H104,1[9C28%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[36msuper[0m(SentenceToDocment, self).__init__()[42;53H[K[42;53H105,1[9C29%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.projection_nonlinearity = nn.ReLU[42;53H[K[42;53H106,1[9C29%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.rnn = nn.GRU[42;53H[K[42;53H107,1[9C29%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Hself.sentence_to_document = self.rnn(config.word_hidden_size*[31m22[0m[40;1H, config.sentence_hidden_size,[41;36Hbidirectional=[36mTrue[0m, dropout=config.[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H108,1[9C30%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H                                   bidirectional=[36mTrue[0m, dropout=config..[40;1Hdropout_rate, batch_first=[36mTrue[0m)[41;9Hself.sentence_context = nn.Parameter(torch.FloatTensor(config.[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H109,1[9C30%[39;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[40;1H        self.sentence_context = nn.Parameter(torch.FloatTensor(config..[41;1Hsentence_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())[42;53H[K[42;53H110,1[9C31%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_projection = nn.Linear(config.sentence_hidden_sii[41;1Hze * [31m2[0m, config.sentence_context_size)[42;53H[K[42;53H111,1[9C31%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_context_size = config.sentence_context_size[41;9Hself.bn = nn.BatchNorm1d(num_features=config.num_sentences)[42;53H[K[42;53H112,1[9C32%[40;1H[34h[?25h[?25l[42;55H3[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_proj_nonlinearity = self.projection_nonlinearityy[41;1H()[42;53H[K[42;53H114,1[9C32%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.softmax = nn.Softmax()[42;53H[K[42;53H115,1[9C33%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H116,0-1[7C33%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36m_sort_sentence_tensor[0m(self, padded_tensor, num_sentences_lens))[41;1H:[42;53H[K[42;53H117,1[9C33%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hnum_sentences_lens, order = num_sentences_lens.sort([31m0[0m, descendd[41;1Hing=[36mTrue[0m)[42;53H[K[42;53H118,1[9C34%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hpadded_tensor = padded_tensor[order][42;53H[K[42;53H119,1[9C34%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor, num_sentences_lens, order[42;53H[K[42;53H120,1[9C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H121,0-1[7C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_unsort_sentence_tensor[0m(self, output, order):[42;53H[K[42;53H122,1[9C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H123,1[9C36%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[42;53H[K[42;53H124,0-1[7C36%[40;1H[34h[?25h[?25l[42;55H5,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param order:  Tensor
        :return: Tensor[0m[42;53H[K[42;53H126,1[9C37%[40;1H[34h[?25h[?25l[42;55H7[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H128,1[9C37%[40;1H[34h[?25h[?25l[42;55H9[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Horder = [36mlist[0m(order)[42;53H[K[42;53H130,1[9C38%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[42;53H[K[42;53H131,1[9C38%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hpadded_tensor[i, :] = (output[order.index(i)])[42;53H[K[42;53H132,1[9C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor[42;53H[K[42;53H133,1[9C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H134,0-1[7C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mforward[0m(self, x, sent_hidden_stat,  num_sentences_lens):[42;53H[K[42;53H135,1[9C40%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H136,1[9C40%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H137,0-1[7C41%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param x: [batch_size, num_sentences, word_hidden_size * 2], VV[41;1Hariable[0m[42;53H[K[42;53H138,1[9C41%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param num_sentences_lens: Tensor[0m[42;53H[K[42;53H139,1[9C42%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return: [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H140,1[9C42%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hsentence_sorted, num_sentences_lens, order = self._sort_senten[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H141,1[9C42%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        sentence_sorted, num_sentences_lens, order = self._sort_sentenn[40;1Hce_tensor(x, num_sentences_lens)[41;9Hpacked = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_senten[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H142,1[9C43%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        packed = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_sentenn[40;1Hces_lens), batch_first=[36mTrue[0m)[41;9Houtput, (hidden, cell) = self.sentence_to_document(packed, sen[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H143,1[9C43%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        output, (hidden, cell) = self.sentence_to_document(packed, senn[40;1Ht_hidden_stat)[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H144,1[9C44%[39;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = self._unsort_sentence_tensor(output, order)  [34m# Variabb[41;1Hle[0m[42;53H[K[42;53H146,1[9C44%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hd1 = output.size()[[31m0[0m][41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H147,1[9C45%[40;1H[34h[?25h[?25l[42;55H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H149,1[9C45%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Hprojection = self.sentence_proj_nonlinearity(self.bn(self.sentt[40;1Hence_projection(output))).view(-[31m1[0m, self.sentence_context_size)  [34m# [2*33[41;1H, 5][0m[42;53H[K[42;53H150,1[9C46%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = torch.mm(projection, self.sentence_context)  [34m# [2xx[41;1H3, 1][0m[42;53H[K[42;53H151,1[9C46%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[42;53H[K[42;53H152,1[9C47%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[41;1Hize(d1 * d3, d2)[42;53H[K[42;53H153,1[9C47%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[41;1H][0m[42;53H[K[42;53H154,1[9C48%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hdocument_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H155,1[9C49%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m document_tensor[42;53H[K[42;53H156,1[9C49%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H157,0-1[7C49%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# for sentence_ind in range(output.size(0)):[0m[42;53H[K[42;53H158,1[9C50%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     projection = self.sentence_projection(output[sentence_inn[41;1Hd])[0m[42;53H[K[42;53H159,1[9C50%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.bn(projection)[0m[42;53H[K[42;53H160,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.sentence_proj_nonlinearity(projection)[0m[42;53H[K[42;53H161,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     attention = torch.mm(projection, self.sentence_context)[0m[42;53H[K[42;53H162,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     attention = self.softmax(attention.transpose(1, 0))[0m[42;53H[K[42;53H163,1[9C52%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     document_tensor[sentence_ind, :] = output[sentence_ind]..[41;1Htranspose(1, 0).mv(attention.view(-1))[0m[42;53H[K[42;53H164,1[9C52%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# return document_tensor[0m[42;53H[K[42;53H165,1[9C53%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H166,0-1[7C53%[40;1H[34h[?25h[?25l[42;55H7,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[41;1H=weight_decay)[42;53H[K[42;53H168,1[9C54%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H169,0-1[7C54%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;1H[33mclass[0m [36mHAN[0m(nn.Module):[42;53H[K[42;53H170,0-1[7C55%[40;1H[34h[?25h[?25l[42;55H1,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H172,0-1[7C56%[40;1H[34h[?25h[?25l[42;55H3,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[36msuper[0m(HAN, self).__init__()[41;9Hself.num_class = config.num_class[42;53H[K[42;53H174,1[9C56%[40;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;2H[34m#       self.dropout = nn.Dropout(p=config.dropout_rate)[0m[42;53H[K[42;53H176,1[9C57%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.word_to_sentence = WordToSentence(config)[41;9Hself.sentence_to_document = SentenceToDocment(config)[42;53H[K[42;53H177,1[9C57%[40;1H[34h[?25h[?25l[42;55H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.config = config[42;53H[K[42;53H179,1[9C58%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.is_training = [36mTrue[0m[42;53H[K[42;53H180,1[9C58%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# set up the intermediate output step, if required[0m[42;53H[K[42;53H181,1[9C58%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9H[34m#self.intermediate = False[40;9H#self.intermediate_output_nonlinearity = nn.ELU[41;9H#if self.intermediate:[0m[42;53H[K[42;53H182,1[9C59%[39;1H[34h[?25h[?25l[42;55H3[40;1H[34h[?25h[?25l[42;55H4[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H[34m# self.intermediate_output = nn.Linear(config.sentence_hidd[41;1Hden_size * 2, config.sentence_hidden_size * 2)[0m[42;53H[K[42;53H185,1[9C60%[40;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;14H[34m#self.intermediate_nonlinearity = self.intermediate_outpuu[40;1Ht_nonlinearity()[0m[42;53H[K[42;53H186,1[9C60%[39;1H[34h[?25h[?25l[42;55H7,0-1[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# final transformation to class weightings[0m[41;9Hself.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num_[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H188,1[9C61%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        self.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num__[40;1Hclass)[42;53H[K[42;53H189,1[9C62%[39;1H[34h[?25h[?25l[42;54H90,0-1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_sequence_lens[0m(self, x):[42;53H[K[42;53H191,1[9C62%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens = [][42;53H[K[42;53H192,1[9C62%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H193,1[9C63%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = x.view(-[31m1[0m, sequence_length)[41;9H[33mfor[0m line [33min[0m x:[42;53H[K[42;53H194,1[9C63%[40;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hn = [31m0[0m[42;53H[K[42;53H196,1[9C64%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hidx = [36mlen[0m(line) - [31m1[0m[42;53H[K[42;53H197,1[9C64%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H198,1[9C65%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mif[0m [36mint[0m(line[idx]) != [31m0[0m: [34m#<pad>[0m[42;53H[K[42;53H199,1[9C65%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;21H[33mbreak[0m[41;17Hn += [31m1[0m[42;53H[K[42;53H200,1[9C66%[40;1H[34h[?25h[?25l[42;55H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hidx -= [31m1[0m[42;53H[K[42;53H202,1[9C66%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mif[0m n == [36mlen[0m(line):[42;53H[K[42;53H203,1[9C66%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hsequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[42;53H[K[42;53H204,1[9C67%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H[33melse[0m:[41;17Hsequence_lens.append(([36mlen[0m(line) - n))[42;53H[K[42;53H205,1[9C68%[40;1H[34h[?25h[?25l[42;55H6[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.Tensor(sequence_lens).cuda()[42;53H[K[42;53H207,1[9C68%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H208,0-1[7C68%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mis_padded_list[0m(self, seq):[42;53H[K[42;53H209,1[9C69%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hflag = [36mTrue[0m[42;53H[K[42;53H210,1[9C69%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m w [33min[0m seq:[42;53H[K[42;53H211,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mif[0m w != [31m0[0m: [34m#<pad>[0m[42;53H[K[42;53H212,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hflag = [36mFalse[0m[42;53H[K[42;53H213,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mbreak[0m[42;53H[K[42;53H214,1[9C71%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m flag[42;53H[K[42;53H215,1[9C71%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H216,0-1[7C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_num_sentences_lens[0m(self, x):[42;53H[K[42;53H217,1[9C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H218,1[9C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H219,0-1[7C73%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param x: batch_size, num_sentences, sequence_length], Tensor[0m[42;53H[K[42;53H220,1[9C73%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return: num_sentences_lens: length: batch_size, Tensor[0m[42;53H[K[42;53H221,1[9C74%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H222,1[9C74%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hnum_sentences_lens = [][41;9H[33mfor[0m matrix [33min[0m x:[42;53H[K[42;53H223,1[9C75%[40;1H[34h[?25h[?25l[42;55H4[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13Hn = [31m0[0m[41;13Hidx = [36mlen[0m(matrix) - [31m1[0m[42;53H[K[42;53H225,1[9C75%[40;1H[34h[?25h[?25l[42;55H6[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H227,1[9C76%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mif[0m [33mnot[0m self.is_padded_list(matrix[idx]):[42;53H[K[42;53H228,1[9C76%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;21H[33mbreak[0m[41;17Hn += [31m1[0m[42;53H[K[42;53H229,1[9C77%[40;1H[34h[?25h[?25l[42;54H30[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hidx -= [31m1[0m[42;53H[K[42;53H231,1[9C77%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hnum_sentences_lens.append(([36mlen[0m(matrix) - n))[42;53H[K[42;53H232,1[9C78%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.Tensor(num_sentences_lens).cuda()[42;53H[K[42;53H233,1[9C78%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H234,0-1[7C79%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mforward[0m(self, x):[42;53H[K[42;53H235,1[9C79%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#[0m[42;53H[K[42;53H236,1[9C79%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H237,1[9C80%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H238,0-1[7C80%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch..[41;1HTensor[0m[42;53H[K[42;53H239,1[9C81%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return:[0m[42;53H[K[42;53H240,1[9C81%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H241,1[9C82%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hbatch_size = x.size()[[31m0[0m][42;53H[K[42;53H242,1[9C82%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hnum_sentences = x.size()[[31m1[0m][42;53H[K[42;53H243,1[9C82%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H244,1[9C83%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batcc[41;1Hh_size)[42;53H[K[42;53H245,1[9C83%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens = self.get_sequence_lens(x.data)[42;53H[K[42;53H246,1[9C84%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hnum_sentences_lens = self.get_num_sentences_lens(x.data)[42;53H[K[42;53H247,1[9C84%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentencess[41;1H, sequence_length][0m[42;53H[K[42;53H248,1[9C85%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [41;1H [34m# [batch_size * num_sentences, word_hidden_size*2][0m[42;53H[K[42;53H249,1[9C85%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = x.resize(batch_size, num_sentences, self.config.word_hiddee[41;1Hn_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[42;53H[K[42;53H250,1[9C85%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.document_tensor = self.sentence_to_document(x, sent_hiddee[41;1Hn_stat, num_sentences_lens)  [34m# [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H251,1[9C86%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# dropout or not[0m[42;53H[K[42;53H252,1[9C86%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[34m#        self.document_tensor = self.dropout(self.document_tensor)[0m[42;53H[K[42;53H253,1[9C87%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#[0m[42;53H[K[42;53H254,1[9C87%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#if self.intermediate:[0m[42;53H[K[42;53H255,1[9C88%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#    self.document_tensor = self.intermediate_output(self.docuu[41;1Hment_tensor)[0m[42;53H[K[42;53H256,1[9C88%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#    self.document_tensor = self.intermediate_nonlinearity(sell[41;1Hf.document_tensor)[0m[42;53H[K[42;53H257,1[9C88%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H258,0-1[7C89%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtputs = self.fc(self.document_tensor)[42;53H[K[42;53H259,1[9C89%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H260,0-1[7C90%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m outputs[42;53H[K[42;53H261,1[9C90%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H262,0-1[7C90%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36minit_rnn_hidden[0m(self, batch_size):[42;53H[K[42;53H263,1[9C91%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size*self.conn[41;1Hfig.num_sentences, self.config.word_hidden_size))[42;53H[K[42;53H264,1[9C91%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hsent_hidden_stat = Variable(torch.zeros([31m2[0m, batch_size, self.coo[41;1Hnfig.sentence_hidden_size))[42;53H[K[42;53H265,1[9C92%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m word_hidden_stat.cuda(), sent_hidden_stat.cuda()[42;53H[K[42;53H266,1[9C92%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H267,0-1[7C92%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[34m# [0m[30m[43mTODO[0m[42;53H[K[42;53H268,1[9C93%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H269,1[9C93%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# for name, v in self.named_parameters():[41;9H#     print(name, v)[0m[42;53H[K[42;53H270,1[9C94%[40;1H[34h[?25h[?25l[42;55H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# a = input("21321321312")[0m[42;53H[K[42;53H272,1[9C94%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# return torch.optim.Adam(self.parameters(), lr=lr, weight_decc[41;1Hay=weight_decay)[0m[42;53H[K[42;53H273,1[9C95%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H274,0-1[7C95%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.optim.Adam([[42;53H[K[42;53H275,1[9C96%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H{[31m'params'[0m: self.word_to_sentence.word_to_sentence.parametee[41;1Hrs()},[42;53H[K[42;53H276,1[9C96%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H{[31m'params'[0m: self.word_to_sentence.word_context},[42;53H[K[42;53H277,1[9C96%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;13H{[31m'params'[0m: self.word_to_sentence.word_projection.parameterr[40;1Hs()},[41;13H{[31m'params'[0m: self.word_to_sentence.bn.parameters()},[1m[34m@                                                                     [0m[42;53H[K[42;53H278,1[9C97%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H            {[31m'params'[0m: self.word_to_sentence.bn.parameters()},         [40;1H [41;13H{[31m'params'[0m: self.word_to_sentence.word_embeddings.parameter[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H279,1[9C97%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H            {[31m'params'[0m: self.word_to_sentence.word_embeddings.parameterr[40;1Hs(), [31m'lr'[0m: lr2},[41;13H{[31m'params'[0m: self.sentence_to_document.parameters()},[42;53H[K[42;53H280,1[9C98%[39;1H[34h[?25h[?25l[42;55H1[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H{[31m'params'[0m: self.fc.parameters()}[41;9H[34m#    {'params': self.intermediate_output.parameters()}[0m[42;53H[K[42;53H282,1[9C99%[40;1H[34h[?25h[?25l[42;55H3[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H], lr=lr, weight_decay=weight_decay)[42;53H[K[42;53H284,1[9C99%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H285,0-1[7CBot[41;1H[34h[?25h[?25l[42;55H4,1  [40;1H[34h[?25h[?25l[42;55H3[39;1H[34h[?25h[?25l[42;55H2[38;1H[34h[?25h[?25l[42;55H1[37;1H[34h[?25h[?25l[42;55H0[35;1H[34h[?25h[?25l[42;54H79[33;1H[34h[?25h[?25l[42;55H8[31;1H[34h[?25h[?25l[42;55H7[30;1H[34h[?25h[?25l[42;55H6[28;1H[34h[?25h[?25l[42;55H5[27;1H[34h[?25h[?25l[42;55H4,0-1[26;1H[34h[?25h[?25l[42;55H3,1  [24;1H[34h[?25h[?25l[42;55H2[23;1H[34h[?25h[?25l[42;55H1[22;1H[34h[?25h[?25l[42;55H0[21;1H[34h[?25h[?25l[42;54H69[20;1H[34h[?25h[?25l[42;55H8[19;1H[34h[?25h[?25l[42;55H7,0-1[18;1H[34h[?25h[?25l[42;55H6,1  [17;1H[34h[?25h[?25l[42;55H5[15;1H[34h[?25h[?25l[42;55H4[13;1H[34h[?25h[?25l[42;55H3[12;1H[34h[?25h[?25l[42;55H2,0-1[11;1H[34h[?25h[?25l[42;55H1,1  [10;1H[34h[?25h[?25l[42;55H0,0-1[9;1H[34h[?25h[?25l[42;54H59,1  [8;1H[34h[?25h[?25l[42;55H8,0-1[7;1H[34h[?25h[?25l[42;55H7,1  [5;1H[34h[?25h[?25l[42;55H6[3;1H[34h[?25h[?25l[42;55H5[2;1H[34h[?25h[?25l[42;55H4[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[34m#        self.document_tensor = self.dropout(self.document_tensor)[0m[42;53H[K[42;53H253,1[9C99%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[34m# dropout or not[0m[42;53H[K[42;53H252,1[9C99%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hself.document_tensor = self.sentence_to_document(x, sent_hiddee[2;1Hn_stat, num_sentences_lens)  [34m# [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H251,1[9C98%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hx = x.resize(batch_size, num_sentences, self.config.word_hiddee[2;1Hn_size*[31m2[0m)  [34m# [batch_size , num_sentences, word_hidden_size*2][0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H250,1[9C97%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hx = self.word_to_sentence(x, word_hidden_stat, sequence_lens)  [2;1H [34m# [batch_size * num_sentences, word_hidden_size*2][0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H249,1[9C97%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hx = x.view(-[31m1[0m, sequence_length)  [34m# [batch_size * num_sentencess[2;1H, sequence_length][0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H248,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hnum_sentences_lens = self.get_num_sentences_lens(x.data)[42;53H[K[42;53H247,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_lens = self.get_sequence_lens(x.data)[42;53H[K[42;53H246,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hword_hidden_stat, sent_hidden_stat = self.init_rnn_hidden(batcc[2;1Hh_size)[42;53H[K[42;53H245,1[9C96%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H244,1[9C95%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hnum_sentences = x.size()[[31m1[0m][42;53H[K[42;53H243,1[9C95%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hbatch_size = x.size()[[31m0[0m][41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H242,1[9C94%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        '''[0m[42;53H[K[42;53H241,1[9C94%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        :return:[0m[42;53H[K[42;53H240,1[9C94%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;1H[31m        :param x: [batch_size, num_sentences, sequence_length], torch..[2;1HTensor[0m[42;53H[K[42;53H239,1[9C93%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H238,0-1[7C93%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[31m'''[0m[42;53H[K[42;53H237,1[9C92%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[34m#[0m[42;53H[K[42;53H236,1[9C92%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mforward[0m(self, x):[42;53H[K[42;53H235,1[9C92%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H234,0-1[7C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mreturn[0m torch.Tensor(num_sentences_lens).cuda()[42;53H[K[42;53H233,1[9C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hnum_sentences_lens.append(([36mlen[0m(matrix) - n))[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H232,1[9C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hidx -= [31m1[0m[42;53H[K[42;53H231,1[9C91%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hn += [31m1[0m[42;53H[K[42;53H230,1[9C90%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;21H[33mbreak[0m[42;53H[K[42;53H229,1[9C90%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17H[33mif[0m [33mnot[0m self.is_padded_list(matrix[idx]):[42;53H[K[42;53H228,1[9C90%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H227,1[9C89%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hidx = [36mlen[0m(matrix) - [31m1[0m[42;53H[K[42;53H226,1[9C89%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13Hn = [31m0[0m[42;53H[K[42;53H225,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mfor[0m matrix [33min[0m x:[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H224,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hnum_sentences_lens = [][42;53H[K[42;53H223,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        '''[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H222,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        :return: num_sentences_lens: length: batch_size, Tensor[0m[42;53H[K[42;53H221,1[9C88%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m        :param x: batch_size, num_sentences, sequence_length], Tensor[0m[42;53H[K[42;53H220,1[9C87%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H219,0-1[7C87%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[31m'''[0m[42;53H[K[42;53H218,1[9C86%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mget_num_sentences_lens[0m(self, x):[42;53H[K[42;53H217,1[9C86%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H216,0-1[7C86%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mreturn[0m flag[42;53H[K[42;53H215,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17H[33mbreak[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H214,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hflag = [36mFalse[0m[42;53H[K[42;53H213,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33mif[0m w != [31m0[0m: [34m#<pad>[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H212,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mfor[0m w [33min[0m seq:[42;53H[K[42;53H211,1[9C85%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hflag = [36mTrue[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H210,1[9C84%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mis_padded_list[0m(self, seq):[42;53H[K[42;53H209,1[9C84%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H208,0-1[7C84%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mreturn[0m torch.Tensor(sequence_lens).cuda()[42;53H[K[42;53H207,1[9C83%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hsequence_lens.append(([36mlen[0m(line) - n))[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H206,1[9C83%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33melse[0m:[42;53H[K[42;53H205,1[9C83%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hsequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[42;53H[K[42;53H204,1[9C82%[1;1H[34h[?25h[?25l[42;55H5[2;1H[34h[?25h[?25l[42;55H6[3;1H[34h[?25h[?25l[42;55H7[4;1H[34h[?25h[?25l[42;55H8,0-1[5;1H[34h[?25h[?25l[42;55H9,1  [6;1H[34h[?25h[?25l[42;54H10[7;1H[34h[?25h[?25l[42;55H1[8;1H[34h[?25h[?25l[42;55H2[9;1H[34h[?25h[?25l[42;55H3[10;1H[34h[?25h[?25l[42;55H4[11;1H[34h[?25h[?25l[42;55H5[12;1H[34h[?25h[?25l[42;55H6,0-1[13;1H[34h[?25h[?25l[42;55H7,1  [14;1H[34h[?25h[?25l[42;55H8[15;1H[34h[?25h[?25l[42;55H9,0-1[16;1H[34h[?25h[?25l[42;54H20,1  [17;1H[34h[?25h[?25l[42;55H1[18;1H[34h[?25h[?25l[42;55H2[19;1H[34h[?25h[?25l[42;55H3[20;1H[34h[?25h[?25l[42;55H4[21;1H[34h[?25h[?25l[42;55H3[20;1H[34h[?25h[?25l[42;55H2[19;1H[34h[?25h[?25l[42;55H1[18;1H[34h[?25h[?25l[42;55H0[17;1H[34h[?25h[?25l[42;54H19,0-1[16;1H[34h[?25h[?25l[42;55H8,1  [15;1H[34h[?25h[?25l[42;55H7[14;1H[34h[?25h[?25l[42;55H6,0-1[13;1H[34h[?25h[?25l[42;55H5,1  [12;1H[34h[?25h[?25l[42;55H4[11;1H[34h[?25h[?25l[42;55H3[10;1H[34h[?25h[?25l[42;55H2[9;1H[34h[?25h[?25l[42;55H1[8;1H[34h[?25h[?25l[42;55H0[7;1H[34h[?25h[?25l[42;54H09[6;1H[34h[?25h[?25l[42;55H8,0-1[5;1H[34h[?25h[?25l[42;55H7,1  [4;1H[34h[?25h[?25l[42;55H6[3;1H[34h[?25h[?25l[42;55H5[2;1H[34h[?25h[?25l[42;55H4[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;13H[33mif[0m n == [36mlen[0m(line):[42;53H[K[42;53H203,1[9C82%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hidx -= [31m1[0m[42;53H[K[42;53H202,1[9C82%[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;17Hn += [31m1[0m[42;53H[K[42;53H201,1[9C81%[1;1H[34h[?25h[?25l[42;55H2[2;1H[34h[?25h[?25l[42;55H3[3;1H[34h[?25h[?25l[42;55H4[4;1H[34h[?25h[?25l[42;55H5[5;1H[34h[?25h[?25l[42;55H6[6;1H[34h[?25h[?25l[42;55H7[7;1H[34h[?25h[?25l[42;55H8,0-1[8;1H[34h[?25h[?25l[42;55H9,1  [9;1H[34h[?25h[?25l[42;54H10[10;1H[34h[?25h[?25l[42;55H1[11;1H[34h[?25h[?25l[42;55H2[12;1H[34h[?25h[?25l[42;57H2[12;2H[34h[?25h[?25l[42;57H3[12;3H[34h[?25h[?25l[42;57H4[12;4H[34h[?25h[?25l[42;57H5[12;5H[34h[?25h[?25l[42;57H6[12;6H[34h[?25h[?25l[42;57H7[12;7H[34h[?25h[?25l[42;57H8[12;8H[34h[?25h[?25l[42;57H9[12;9H[34h[?25h[?25l[42;57H10[12;10H[34h[?25h[?25l[42;58H1[12;11H[34h[?25h[?25l[42;58H2[12;12H[34h[?25h[?25l[42;58H3[12;13H[34h[?25h[?25l[42;58H4[12;14H[34h[?25h[?25l[42;58H5[12;15H[34h[?25h[?25l[42;58H6[12;16H[34h[?25h[?25l[42;58H7[12;17H[34h[?25h[?25l[42;58H8[12;18H[34h[?25h[?25l[42;58H9[12;19H[34h[?25h[?25l[42;57H20[12;20H[34h[?25h[?25l[42;58H1[12;21H[34h[?25h[?25l[42;58H2[12;22H[34h[?25h[?25l[42;1H[1m-- INSERT --[0m[42;53H[K[42;53H212,22[8C81%[12;22H[34h[?25h[?25l: [34m#<pad>[0m[12;29H[K[42;58H1[12;21H[34h[?25h[?25l[31m1[0m: [34m#<pad>[0m[42;58H2[12;22H[34h[?25h[?25l[42;55H1[11;22H[34h[?25h[?25l[42;55H0,20[10;20H[34h[?25h[?25l[42;54H09,22[9;22H[34h[?25h[?25l[42;55H8,1 [8;1H[34h[?25h[?25l[42;55H6,22[6;22H[34h[?25h[?25l[42;55H5,18[5;18H[34h[?25h[?25l[42;55H4,22[4;22H[34h[?25h[?25l[42;55H3[3;22H[34h[?25h[?25l[42;55H2[2;22H[34h[?25h[?25l[42;55H1[1;22H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;17H[33mif[0m [36mint[0m(line[idx]) != [31m0[0m: [34m#<pad>[0m[2;21H[33mbreak[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H199,22[8C80%[1;22H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;13Hidx = [36mlen[0m(line) - [31m1[0m[2;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H197,22[8C80%[1;22H[46m([0mline[46m)[34h[?25h[?25l[1;41r[0m[1;1H[L[1;42r[1;13Hn = [31m0[0m[42;53H[K[42;53H196,18[8C79%[2;22H(line)[1;18H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[33mfor[0m line [33min[0m x:[42;53H[K[42;53H195,22[8C79%[1;22H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hx = x.view(-[31m1[0m, sequence_length)[42;53H[K[42;53H194,22[8C79%[1;22H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H193,22[8C78%[1;22H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9Hsequence_lens = [][42;53H[K[42;53H192,22[8C78%[1;22H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;5H[33mdef[0m [36mget_sequence_lens[0m(self, x):[42;53H[K[42;53H191,22[8C77%[1;22H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[42;53H[K[42;53H190,1[9C77%[1;1H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hself.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num__[2;1Hclass)[42;53H[K[42;53H189,22[8C76%[1;22H[34h[?25h[?25l[42;54H90,1 [3;1H[34h[?25h[?25l[42;55H1,22[4;22H[34h[?25h[?25l[42;55H2[5;22H[34h[?25h[?25l[42;55H3[6;22H[34h[?25h[?25l[42;55H4[7;22H[34h[?25h[?25l[42;55H5[8;22H[34h[?25h[?25l[42;55H6,18[9;18H[34h[?25h[?25l[10;22H[46m([0mline[46m)[0m[42;55H7,22[10;22H[34h[?25h[?25l(line)[42;55H8[11;22H[34h[?25h[?25l[42;55H9[12;22H[34h[?25h[?25l[42;53H200[13;22H[34h[?25h[?25l[42;53H199[12;22H[34h[?25h[?25l[1C[46m([9C)[0m[42;58H3[12;23H[34h[?25h[?25l[42;53H[K[42;53H199,24[8C76%[12;24H[34h[?25h[?25l([9C)[42;58H5[12;25H[34h[?25h[?25l[42;58H6[12;26H[34h[?25h[?25l[42;58H7[12;27H[34h[?25h[?25le[46m[[0midx[46m][0m[42;58H8[12;28H[34h[?25h[?25l[42;53H[K[42;53H199,29[8C76%[12;29H[34h[?25h[?25l[idx][42;57H30[12;30H[34h[?25h[?25l[42;58H1[12;31H[34h[?25h[?25l[46m[[0midx[46m][0m[42;58H2[12;32H[34h[?25h[?25l[12;23H[46m([0mline[idx][46m)[0m[42;58H3[12;33H[34h[?25h[?25l[42;53H[K[42;53H199,34[8C76%[12;34H[34h[?25h[?25l[12;23H([9C)[42;58H5[12;35H[34h[?25h[?25l[42;58H6[12;36H[34h[?25h[?25l[42;58H7[12;37H[34h[?25h[?25l[42;58H8[12;38H[34h[?25h[?25l[42;58H9[12;39H[34h[?25h[?25l: [34m#<pad>[0m[12;46H[K[42;58H8[12;38H[34h[?25h[?25l[31m1[0m: [34m#<pad>[0m[42;58H9[12;39H[34h[?25h[?25l[42;55H8,28[11;28H[34h[?25h[?25l[42;55H7,32[10;32H[34h[?25h[?25l[42;55H6,18[9;18H[34h[?25h[?25l[7;19H[46m([19C)[0m[42;55H4,39[7;39H[34h[?25h[?25l[6;35H[46m[[1C][0m[7;19H([19C)[42;53H[K[42;53H193,38[8C76%[6;38H[34h[?25h[?25l[[1C][42;55H1,36[4;36H[34h[?25h[?25l[42;54H89,39[1;39H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;9H[34m# final transformation to class weightings[0m[42;53H[K[42;53H188,39[8C76%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;14H[34m#self.intermediate_nonlinearity = self.intermediate_outpuu[2;1Ht_nonlinearity()[0m[42;53H[K[42;53H186,39[8C75%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;9H[34m#if self.intermediate:[2;13H# self.intermediate_output = nn.Linear(config.sentence_hidd[3;1Hden_size * 2, config.sentence_hidden_size * 2)[0m[42;53H[K[42;53H184,31[8C74%[1;31H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[1;9Hself.is_training = [36mTrue[0m[2;9H[34m# set up the intermediate output step, if required[3;9H#self.intermediate = False[4;9H#self.intermediate_output_nonlinearity = nn.ELU[0m[42;53H[K[42;53H180,32[8C72%[1;32H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;9Hself.word_to_sentence = WordToSentence(config)[2;9Hself.sentence_to_document = SentenceToDocment(config)[3;9Hself.config = config[42;53H[K[42;53H177,39[8C71%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;9H[36msuper[0m(HAN, self).__init__()[2;9Hself.num_class = config.num_class
 [34m#       self.dropout = nn.Dropout(p=config.dropout_rate)[0m[42;53H[K[42;53H174,36[8C70%[1;34H[46m()[0m[42;53H[K[42;53H174,36[8C70%[1;36H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[2;1H[33mclass[0m [36mHAN[0m(nn.Module):[4;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H170,1[9C68%[5;34H()[1;1H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[1;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[2;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[3;1H=weight_decay)[42;53H[K[42;53H167,39[8C66%[1;39H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[1;9H[34m#     document_tensor[sentence_ind, :] = output[sentence_ind]..[2;1Htranspose(1, 0).mv(attention.view(-1))[3;9H# return document_tensor[0m[42;53H[K[42;53H164,39[8C65%[1;39H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9H[34m#     attention = torch.mm(projection, self.sentence_context)[2;9H#     attention = self.softmax(attention.transpose(1, 0))[0m[42;53H[K[42;53H162,39[8C64%[1;39H[34h[?25h[?25l[1;41r[1;1H[7L[1;42r[1;9H[33mreturn[0m document_tensor[3;9H[34m# for sentence_ind in range(output.size(0)):[4;9H#     projection = self.sentence_projection(output[sentence_inn[5;1Hd])[6;9H#     projection = self.bn(projection)[7;9H#     projection = self.sentence_proj_nonlinearity(projection)[0m[42;53H[K[42;53H156,31[8C62%[1;31H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[1;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[2;1H][0m[3;9Hdocument_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[4;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H154,39[8C60%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[2;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[3;1Hize(d1 * d3, d2)[42;53H[K[42;53H152,39[8C60%[1;39H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hattention = torch.mm(projection, self.sentence_context)  [34m# [2xx[2;1H3, 1][0m[42;53H[K[42;53H151,39[8C59%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;9Hprojection = self.sentence_proj_nonlinearity(self.bn(self.sentt[2;1Hence_projection(output))).view(-[31m1[0m, self.sentence_context_size)  [34m# [2*33[3;1H, 5][0m[42;53H[K[42;53H150,39[8C58%[1;39H[34h[?25h[?25l[1;41r[1;1H[5L[1;42r[1;9Houtput = self._unsort_sentence_tensor(output, order)  [34m# Variabb[2;1Hle[0m[3;9Hd1 = output.size()[[31m0[0m][4;9Hd2 = output.size()[[31m1[0m][5;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H146,39[8C57%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;9Houtput, (hidden, cell) = self.sentence_to_document(packed, senn[2;1Ht_hidden_stat)[3;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H144,39[8C56%[1;39H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;9Hpacked = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_sentenn[2;1Hces_lens), batch_first=[36mTrue[0m)[42;53H[K[42;53H143,39[8C55%[1;38H[46m([0m[31Cnn[2;1Hc[26C[46m)[0m[42;53H[K[42;53H143,39[8C55%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;1H[31m        '''[0m[2;9Hsentence_sorted, num_sentences_lens, order = self._sort_sentenn[3;1Hce_tensor(x, num_sentences_lens)[42;53H[K[42;53H141,12[8C54%[4;38H([31Cnn[5;1Hc[26C)[1;12H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;1H[31m        :param num_sentences_lens: Tensor
        :return: [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H139,39[8C53%[1;39H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[1;9H[31m'''

        :param x: [batch_size, num_sentences, word_hidden_size * 2], VV[4;1Hariable[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H136,12[8C52%[1;12H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[1;13Hpadded_tensor[i, :] = (output[order.index(i)])[2;9H[33mreturn[0m padded_tensor[4;5H[33mdef[0m [36mforward[0m(self, x, sent_hidden_stat,  num_sentences_lens):[42;53H[K[42;53H132,39[8C51%[1;39H[34h[?25h[?25l[1;41r[1;1H[7L[1;42r[1;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>
        :param order:  Tensor
        :return: Tensor
        '''[0m[5;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[6;9Horder = [36mlist[0m(order)[7;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H125,39[8C48%[1;39H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[2;5H[33mdef[0m [36m_unsort_sentence_tensor[0m(self, output, order):[3;9H[31m'''[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H121,1[9C47%[1;1H[34h[?25h[?25l[1;41r[1;1H[4L[1;42r[1;9Hnum_sentences_lens, order = num_sentences_lens.sort([31m0[0m, descendd[2;1Hing=[36mTrue[0m)[3;9Hpadded_tensor = padded_tensor[order][4;9H[33mreturn[0m padded_tensor, num_sentences_lens, order[42;53H[K[42;53H118,39[8C46%[1;39H[34h[?25h[?25l[1;41r[1;1H[10L[1;42r[1;9Hself.sentence_projection = nn.Linear(config.sentence_hidden_sii[2;1Hze * [31m2[0m, config.sentence_context_size)[3;9Hself.sentence_context_size = config.sentence_context_size[4;9Hself.bn = nn.BatchNorm1d(num_features=config.num_sentences)[5;9Hself.sentence_proj_nonlinearity = self.projection_nonlinearityy[6;1H()[7;9Hself.softmax = nn.Softmax()[9;5H[33mdef[0m [36m_sort_sentence_tensor[0m(self, padded_tensor, num_sentences_lens))[10;1H:[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H111,39[8C43%[1;39H[34h[?25h[?25l[1;41r[1;1H[6L[1;42r[1;9Hself.sentence_to_document = self.rnn(config.word_hidden_size*[31m22[0m[2;1H, config.sentence_hidden_size,[3;36Hbidirectional=[36mTrue[0m, dropout=config..[4;1Hdropout_rate, batch_first=[36mTrue[0m)[5;9Hself.sentence_context = nn.Parameter(torch.FloatTensor(config..[6;1Hsentence_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())[42;53H[K[42;53H108,39[8C42%[1;39H[34h[?25h[?25l[1;41r[1;1H[3L[1;42r[1;9H[36msuper[0m(SentenceToDocment, self).__init__()[2;9Hself.projection_nonlinearity = nn.ReLU[3;9Hself.rnn = nn.GRU[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H105,39[8C41%[1;14H[46m([23C)[0m[41;1H[31m        :param x: [batch_size, num_sentences, word_hidden_size * 2], V[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H105,39[8C41%[1;39H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[2;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H103,1[9C40%[3;14H([23C)[1;1H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m    """[0m[42;53H[K[42;53H102,8[9C40%[1;8H[34h[?25h[?25l[1;41r[1;1H[L[1;42r[1;1H[31m    The word-to-sentence module.[0m[42;53H[K[42;53H101,33[8C39%[1;33H[34h[?25h[?25l[1;41r[1;1H[2L[1;42r[1;1H[33mclass[0m [36mSentenceToDocment[0m(nn.Module):
    [31m"""[0m[42;53H[K[42;53H99,36[9C39%[1;36H[34h[?25h[?25l[1;41r[1;1H[12L[1;42r[1;9H[34m#     projection = self.bn(projection)[2;9H#     projection = self.word_proj_nonlinearity(projection)[3;9H#     # size: [sequence_length, word_context_size][4;9H#     attention = torch.mm(projection, self.word_context)  # [[[5;1Hsequence_length, 1][6;9H#     attention = self.softmax(attention.transpose(0,1))  # [0m[30m[43mTOO[7;1HDO[0m[8;9H[34m#     sentence_tensor[word_ind, :] = output[word_ind].transposs[9;1He(1, 0).mv(attention.view(-1))[10;9H# return sentence_tensor[0m[42;53H[K[42;53H90,39[9C35%[1;39H[34h[?25h[?25l[1;41r[1;1H[6L[1;42r[1;9H[34m# sentence_tensor = Variable(torch.zeros((output.size(0), outpp[2;1Hut.size(2))).cuda())[3;9H# size: [batch_Size*num_sentences, sequence_length, word_hiddee[4;1Hn_size*2_][5;9H# for word_ind in range(output.size(0)):[6;9H#     projection = self.word_projection(output[word_ind])[0m[42;53H[K[42;53H86,39[9C33%[1;39H[34h[?25h[?25l[23m[24m[0m[H[J[1;9Horder = [36mlist[0m(order)[2;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[3;13Hpadded_tensor[i, :] = (output[order.index(i)])[4;9H[33mreturn[0m padded_tensor[8;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[9;9H[31m'''
                  [
        :param x: batch_size * num_sentences, sequence_length]
        :param sequence_lens: Tensor of sequences lengths of each batcc[13;1Hh element
        :return:  [batch_size * num_sentences, word_hidden_size * 2]
        '''[0m[16;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x,  [17;1Hsequence_lens)[18;9Hword_embed = self.word_embeddings(word_sorted)[19;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens),,[20;1H batch_first=[36mTrue[0m)[21;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[22;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[23;9Houtput = self._unsort_word_tensor(output, order)[24;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[25;1Hn_size*2_],  e.g.: 2 3 4[0m[26;9Hd1 = output.size()[[31m0[0m][27;9Hd2 = output.size()[[31m1[0m][28;9Hd3 = output.size()[[31m2[0m][29;9Hprojection = self.word_projection(output)[30;9Hprojection = self.bn(projection)[31;9Hprojection = self.word_proj_nonlinearity(projection).view(-[31m1[0m,  [32;1Hself.word_context_size)  [34m# [2x3, 5][0m[33;9Hattention = torch.mm(projection, self.word_context)  [34m# [2x3, 11[34;1H][0m[35;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[36;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[37;1Hize(d1 * d3, d2)[38;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[39;1H][0m[40;9Hsentence_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)
[1m-- INSERT --[0m[40C52,28[9C20%[1;21H[46m([0morder[46m)[1;41r[0m[1;1H[9L[1;42r[2;5H[33mdef[0m [36m_unsort_word_tensor[0m(self, output, order):[3;9H[31m'''

        :param output: <class 'torch.autograd.variable.Variable'>
        :param order:  Tensor
        :return: Variable
        '''[0m[9;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H43,1[10C16%[10;21H(order)[1;1H[34h[?25h[?25l[1;41r[1;1H[23L[1;42r[1;9Hself.word_projection = nn.Linear(config.word_hidden_size * [31m2[0m,  [2;1Hconfig.word_context_size)[3;9Hself.word_context_size = config.word_context_size[4;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[5;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[6;9Hself.softmax = nn.Softmax()[7;9H[33mif[0m os.path.exists(config.embedding_path) [33mand[0m config.is_traininn[8;1Hg [33mand[0m config.is_pretrain:[9;13H[36mprint[0m([31m"pretrain..."[0m)[10;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(npp[11;1H.load(config.embedding_path)))[13;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[14;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[15;1H=weight_decay)[17;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[18;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[19;9H[34m# print(type(sequence_lens), type(order))[20;9H# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTenn[21;1Hsor' >[0m[22;9Hpadded_tensor = padded_tensor[order][23;9H[33mreturn[0m padded_tensor, sequence_lens, order[42;53H[K[42;53H25,39[10C9%[1;39H[34h[?25h[?25l[1;41r[1;1H[14L[1;42r[1;9H[36msuper[0m(WordToSentence, self).__init__()[2;9Hself.word_embeddings = nn.Embedding(num_embeddings=config.vocaa[3;1Hb_size,[4;45Hembedding_dim=config.embedd[5;1Hding_size)[6;9Hself.projection_nonlinearity = nn.ReLU[7;9Hself.rnn = nn.GRU[8;9Hself.word_to_sentence = self.rnn(config.embedding_size, configg[9;1H.word_hidden_size, bidirectional=[36mTrue[0m,[10;33Hbatch_first=[36mTrue[0m, dropout=config.dropoo[11;1Hut_rate)[13;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.wordd[14;1H_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())  [34m# [0m[30m[43mTODO[0m[34m 改变初始化方式[0m[42;53H[K[42;53H16,39[10C5%[1;39H[34h[?25h[?25l[1;41r[1;1H[9L[1;42r[2;1H[35mfrom[0m torch.nn.utils.rnn [35mimport[0m pack_padded_sequence, pad_packed_sequenn[3;1Hce

[33mclass[0m [36mWordToSentence[0m(nn.Module):
    [31m"""
    The wordacter to word-level module.
    """[0m
    [33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H8,1[12C2%[1;1H[34h[?25h[?25l[1;41r[1;1H[7L[1;42r[1;1H[35mimport[0m numpy [33mas[0m np
[35mimport[0m os
[35mimport[0m torch
[35mimport[0m torch.nn [33mas[0m nn
[35mfrom[0m torch.autograd [35mimport[0m Variable
[35mfrom[0m torch [35mimport[0m optim
[35mimport[0m torch.nn.functional [33mas[0m F[42;53H[K[42;53H1,19[10CTop[1;19H[34h[?25h[?25l[42;53H2,10[2;10H[34h[?25h[?25l[42;53H3,13[3;13H[34h[?25h[?25l[42;53H4,22[4;22H[34h[?25h[?25l[42;53H5,36[5;36H[34h[?25h[?25l[42;53H6,24[6;24H[34h[?25h[?25l[42;53H7,32[7;32H[34h[?25h[?25l[42;53H8,1 [8;1H[34h[?25h[?25l[42;53H9,39[9;39H[34h[?25h[?25l[42;53H10,1[11;1H[34h[?25h[?25l[42;54H2,8[13;8H[34h[?25h[?25l[42;54H3,39[14;39H[34h[?25h[?25l[42;54H5,32[16;32H[34h[?25h[?25l[42;54H6,39[17;39H[34h[?25h[?25l[42;53H27[34;39H[34h[?25h[?25l[42;54H8[35;39H[34h[?25h[?25l[36;34H[46m()[0m[42;53H[K[42;53H29,36[9CTop[36;36H[34h[?25h[?25l()[42;53H30,39[37;39H[34h[?25h[?25l[42;54H2[40;39H[34h[?25h[?25l[1;41r[1;1H[10M[1;42r[33;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[34;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[35;1H=weight_decay)[37;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[38;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[39;9H[34m# print(type(sequence_lens), type(order))[40;9H# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTenn[41;1Hsor' >[0m[42;53H[K[42;53H40,39[10C3%[40;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hpadded_tensor = padded_tensor[order][42;53H[K[42;53H41,39[10C3%[41;38H[46m[[0morder[46m][0m[42;53H[K[42;53H41,39[10C3%[41;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor, sequence_lens, order[42;53H[K[42;53H42,39[10C4%[40;38H[order][41;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H43,1[11C4%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_unsort_word_tensor[0m(self, output, order):[42;53H[K[42;53H44,39[10C5%[41;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H45,12[10C5%[41;12H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H46,1[11C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[42;53H[K[42;53H47,39[10C6%[41;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param order:  Tensor
        :return: Variable[0m[42;53H[K[42;53H48,30[10C6%[40;30H[34h[?25h[?25l[42;54H9,26[41;26H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H50,12[10C7%[40;12H[1;41r[41;1H
[1;42r[41;9Horder = [36mlist[0m(order)[42;53H[K[42;53H52,28[10C7%[41;21H[46m([0morder[46m)[0m[42;53H[K[42;53H52,28[10C7%[41;28H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[40;13Hpadded_tensor[i, :] = (output[order.index(i)])[41;9H[33mreturn[0m padded_tensor[42;53H[K[42;53H54,39[10C8%[38;21H(order)[40;39H[34h[?25h[?25l[42;54H5,2[41;29H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[42;53H[K[42;53H56,1[11C8%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H58,1[11C9%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[41;9H[31m'''[0m[42;53H[K[42;53H60,12[10C9%[41;12H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m                  [
        :param x: batch_size * num_sentences, sequence_length][0m[42;53H[K[42;53H61,20[9C10%[40;19H[31m[46m[[41;62H][0m[42;53H[K[42;53H61,20[9C10%[40;20H[34h[?25h[?25l[31m[[41;62H][0m[42;54H2,39[41;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param sequence_lens: Tensor of sequences lengths of each batcc[41;1Hh element[0m[42;53H[K[42;53H63,39[9C10%[40;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return:  [batch_size * num_sentences, word_hidden_size * 2][0m[42;53H[K[42;53H64,39[9C11%[41;39H[34h[?25h[?25l[42;54H3[39;39H[34h[?25h[?25l[42;54H2[38;39H[34h[?25h[?25l[37;19H[31m[46m[[38;62H][0m[42;53H[K[42;53H61,20[9C11%[37;20H[34h[?25h[?25l[31m[[38;62H][0m[42;54H0,12[36;12H[34h[?25h[?25l[42;53H59,39[35;39H[34h[?25h[?25l[42;54H8,1 [34;1H[34h[?25h[?25l[42;54H7[33;1H[34h[?25h[?25l[42;54H6[32;1H[34h[?25h[?25l[42;54H5,29[31;29H[34h[?25h[?25l[42;54H4,3[30;39H[34h[?25h[?25l[42;54H3[29;39H[34h[?25h[?25l[42;54H5,2[31;29H[34h[?25h[?25l[42;54H6,1 [32;1H[34h[?25h[?25l[42;54H8[34;1H[34h[?25h[?25l[42;54H9,39[35;39H[34h[?25h[?25l[37;19H[31m[46m[[38;62H][0m[42;53H[K[42;53H61,20[9C11%[37;20H[34h[?25h[?25l[31m[[38;62H][0m[42;54H2,39[38;39H[34h[?25h[?25l[42;54H3[39;39H[34h[?25h[?25l[42;54H4[41;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H65,12[9C11%[41;12H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x,  [41;1Hsequence_lens)[42;53H[K[42;53H66,39[9C12%[40;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hword_embed = self.word_embeddings(word_sorted)[42;53H[K[42;53H67,39[9C12%[41;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens),,[41;1H batch_first=[36mTrue[0m)[42;53H[K[42;53H68,39[9C12%[40;38H[46m([0m[31C,,[41;1H [16C[46m)[0m[42;53H[K[42;53H68,39[9C12%[40;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H70,39[9C13%[38;38H([31C,,[39;1H [16C)[41;39H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Houtput = self._unsort_word_tensor(output, order)[40;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_],  e.g.: 2 3 4[0m[42;53H[K[42;53H72,39[9C14%[40;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd1 = output.size()[[31m0[0m][42;53H[K[42;53H73,30[9C14%[41;27H[46m[[1C][0m[42;53H[K[42;53H73,30[9C14%[41;30H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H74,30[9C15%[40;27H[[1C][41;27H[46m[[1C][0m[42;53H[K[42;53H74,30[9C15%[41;30H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H75,30[9C15%[40;27H[[1C][41;27H[46m[[1C][0m[42;53H[K[42;53H75,30[9C15%[41;30H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_projection(output)[41;9Hprojection = self.bn(projection)[42;53H[K[42;53H76,39[9C16%[39;27H[[1C][40;39H[34h[?25h[?25l[42;54H7[41;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_proj_nonlinearity(projection).view(-[31m1[0m,  [41;1Hself.word_context_size)  [34m# [2x3, 5][0m[42;53H[K[42;53H78,39[9C16%[40;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = torch.mm(projection, self.word_context)  [34m# [2x3, 11[41;1H][0m[42;53H[K[42;53H79,39[9C17%[40;39H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[40;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[41;1Hize(d1 * d3, d2)[42;53H[K[42;53H81,39[9C18%[40;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[41;1H][0m[42;53H[K[42;53H82,39[9C19%[40;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hsentence_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H83,39[9C20%[40;39H[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m sentence_tensor[42;53H[K[42;53H84,31[9C20%[41;31H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H85,1[10C20%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# sentence_tensor = Variable(torch.zeros((output.size(0), outpp[41;1Hut.size(2))).cuda())[0m[42;53H[K[42;53H86,39[9C21%[40;39H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_][0m[42;53H[K[42;53H87,39[9C22%[40;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# for word_ind in range(output.size(0)):[0m[42;53H[K[42;53H88,39[9C22%[41;39H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.word_projection(output[word_ind])[0m[42;53H[K[42;53H89,39[9C23%[41;39H[34h[?25h[?25l[42;54H8[40;39H[34h[?25h[?25l[42;54H7[38;39H[34h[?25h[?25l[42;54H6[36;39H[34h[?25h[?25l[42;54H5,1 [35;1H[34h[?25h[?25l[42;54H4,31[34;31H[34h[?25h[?25l[42;54H3,39[32;39H[34h[?25h[?25l[42;54H2[30;39H[34h[?25h[?25l[42;54H1[28;39H[34h[?25h[?25l[42;54H0[27;39H[34h[?25h[?25l[42;53H79[25;39H[34h[?25h[?25l[42;54H8[23;39H[34h[?25h[?25l[42;54H7[22;39H[34h[?25h[?25l[42;54H6[21;39H[34h[?25h[?25l[20;27H[46m[[1C][0m[42;53H[K[42;53H75,30[9C23%[20;30H[34h[?25h[?25l[19;27H[46m[[1C][0m[20;27H[[1C][42;53H[K[42;53H74,30[9C23%[19;30H[34h[?25h[?25l[18;27H[46m[[1C][0m[19;27H[[1C][42;53H[K[42;53H73,30[9C23%[18;30H[34h[?25h[?25l[[1C][42;54H2,39[16;39H[34h[?25h[?25l[31C[34mee[17;1Hn[0m[18;27H[46m[[1C][0m[42;53H[K[42;53H73,30[9C23%[18;30H[34h[?25h[?25l[[1C][19;27H[46m[[1C][0m[42;53H[K[42;53H74,30[9C23%[19;30H[34h[?25h[?25l[[1C][20;27H[46m[[1C][0m[42;53H[K[42;53H75,30[9C23%[20;30H[34h[?25h[42;1H[K[20;29H[?25l[42;53H75,29[9C23%[20;29H[34h[?25h[?25l[42;53H[K[42;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l"models/hierarchical.py" 285L, 13086C written
[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ payt[K[K[K[KCUDA_VISIVLE[K[K[KV[KBLE_DEVICES = [K[K[K=2 p ythn[Kon train.py --model=[K=[K-id 4 --is-save yM[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C pyt[1PM[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C1 py[1@tM[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C

Using TensorFlow backend.
epoch num:  6
loading data...
max sentence length:  42583
total vocab size 691360
load word2index
0 1
save HAN...
(120000, 55, 70)
(120000, 55, 70) (120000,)
120000
data loaded
config vocab size: 219083
pretrain...
loss weight: 
 0.7786
 0.8593
 1.1661
 1.2979
 1.1405
 0.9833
 0.5955
 1.1791
[torch.FloatTensor of size 8]

training...
lr: 0.001 lr2: 0.0
Traceback (most recent call last):
  File "train.py", line 231, in <module>
    main(args.model_id, use_element, args.is_save)
  File "train.py", line 162, in main
    outputs = model(inputs)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/backup231/dyhu/BDCI2017-MingLue/models/hierarchical.py", line 251, in forward
    self.document_tensor = self.sentence_to_document(x, sent_hidden_stat, num_sentences_lens)  # [batch_size, sentence_hidden_size*2]
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/backup231/dyhu/BDCI2017-MingLue/models/hierarchical.py", line 150, in forward
    projection = self.sentence_proj_nonlinearity(self.bn(self.sentence_projection(output))).view(-1, self.sentence_context_size)  # [2*3, 5]
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/module.py", line 224, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/modules/batchnorm.py", line 37, in forward
    self.training, self.momentum, self.eps)
  File "/home/dyhu/.pyenv/versions/private/lib/python3.6/site-packages/torch/nn/functional.py", line 639, in batch_norm
    return f(input, weight, bias)
RuntimeError: running_mean should contain 46 elements not 55
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ vim hir[Ker[K[K[K[Kmodels/hierarchical.ppy 
[?1049h[?1h=[1;42r[34l[34h[?25h[23m[24m[0m[H[J[?25l[42;1H"models/hierarchical.py" 285L, 13086C[1;1H[35mimport[0m numpy [33mas[0m np
[35mimport[0m os
[35mimport[0m torch
[35mimport[0m torch.nn [33mas[0m nn
[35mfrom[0m torch.autograd [35mimport[0m Variable
[35mfrom[0m torch [35mimport[0m optim
[35mimport[0m torch.nn.functional [33mas[0m F

[35mfrom[0m torch.nn.utils.rnn [35mimport[0m pack_padded_sequence, pad_packed_sequenn[10;1Hce

[33mclass[0m [36mWordToSentence[0m(nn.Module):
    [31m"""
    The wordacter to word-level module.
    """[0m
    [33mdef[0m [36m__init__[0m(self, config):[17;9H[36msuper[0m(WordToSentence, self).__init__()[18;9Hself.word_embeddings = nn.Embedding(num_embeddings=config.vocaa[19;1Hb_size,[20;45Hembedding_dim=config.embedd[21;1Hding_size)[22;9Hself.projection_nonlinearity = nn.ReLU[23;9Hself.rnn = nn.GRU[24;9Hself.word_to_sentence = self.rnn(config.embedding_size, configg[25;1H.word_hidden_size, bidirectional=[36mTrue[0m,[26;33Hbatch_first=[36mTrue[0m, dropout=config.dropoo[27;1Hut_rate)[29;9Hself.word_context = nn.Parameter(torch.FloatTensor(config.wordd[30;1H_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())  [34m# [0m[30m[43mTODO[0m[34m 改变初始化方式[0m[31;9Hself.word_projection = nn.Linear(config.word_hidden_size * [31m2[0m,  [32;1Hconfig.word_context_size)[33;9Hself.word_context_size = config.word_context_size[34;9Hself.bn = nn.BatchNorm1d(num_features=config.sequence_length)[35;9Hself.word_proj_nonlinearity = self.projection_nonlinearity()[36;9Hself.softmax = nn.Softmax()[37;9H[33mif[0m os.path.exists(config.embedding_path) [33mand[0m config.is_traininn[38;1Hg [33mand[0m config.is_pretrain:[39;13H[36mprint[0m([31m"pretrain..."[0m)[40;13Hself.word_embeddings.weight.data.copy_(torch.from_numpy(npp[41;1H.load(config.embedding_path)))[42;53H1,1[11CTop[1;1H[34h[?25h[?25l[42;53H2[2;1H[34h[?25h[?25l[42;53H3[3;1H[34h[?25h[?25l[42;53H4[4;1H[34h[?25h[?25l[42;53H5[5;1H[34h[?25h[?25l[42;53H6[6;1H[34h[?25h[?25l[42;53H7[7;1H[34h[?25h[?25l[42;53H8,0-1[8;1H[34h[?25h[?25l[42;53H9,1  [9;1H[34h[?25h[?25l[42;53H10,0-1[11;1H[34h[?25h[?25l[42;54H1,1  [12;1H[34h[?25h[?25l[42;54H2[13;1H[34h[?25h[?25l[42;54H3[14;1H[34h[?25h[?25l[42;54H4[15;1H[34h[?25h[?25l[42;54H5[16;1H[34h[?25h[?25l[42;54H6[17;1H[34h[?25h[?25l[42;54H7[18;1H[34h[?25h[?25l[42;54H8[20;1H[34h[?25h[?25l[42;54H9[22;1H[34h[?25h[?25l[42;53H20[23;1H[34h[?25h[?25l[42;54H1[24;1H[34h[?25h[?25l[42;54H2[26;1H[34h[?25h[?25l[42;54H3,0-1[28;1H[34h[?25h[?25l[42;54H4,1  [29;1H[34h[?25h[?25l[42;54H5[31;1H[34h[?25h[?25l[42;54H6[33;1H[34h[?25h[?25l[42;54H7[34;1H[34h[?25h[?25l[42;54H8[35;1H[34h[?25h[?25l[42;54H9[36;1H[34h[?25h[?25l[42;53H30[37;1H[34h[?25h[?25l[42;54H1[39;1H[34h[?25h[?25l[42;54H2[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;1H[K[42;53H33,0-1[9C0%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H34,1[11C0%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[41;1H=weight_decay)[42;53H[K[42;53H35,1[11C1%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H36,0-1[9C1%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_sort_word_tensor[0m(self, padded_tensor, sequence_lens):[42;53H[K[42;53H37,1[11C2%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens, order = sequence_lens.sort([31m0[0m, descending=[36mTrue[0m)[42;53H[K[42;53H38,1[11C2%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# print(type(sequence_lens), type(order))[0m[42;53H[K[42;53H39,1[11C3%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# < class 'torch.cuda.LongTensor'> < class 'torch.cuda.LongTenn[41;1Hsor' >[0m[42;53H[K[42;53H40,1[11C3%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hpadded_tensor = padded_tensor[order][42;53H[K[42;53H41,1[11C3%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor, sequence_lens, order[42;53H[K[42;53H42,1[11C4%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H43,0-1[9C4%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_unsort_word_tensor[0m(self, output, order):[42;53H[K[42;53H44,1[11C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H45,1[11C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H46,0-1[9C5%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[42;53H[K[42;53H47,1[11C6%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param order:  Tensor
        :return: Variable[0m[42;53H[K[42;53H48,1[11C6%[40;1H[34h[?25h[?25l[42;54H9[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H50,1[11C7%[40;1H[34h[?25h[?25l[42;54H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Horder = [36mlist[0m(order)[42;53H[K[42;53H52,1[11C7%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[42;53H[K[42;53H53,1[11C7%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13Hpadded_tensor[i, :] = (output[order.index(i)])[41;9H[33mreturn[0m padded_tensor[42;53H[K[42;53H54,1[11C8%[40;1H[34h[?25h[?25l[42;54H5[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[42;53H[K[42;53H56,0-1[9C8%[40;1H[34h[?25h[?25l[42;54H7[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H58,0-1[9C9%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36mforward[0m(self, x, word_hidden_stat, sequence_lens):[41;9H[31m'''[0m[42;53H[K[42;53H59,1[11C9%[40;1H[34h[?25h[?25l[42;53H60[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m                  [
        :param x: batch_size * num_sentences, sequence_length][0m[42;53H[K[42;53H61,1[10C10%[40;1H[34h[?25h[?25l[42;54H2[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param sequence_lens: Tensor of sequences lengths of each batcc[41;1Hh element[0m[42;53H[K[42;53H63,1[10C10%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return:  [batch_size * num_sentences, word_hidden_size * 2][0m[42;53H[K[42;53H64,1[10C11%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H65,1[10C11%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hword_sorted, sequence_lens, order = self._sort_word_tensor(x,  [41;1Hsequence_lens)[42;53H[K[42;53H66,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hword_embed = self.word_embeddings(word_sorted)[42;53H[K[42;53H67,1[10C12%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hpacked = pack_padded_sequence(word_embed, [36mlist[0m(sequence_lens),,[41;1H batch_first=[36mTrue[0m)[42;53H[K[42;53H68,1[10C12%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = self.word_to_sentence(packed, word_hidden_stat)[42;53H[K[42;53H69,1[10C13%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H70,1[10C13%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = self._unsort_word_tensor(output, order)[41;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hidde[0m[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H71,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[40;1H        [34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_],  e.g.: 2 3 4[0m[42;53H[K[42;53H72,1[10C14%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd1 = output.size()[[31m0[0m][42;53H[K[42;53H73,1[10C14%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H74,1[10C15%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H75,1[10C15%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_projection(output)[41;9Hprojection = self.bn(projection)[42;53H[K[42;53H76,1[10C16%[40;1H[34h[?25h[?25l[42;54H7[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hprojection = self.word_proj_nonlinearity(projection).view(-[31m1[0m,  [41;1Hself.word_context_size)  [34m# [2x3, 5][0m[42;53H[K[42;53H78,1[10C16%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = torch.mm(projection, self.word_context)  [34m# [2x3, 11[41;1H][0m[42;53H[K[42;53H79,1[10C17%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[42;53H[K[42;53H80,1[10C18%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[41;1Hize(d1 * d3, d2)[42;53H[K[42;53H81,1[10C18%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[41;1H][0m[42;53H[K[42;53H82,1[10C19%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hsentence_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H83,1[10C20%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m sentence_tensor[42;53H[K[42;53H84,1[10C20%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H85,0-1[8C20%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# sentence_tensor = Variable(torch.zeros((output.size(0), outpp[41;1Hut.size(2))).cuda())[0m[42;53H[K[42;53H86,1[10C21%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# size: [batch_Size*num_sentences, sequence_length, word_hiddee[41;1Hn_size*2_][0m[42;53H[K[42;53H87,1[10C22%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# for word_ind in range(output.size(0)):[0m[42;53H[K[42;53H88,1[10C22%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.word_projection(output[word_ind])[0m[42;53H[K[42;53H89,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.bn(projection)[0m[42;53H[K[42;53H90,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.word_proj_nonlinearity(projection)[0m[42;53H[K[42;53H91,1[10C23%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     # size: [sequence_length, word_context_size][0m[42;53H[K[42;53H92,1[10C24%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     attention = torch.mm(projection, self.word_context)  # [[[41;1Hsequence_length, 1][0m[42;53H[K[42;53H93,1[10C24%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     attention = self.softmax(attention.transpose(0,1))  # [0m[30m[43mTOO[41;1HDO[0m[42;53H[K[42;53H94,1[10C25%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     sentence_tensor[word_ind, :] = output[word_ind].transposs[41;1He(1, 0).mv(attention.view(-1))[0m[42;53H[K[42;53H95,1[10C25%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# return sentence_tensor[0m[42;53H[K[42;53H96,1[10C26%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[42;53H[K[42;53H97,0-1[8C26%[40;1H[34h[?25h[?25l[42;54H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[33mclass[0m [36mSentenceToDocment[0m(nn.Module):[42;53H[K[42;53H99,1[10C27%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[31m"""[0m[42;53H[K[42;53H100,1[9C27%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m    The word-to-sentence module.[0m[42;53H[K[42;53H101,1[9C27%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m    """[0m[42;53H[K[42;53H102,1[9C28%[40;1H[34h[?25h[?25l[42;55H3,0-1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H104,1[9C28%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[36msuper[0m(SentenceToDocment, self).__init__()[42;53H[K[42;53H105,1[9C29%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.projection_nonlinearity = nn.ReLU[42;53H[K[42;53H106,1[9C29%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.rnn = nn.GRU[42;53H[K[42;53H107,1[9C29%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Hself.sentence_to_document = self.rnn(config.word_hidden_size*[31m22[0m[40;1H, config.sentence_hidden_size,[41;36Hbidirectional=[36mTrue[0m, dropout=config.[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H108,1[9C30%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H                                   bidirectional=[36mTrue[0m, dropout=config..[40;1Hdropout_rate, batch_first=[36mTrue[0m)[41;9Hself.sentence_context = nn.Parameter(torch.FloatTensor(config.[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H109,1[9C30%[39;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[40;1H        self.sentence_context = nn.Parameter(torch.FloatTensor(config..[41;1Hsentence_context_size, [31m1[0m).uniform_(-[31m0.1[0m, [31m0.1[0m).cuda())[42;53H[K[42;53H110,1[9C31%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_projection = nn.Linear(config.sentence_hidden_sii[41;1Hze * [31m2[0m, config.sentence_context_size)[42;53H[K[42;53H111,1[9C31%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_context_size = config.sentence_context_size[41;9Hself.bn = nn.BatchNorm1d(num_features=config.num_sentences)[42;53H[K[42;53H112,1[9C32%[40;1H[34h[?25h[?25l[42;55H3[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.sentence_proj_nonlinearity = self.projection_nonlinearityy[41;1H()[42;53H[K[42;53H114,1[9C32%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.softmax = nn.Softmax()[42;53H[K[42;53H115,1[9C33%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H116,0-1[7C33%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;5H[33mdef[0m [36m_sort_sentence_tensor[0m(self, padded_tensor, num_sentences_lens))[41;1H:[42;53H[K[42;53H117,1[9C33%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hnum_sentences_lens, order = num_sentences_lens.sort([31m0[0m, descendd[41;1Hing=[36mTrue[0m)[42;53H[K[42;53H118,1[9C34%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hpadded_tensor = padded_tensor[order][42;53H[K[42;53H119,1[9C34%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor, num_sentences_lens, order[42;53H[K[42;53H120,1[9C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H121,0-1[7C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36m_unsort_sentence_tensor[0m(self, output, order):[42;53H[K[42;53H122,1[9C35%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H123,1[9C36%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;1H[31m        :param output: <class 'torch.autograd.variable.Variable'>[0m[42;53H[K[42;53H124,0-1[7C36%[40;1H[34h[?25h[?25l[42;55H5,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param order:  Tensor
        :return: Tensor[0m[42;53H[K[42;53H126,1[9C37%[40;1H[34h[?25h[?25l[42;55H7[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hpadded_tensor = Variable(torch.zeros(output.size())).cuda()[42;53H[K[42;53H128,1[9C37%[40;1H[34h[?25h[?25l[42;55H9[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Horder = [36mlist[0m(order)[42;53H[K[42;53H130,1[9C38%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m i, _ [33min[0m [36menumerate[0m(output):[42;53H[K[42;53H131,1[9C38%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hpadded_tensor[i, :] = (output[order.index(i)])[42;53H[K[42;53H132,1[9C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m padded_tensor[42;53H[K[42;53H133,1[9C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H134,0-1[7C39%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mforward[0m(self, x, sent_hidden_stat,  num_sentences_lens):[42;53H[K[42;53H135,1[9C40%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H136,1[9C40%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H137,0-1[7C41%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        :param x: [batch_size, num_sentences, word_hidden_size * 2], VV[41;1Hariable[0m[42;53H[K[42;53H138,1[9C41%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param num_sentences_lens: Tensor[0m[42;53H[K[42;53H139,1[9C42%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return: [batch_size, sentence_hidden_size*2][0m[42;53H[K[42;53H140,1[9C42%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;1H[31m        '''[0m[41;9Hsentence_sorted, num_sentences_lens, order = self._sort_senten[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H141,1[9C42%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        sentence_sorted, num_sentences_lens, order = self._sort_sentenn[40;1Hce_tensor(x, num_sentences_lens)[41;9Hpacked = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_senten[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H142,1[9C43%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        packed = pack_padded_sequence(sentence_sorted, [36mlist[0m(num_sentenn[40;1Hces_lens), batch_first=[36mTrue[0m)[41;9Houtput, (hidden, cell) = self.sentence_to_document(packed, sen[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H143,1[9C43%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        output, (hidden, cell) = self.sentence_to_document(packed, senn[40;1Ht_hidden_stat)[41;9Houtput, _ = pad_packed_sequence(output, batch_first=[36mTrue[0m)[42;53H[K[42;53H144,1[9C44%[39;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = self._unsort_sentence_tensor(output, order)  [34m# Variabb[41;1Hle[0m[42;53H[K[42;53H146,1[9C44%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hd1 = output.size()[[31m0[0m][41;9Hd2 = output.size()[[31m1[0m][42;53H[K[42;53H147,1[9C45%[40;1H[34h[?25h[?25l[42;55H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hd3 = output.size()[[31m2[0m][42;53H[K[42;53H149,1[9C45%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9Hprojection = self.sentence_proj_nonlinearity(self.bn(self.sentt[40;1Hence_projection(output))).view(-[31m1[0m, self.sentence_context_size)  [34m# [2*33[41;1H, 5][0m[42;53H[K[42;53H150,1[9C46%[39;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = torch.mm(projection, self.sentence_context)  [34m# [2xx[41;1H3, 1][0m[42;53H[K[42;53H151,1[9C46%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hattention = self.softmax(attention.view(d1, d2))  [34m# [2, 3][0m[42;53H[K[42;53H152,1[9C47%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hattention = attention.view([31m1[0m, d1 * d2).expand(d3, d1 * d2).ress[41;1Hize(d1 * d3, d2)[42;53H[K[42;53H153,1[9C47%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Houtput = output.permute([31m2[0m, [31m0[0m, [31m1[0m).resize(d1 * d3, d2)  [34m# [4,2,33[41;1H][0m[42;53H[K[42;53H154,1[9C48%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hdocument_tensor = (output * attention).[36msum[0m([31m1[0m).resize(d3, d1).tt[41;1Hranspose([31m0[0m, [31m1[0m)[42;53H[K[42;53H155,1[9C49%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m document_tensor[42;53H[K[42;53H156,1[9C49%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H157,0-1[7C49%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# for sentence_ind in range(output.size(0)):[0m[42;53H[K[42;53H158,1[9C50%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     projection = self.sentence_projection(output[sentence_inn[41;1Hd])[0m[42;53H[K[42;53H159,1[9C50%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.bn(projection)[0m[42;53H[K[42;53H160,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     projection = self.sentence_proj_nonlinearity(projection)[0m[42;53H[K[42;53H161,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     attention = torch.mm(projection, self.sentence_context)[0m[42;53H[K[42;53H162,1[9C51%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m#     attention = self.softmax(attention.transpose(1, 0))[0m[42;53H[K[42;53H163,1[9C52%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m#     document_tensor[sentence_ind, :] = output[sentence_ind]..[41;1Htranspose(1, 0).mv(attention.view(-1))[0m[42;53H[K[42;53H164,1[9C52%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# return document_tensor[0m[42;53H[K[42;53H165,1[9C53%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;5H[33mdef[0m [36mget_optimizer[0m(self, lr, lr2, weight_decay):[42;53H[K[42;53H166,0-1[7C53%[40;1H[34h[?25h[?25l[42;55H7,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[33mreturn[0m torch.optim.Adam(self.parameters(), lr=lr, weight_decayy[41;1H=weight_decay)[42;53H[K[42;53H168,1[9C54%[40;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H169,0-1[7C54%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;1H[33mclass[0m [36mHAN[0m(nn.Module):[42;53H[K[42;53H170,0-1[7C55%[40;1H[34h[?25h[?25l[42;55H1,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[41;5H[33mdef[0m [36m__init__[0m(self, config):[42;53H[K[42;53H172,0-1[7C56%[40;1H[34h[?25h[?25l[42;55H3,1  [41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[36msuper[0m(HAN, self).__init__()[41;9Hself.num_class = config.num_class[42;53H[K[42;53H174,1[9C56%[40;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;2H[34m#       self.dropout = nn.Dropout(p=config.dropout_rate)[0m[42;53H[K[42;53H176,1[9C57%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hself.word_to_sentence = WordToSentence(config)[41;9Hself.sentence_to_document = SentenceToDocment(config)[42;53H[K[42;53H177,1[9C57%[40;1H[34h[?25h[?25l[42;55H8[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.config = config[42;53H[K[42;53H179,1[9C58%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hself.is_training = [36mTrue[0m[42;53H[K[42;53H180,1[9C58%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[34m# set up the intermediate output step, if required[0m[42;53H[K[42;53H181,1[9C58%[41;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;9H[34m#self.intermediate = False[40;9H#self.intermediate_output_nonlinearity = nn.ELU[41;9H#if self.intermediate:[0m[42;53H[K[42;53H182,1[9C59%[39;1H[34h[?25h[?25l[42;55H3[40;1H[34h[?25h[?25l[42;55H4[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H[34m# self.intermediate_output = nn.Linear(config.sentence_hidd[41;1Hden_size * 2, config.sentence_hidden_size * 2)[0m[42;53H[K[42;53H185,1[9C60%[40;1H[34h[?25h[?25l[1;41r[1;1H[3M[1;42r[39;14H[34m#self.intermediate_nonlinearity = self.intermediate_outpuu[40;1Ht_nonlinearity()[0m[42;53H[K[42;53H186,1[9C60%[39;1H[34h[?25h[?25l[42;55H7,0-1[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9H[34m# final transformation to class weightings[0m[41;9Hself.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num_[41;1H[1m[34m@                                                                     [0m[42;53H[K[42;53H188,1[9C61%[40;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[39;1H        self.fc = nn.Linear(config.sentence_hidden_size * [31m2[0m, self.num__[40;1Hclass)[42;53H[K[42;53H189,1[9C62%[39;1H[34h[?25h[?25l[42;54H90,0-1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_sequence_lens[0m(self, x):[42;53H[K[42;53H191,1[9C62%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_lens = [][42;53H[K[42;53H192,1[9C62%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hsequence_length = x.size()[[31m2[0m][42;53H[K[42;53H193,1[9C63%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hx = x.view(-[31m1[0m, sequence_length)[41;9H[33mfor[0m line [33min[0m x:[42;53H[K[42;53H194,1[9C63%[40;1H[34h[?25h[?25l[42;55H5[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hn = [31m0[0m[42;53H[K[42;53H196,1[9C64%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hidx = [36mlen[0m(line) - [31m1[0m[42;53H[K[42;53H197,1[9C64%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H198,1[9C65%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mif[0m [36mint[0m(line[idx]) != [31m1[0m: [34m#<pad>[0m[42;53H[K[42;53H199,1[9C65%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;21H[33mbreak[0m[41;17Hn += [31m1[0m[42;53H[K[42;53H200,1[9C66%[40;1H[34h[?25h[?25l[42;55H1[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hidx -= [31m1[0m[42;53H[K[42;53H202,1[9C66%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mif[0m n == [36mlen[0m(line):[42;53H[K[42;53H203,1[9C66%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hsequence_lens.append([31m1[0m)  [34m# [0m[30m[43mTODO[0m[42;53H[K[42;53H204,1[9C67%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13H[33melse[0m:[41;17Hsequence_lens.append(([36mlen[0m(line) - n))[42;53H[K[42;53H205,1[9C68%[40;1H[34h[?25h[?25l[42;55H6[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.Tensor(sequence_lens).cuda()[42;53H[K[42;53H207,1[9C68%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H208,0-1[7C68%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mis_padded_list[0m(self, seq):[42;53H[K[42;53H209,1[9C69%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9Hflag = [36mTrue[0m[42;53H[K[42;53H210,1[9C69%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mfor[0m w [33min[0m seq:[42;53H[K[42;53H211,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mif[0m w != [31m1[0m: [34m#<pad>[0m[42;53H[K[42;53H212,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hflag = [36mFalse[0m[42;53H[K[42;53H213,1[9C70%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mbreak[0m[42;53H[K[42;53H214,1[9C71%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m flag[42;53H[K[42;53H215,1[9C71%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H216,0-1[7C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mget_num_sentences_lens[0m(self, x):[42;53H[K[42;53H217,1[9C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[31m'''[0m[42;53H[K[42;53H218,1[9C72%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H219,0-1[7C73%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :param x: batch_size, num_sentences, sequence_length], Tensor[0m[42;53H[K[42;53H220,1[9C73%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        :return: num_sentences_lens: length: batch_size, Tensor[0m[42;53H[K[42;53H221,1[9C74%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;1H[31m        '''[0m[42;53H[K[42;53H222,1[9C74%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;9Hnum_sentences_lens = [][41;9H[33mfor[0m matrix [33min[0m x:[42;53H[K[42;53H223,1[9C75%[40;1H[34h[?25h[?25l[42;55H4[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;13Hn = [31m0[0m[41;13Hidx = [36mlen[0m(matrix) - [31m1[0m[42;53H[K[42;53H225,1[9C75%[40;1H[34h[?25h[?25l[42;55H6[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13H[33mwhile[0m idx >= [31m0[0m:[42;53H[K[42;53H227,1[9C76%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17H[33mif[0m [33mnot[0m self.is_padded_list(matrix[idx]):[42;53H[K[42;53H228,1[9C76%[41;1H[34h[?25h[?25l[1;41r[1;1H[2M[1;42r[40;21H[33mbreak[0m[41;17Hn += [31m1[0m[42;53H[K[42;53H229,1[9C77%[40;1H[34h[?25h[?25l[42;54H30[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;17Hidx -= [31m1[0m[42;53H[K[42;53H231,1[9C77%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;13Hnum_sentences_lens.append(([36mlen[0m(matrix) - n))[42;53H[K[42;53H232,1[9C78%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;9H[33mreturn[0m torch.Tensor(num_sentences_lens).cuda()[42;53H[K[42;53H233,1[9C78%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[42;53H[K[42;53H234,0-1[7C79%[41;1H[34h[?25h[?25l[1;41r[41;1H
[1;42r[41;5H[33mdef[0m [36mforward[0m(self, x):[42;53H[K[42;53H235,1[9C79%[41;1H[34h[?25h[?25l[42;55H4,0-1[40;1H[34h[?25h[?25l[42;55H3,1  [39;1H[34h[?25h[?25l[42;55H2[38;1H[34h[?25h[?25l[42;55H1[37;1H[34h[?25h[?25l[42;55H0[36;1H[34h[?25h[?25l[42;54H29[35;1H[34h[?25h[?25l[42;55H8[34;1H[34h[?25h[?25l[42;55H7[33;1H[34h[?25h[?25l[42;55H6[32;1H[34h[?25h[?25l[42;55H5[31;1H[34h[?25h[?25l[42;55H4[30;1H[34h[?25h[?25l[42;55H3[29;1H[34h[?25h[?25l[42;55H2[28;1H[34h[?25h[?25l[42;55H1[27;1H[34h[?25h[?25l[42;55H0[26;1H[34h[?25h[?25l[42;54H19,0-1[25;1H[34h[?25h[?25l[42;55H8,1  [24;1H[34h[?25h[?25l[42;55H7[23;1H[34h[?25h[?25l[42;55H6,0-1[22;1H[34h[?25h[?25l[42;55H5,1  [21;1H[34h[?25h[?25l[42;55H4[20;1H[34h[?25h[?25l[42;55H3[19;1H[34h[?25h[?25l[42;55H2[18;1H[34h[?25h[?25l[42;55H1[17;1H[34h[?25h[?25l[42;55H0[16;1H[34h[?25h[?25l[42;54H09[15;1H[34h[?25h[?25l[42;55H8,0-1[14;1H[34h[?25h[?25l[42;55H9,1  [15;1H[34h[?25h[?25l[42;54H10[16;1H[34h[?25h[?25l[42;55H1[17;1H[34h[?25h[?25l[42;55H2[18;1H[34h[?25h[?25l[42;55H3[19;1H[34h[?25h[?25l[42;55H2[18;1H[34h[?25h[?25l[42;57H2[18;2H[34h[?25h[?25l[42;57H3[18;3H[34h[?25h[?25l[42;57H4[18;4H[34h[?25h[?25l[42;57H5[18;5H[34h[?25h[?25l[42;57H6[18;6H[34h[?25h[?25l[42;57H7[18;7H[34h[?25h[?25l[42;57H8[18;8H[34h[?25h[?25l[42;57H9[18;9H[34h[?25h[?25l[42;57H10[18;10H[34h[?25h[?25l[42;58H1[18;11H[34h[?25h[?25l[42;58H2[18;12H[34h[?25h[?25l[42;58H3[18;13H[34h[?25h[?25l[42;58H4[18;14H[34h[?25h[?25l[42;58H5[18;15H[34h[?25h[?25l[42;58H6[18;16H[34h[?25h[?25l[42;58H7[18;17H[34h[?25h[?25l[42;58H8[18;18H[34h[?25h[?25l[42;58H9[18;19H[34h[?25h[?25l[42;57H20[18;20H[34h[?25h[?25l[42;58H1[18;21H[34h[?25h[?25l[42;58H2[18;22H[34h[?25h[?25l[42;58H1[18;21H[34h[?25h[?25l[42;57H1 [18;1H[34h[?25h[?25l[42;1H[1m-- INSERT --[0m[42;53H[K[42;53H212,1[9C79%[18;1H[34h[?25h[?25l[42;57H2[18;2H[34h[?25h[?25l[42;57H3[18;3H[34h[?25h[?25l[42;57H4[18;4H[34h[?25h[?25l[42;57H5[18;5H[34h[?25h[?25l[42;57H6[18;6H[34h[?25h[?25l[42;57H7[18;7H[34h[?25h[?25l[42;57H8[18;8H[34h[?25h[?25l[42;57H9[18;9H[34h[?25h[?25l[42;57H10[18;10H[34h[?25h[?25l[42;58H1[18;11H[34h[?25h[?25l[42;58H2[18;12H[34h[?25h[?25l[42;58H3[18;13H[34h[?25h[?25l[42;58H4[18;14H[34h[?25h[?25l[42;58H5[18;15H[34h[?25h[?25l[42;58H6[18;16H[34h[?25h[?25l[42;58H7[18;17H[34h[?25h[?25l[42;58H8[18;18H[34h[?25h[?25l[42;58H9[18;19H[34h[?25h[?25l[42;57H20[18;20H[34h[?25h[?25l[42;58H1[18;21H[34h[?25h[?25l[42;58H2[18;22H[34h[?25h[?25l: [34m#<pad>[0m[18;29H[K[42;58H1[18;21H[34h[?25h[?25lo: [34m#<pad>[0m[42;58H2[18;22H[34h[?25h[?25l: [34m#<pad>[0m[18;29H[K[42;58H1[18;21H[34h[?25h[?25l[31m0[0m: [34m#<pad>[0m[42;58H2[18;22H[34h[?25h[42;1H[K[18;21H[?25l[42;53H212,21[8C79%[18;21H[34h[?25h[?25l[42;58H2[18;22H[34h[?25h[?25l[42;58H1[18;21H[34h[?25h[?25l[42;53H[K[42;1H:[34h[?25hw[?25l[34h[?25hq[?25l[34h[?25h![?25l[34h[?25h[?25l"models/hierarchical.py" 285L, 13086C written
[?1l>[34h[?25h[?1049ldyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ clear
[H[Jdyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ v[Ksc[K[Kclearvim models/hierarchical.ppy M[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[CCUDA_VISIBLE_DEVICES=1 python train.py --model-id 4 --is-save y
Using TensorFlow backend.
epoch num:  6
loading data...
max sentence length:  42583
total vocab size 691360
load word2index
0 1
save HAN...
(120000, 55, 70)
(120000, 55, 70) (120000,)
120000
data loaded
config vocab size: 219083
pretrain...
loss weight: 
 0.7786
 0.8593
 1.1661
 1.2979
 1.1405
 0.9833
 0.5955
 1.1791
[torch.FloatTensor of size 8]

training...
lr: 0.001 lr2: 0.0
[1,   187] loss: 1.867, acc: 15.625
[1,   374] loss: 1.725, acc: 21.875
[1,   561] loss: 1.666, acc: 40.625
[1,   748] loss: 1.648, acc: 43.750
[1,   935] loss: 1.638, acc: 50.000
[1,  1122] loss: 1.581, acc: 46.875
[1,  1309] loss: 1.590, acc: 25.000
[1,  1496] loss: 1.580, acc: 21.875
[1,  1683] loss: 1.564, acc: 50.000
[1,  1870] loss: 1.558, acc: 37.500
[1,  2057] loss: 1.559, acc: 34.375
[1,  2244] loss: 1.551, acc: 28.125
[1,  2431] loss: 1.537, acc: 40.625
[1,  2618] loss: 1.520, acc: 37.500
[1,  2805] loss: 1.505, acc: 43.750
[1,  2992] loss: 1.526, acc: 46.875
[1,  3179] loss: 1.519, acc: 34.375
[1,  3366] loss: 1.494, acc: 56.250
[1,  3553] loss: 1.500, acc: 46.875
[1,  3740] loss: 1.502, acc: 50.000
lr: 0.001 lr2: 0.0
[2,   187] loss: 1.474, acc: 37.500
[2,   374] loss: 1.466, acc: 31.250
[2,   561] loss: 1.454, acc: 43.750
[2,   748] loss: 1.447, acc: 53.125
[2,   935] loss: 1.435, acc: 40.625
[2,  1122] loss: 1.459, acc: 43.750
[2,  1309] loss: 1.447, acc: 43.750
[2,  1496] loss: 1.450, acc: 53.125
[2,  1683] loss: 1.429, acc: 37.500
[2,  1870] loss: 1.434, acc: 56.250
[2,  2057] loss: 1.429, acc: 59.375
[2,  2244] loss: 1.439, acc: 43.750
[2,  2431] loss: 1.403, acc: 34.375
[2,  2618] loss: 1.405, acc: 50.000
[2,  2805] loss: 1.408, acc: 43.750
[2,  2992] loss: 1.427, acc: 43.750
[2,  3179] loss: 1.386, acc: 43.750
[2,  3366] loss: 1.393, acc: 56.250
[2,  3553] loss: 1.390, acc: 62.500
[2,  3740] loss: 1.400, acc: 56.250
lr: 0.00075 lr2: 0.0
[3,   187] loss: 1.368, acc: 46.875
[3,   374] loss: 1.355, acc: 46.875
[3,   561] loss: 1.337, acc: 37.500
[3,   748] loss: 1.340, acc: 37.500
[3,   935] loss: 1.358, acc: 40.625
[3,  1122] loss: 1.345, acc: 62.500
[3,  1309] loss: 1.361, acc: 34.375
[3,  1496] loss: 1.356, acc: 43.750
[3,  1683] loss: 1.354, acc: 53.125
[3,  1870] loss: 1.323, acc: 68.750
[3,  2057] loss: 1.329, acc: 53.125
[3,  2244] loss: 1.342, acc: 62.500
[3,  2431] loss: 1.345, acc: 34.375
[3,  2618] loss: 1.325, acc: 59.375
[3,  2805] loss: 1.327, acc: 46.875
[3,  2992] loss: 1.327, acc: 43.750
[3,  3179] loss: 1.327, acc: 62.500
[3,  3366] loss: 1.337, acc: 37.500
[3,  3553] loss: 1.322, acc: 53.125
[3,  3740] loss: 1.314, acc: 65.625
lr: 0.0005625000000000001 lr2: 0.0002
[4,   187] loss: 1.274, acc: 46.875
[4,   374] loss: 1.261, acc: 37.500
[4,   561] loss: 1.306, acc: 53.125
[4,   748] loss: 1.292, acc: 40.625
[4,   935] loss: 1.277, acc: 50.000
[4,  1122] loss: 1.291, acc: 40.625
[4,  1309] loss: 1.274, acc: 46.875
[4,  1496] loss: 1.288, acc: 56.250
[4,  1683] loss: 1.288, acc: 56.250
[4,  1870] loss: 1.263, acc: 59.375
[4,  2057] loss: 1.284, acc: 50.000
[4,  2244] loss: 1.265, acc: 50.000
[4,  2431] loss: 1.292, acc: 34.375
[4,  2618] loss: 1.264, acc: 53.125
[4,  2805] loss: 1.280, acc: 46.875
[4,  2992] loss: 1.281, acc: 56.250
[4,  3179] loss: 1.280, acc: 43.750
[4,  3366] loss: 1.258, acc: 53.125
[4,  3553] loss: 1.273, acc: 62.500
[4,  3740] loss: 1.257, acc: 68.750
lr: 0.00042187500000000005 lr2: 0.00015000000000000001
[5,   187] loss: 1.160, acc: 56.250
[5,   374] loss: 1.177, acc: 53.125
[5,   561] loss: 1.164, acc: 56.250
[5,   748] loss: 1.172, acc: 46.875
[5,   935] loss: 1.169, acc: 40.625
[5,  1122] loss: 1.152, acc: 59.375
[5,  1309] loss: 1.146, acc: 40.625
[5,  1496] loss: 1.171, acc: 56.250
[5,  1683] loss: 1.163, acc: 53.125
[5,  1870] loss: 1.130, acc: 53.125
[5,  2057] loss: 1.156, acc: 40.625
[5,  2244] loss: 1.155, acc: 59.375
[5,  2431] loss: 1.154, acc: 50.000
[5,  2618] loss: 1.163, acc: 56.250
[5,  2805] loss: 1.164, acc: 59.375
[5,  2992] loss: 1.148, acc: 46.875
[5,  3179] loss: 1.155, acc: 65.625
[5,  3366] loss: 1.133, acc: 65.625
[5,  3553] loss: 1.148, acc: 59.375
[5,  3740] loss: 1.146, acc: 50.000
lr: 0.00031640625000000006 lr2: 0.00011250000000000001
[6,   187] loss: 1.035, acc: 71.875
[6,   374] loss: 1.014, acc: 59.375
[6,   561] loss: 1.023, acc: 62.500
[6,   748] loss: 1.036, acc: 71.875
[6,   935] loss: 1.027, acc: 65.625
[6,  1122] loss: 1.019, acc: 65.625
[6,  1309] loss: 1.032, acc: 62.500
[6,  1496] loss: 1.018, acc: 59.375
[6,  1683] loss: 1.021, acc: 65.625
[6,  1870] loss: 1.016, acc: 68.750
[6,  2057] loss: 1.045, acc: 68.750
[6,  2244] loss: 1.029, acc: 75.000
[6,  2431] loss: 1.035, acc: 65.625
[6,  2618] loss: 1.025, acc: 56.250
[6,  2805] loss: 1.033, acc: 62.500
[6,  2992] loss: 1.035, acc: 56.250
[6,  3179] loss: 1.037, acc: 56.250
[6,  3366] loss: 1.035, acc: 59.375
[6,  3553] loss: 1.044, acc: 59.375
[6,  3740] loss: 1.025, acc: 68.750
dyhu@mit116:/backup231/dyhu/BDCI2017-MingLue$ 